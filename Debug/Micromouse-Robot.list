
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000225c  0800bfc8  0800bfc8  0000cfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e224  0800e224  000101dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e224  0800e224  0000f224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e22c  0800e22c  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e22c  0800e22c  0000f22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e230  0800e230  0000f230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e234  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  200001dc  0800e410  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800e410  000105d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016298  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003677  00000000  00000000  000264a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00029b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd0  00000000  00000000  0002af08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa79  00000000  00000000  0002bed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018998  00000000  00000000  00046951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fddf  00000000  00000000  0005f2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff0c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000637c  00000000  00000000  000ff10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00105488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfb0 	.word	0x0800bfb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800bfb0 	.word	0x0800bfb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fee3 	bl	8004ccc <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f006 f91b 	bl	8007184 <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 febb 	bl	8004ccc <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f006 f9c3 	bl	80072e4 <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002b0 	.word	0x200002b0

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f006 f9b6 	bl	80072e4 <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002b0 	.word	0x200002b0

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8000fe0:	2164      	movs	r1, #100	@ 0x64
 8000fe2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fe6:	f7ff ff7d 	bl	8000ee4 <play_tone>
    play_tone(659, 100);  // E5
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f240 2093 	movw	r0, #659	@ 0x293
 8000ff0:	f7ff ff78 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000ffa:	f7ff ff73 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000ffe:	21c8      	movs	r1, #200	@ 0xc8
 8001000:	f240 4017 	movw	r0, #1047	@ 0x417
 8001004:	f7ff ff6e 	bl	8000ee4 <play_tone>
    play_tone(0, 100);    // Pause
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff6a 	bl	8000ee4 <play_tone>
    play_tone(1047, 100); // C6
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	f240 4017 	movw	r0, #1047	@ 0x417
 8001016:	f7ff ff65 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001020:	f7ff ff60 	bl	8000ee4 <play_tone>
    play_tone(1047, 300); // C6
 8001024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001028:	f240 4017 	movw	r0, #1047	@ 0x417
 800102c:	f7ff ff5a 	bl	8000ee4 <play_tone>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e00a      	b.n	8001056 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 8001040:	21c8      	movs	r1, #200	@ 0xc8
 8001042:	20dc      	movs	r0, #220	@ 0xdc
 8001044:	f7ff ff4e 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8001048:	2164      	movs	r1, #100	@ 0x64
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4a 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 3; i++) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddf1      	ble.n	8001040 <play_error_tone+0xc>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <calculate_optimal_path_from_explored_areas>:

/**
 * @brief Calculate optimal path using ONLY explored areas (MMS algorithm)
 */
void calculate_optimal_path_from_explored_areas(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 800106e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔍 CALCULATING OPTIMAL PATH FROM EXPLORED AREAS...\r\n");
 8001070:	4863      	ldr	r0, [pc, #396]	@ (8001200 <calculate_optimal_path_from_explored_areas+0x198>)
 8001072:	f000 fc4d 	bl	8001910 <send_bluetooth_message>

    // Reset all distances
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 800107c:	e01d      	b.n	80010ba <calculate_optimal_path_from_explored_areas+0x52>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8001084:	e010      	b.n	80010a8 <calculate_optimal_path_from_explored_areas+0x40>
            maze[x][y].distance = MAX_DISTANCE;
 8001086:	495f      	ldr	r1, [pc, #380]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001088:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 800108c:	011a      	lsls	r2, r3, #4
 800108e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8001092:	4413      	add	r3, r2
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	440b      	add	r3, r1
 8001098:	f242 720f 	movw	r2, #9999	@ 0x270f
 800109c:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 800109e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80010a2:	3301      	adds	r3, #1
 80010a4:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 80010a8:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	ddea      	ble.n	8001086 <calculate_optimal_path_from_explored_areas+0x1e>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80010b0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80010b4:	3301      	adds	r3, #1
 80010b6:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80010ba:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	dddd      	ble.n	800107e <calculate_optimal_path_from_explored_areas+0x16>
        }
    }

    // Set goal distances to 0 ONLY if they were visited
    bool goal_found = false;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827

    if (maze[goal_x1][goal_y1].visited) {
 80010c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	494c      	ldr	r1, [pc, #304]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	440b      	add	r3, r1
 80010da:	3304      	adds	r3, #4
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d015      	beq.n	800110e <calculate_optimal_path_from_explored_areas+0xa6>
        maze[goal_x1][goal_y1].distance = 0;
 80010e2:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b49      	ldr	r3, [pc, #292]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4946      	ldr	r1, [pc, #280]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	440b      	add	r3, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
        goal_found = true;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x1, goal_y1);
 80010fe:	4b42      	ldr	r3, [pc, #264]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a42      	ldr	r2, [pc, #264]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4841      	ldr	r0, [pc, #260]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 800110a:	f000 fc17 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x2][goal_y1].visited) {
 800110e:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	493b      	ldr	r1, [pc, #236]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	4413      	add	r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <calculate_optimal_path_from_explored_areas+0xec>
        maze[goal_x2][goal_y1].distance = 0;
 8001128:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b37      	ldr	r3, [pc, #220]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4934      	ldr	r1, [pc, #208]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	4413      	add	r3, r2
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
        goal_found = true;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x2, goal_y1);
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a30      	ldr	r2, [pc, #192]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4830      	ldr	r0, [pc, #192]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 8001150:	f000 fbf4 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x1][goal_y2].visited) {
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4929      	ldr	r1, [pc, #164]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	4413      	add	r3, r2
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d015      	beq.n	800119a <calculate_optimal_path_from_explored_areas+0x132>
        maze[goal_x1][goal_y2].distance = 0;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4923      	ldr	r1, [pc, #140]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	4413      	add	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
        goal_found = true;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x1, goal_y2);
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	481e      	ldr	r0, [pc, #120]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 8001196:	f000 fbd1 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x2][goal_y2].visited) {
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4918      	ldr	r1, [pc, #96]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	4413      	add	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	440b      	add	r3, r1
 80011ac:	3304      	adds	r3, #4
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d015      	beq.n	80011e0 <calculate_optimal_path_from_explored_areas+0x178>
        maze[goal_x2][goal_y2].distance = 0;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4911      	ldr	r1, [pc, #68]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	4413      	add	r3, r2
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	440b      	add	r3, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
        goal_found = true;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x2, goal_y2);
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 80011dc:	f000 fbae 	bl	800193c <send_bluetooth_printf>
    }

    if (!goal_found) {
 80011e0:	f897 3827 	ldrb.w	r3, [r7, #2087]	@ 0x827
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d01a      	beq.n	8001224 <calculate_optimal_path_from_explored_areas+0x1bc>
        send_bluetooth_message("❌ ERROR: No goal cells were visited during exploration!\r\n");
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <calculate_optimal_path_from_explored_areas+0x1b4>)
 80011f0:	f000 fb8e 	bl	8001910 <send_bluetooth_message>
        theoretical_minimum = MAX_DISTANCE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <calculate_optimal_path_from_explored_areas+0x1b8>)
 80011f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e1ba      	b.n	8001574 <calculate_optimal_path_from_explored_areas+0x50c>
 80011fe:	bf00      	nop
 8001200:	0800bfc8 	.word	0x0800bfc8
 8001204:	20000418 	.word	0x20000418
 8001208:	0800de88 	.word	0x0800de88
 800120c:	0800de8c 	.word	0x0800de8c
 8001210:	0800c004 	.word	0x0800c004
 8001214:	0800de90 	.word	0x0800de90
 8001218:	0800de94 	.word	0x0800de94
 800121c:	0800c020 	.word	0x0800c020
 8001220:	20001468 	.word	0x20001468
        return;
    }

    // Queue implementation for flood fill
    int queue_x[256], queue_y[256];
    int queue_head = 0, queue_tail = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c

    // Add visited goal cells to queue
    if (maze[goal_x1][goal_y1].visited && maze[goal_x1][goal_y1].distance == 0) {
 8001230:	4bb8      	ldr	r3, [pc, #736]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4bb8      	ldr	r3, [pc, #736]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	49b8      	ldr	r1, [pc, #736]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	4413      	add	r3, r2
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	440b      	add	r3, r1
 8001242:	3304      	adds	r3, #4
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d022      	beq.n	8001290 <calculate_optimal_path_from_explored_areas+0x228>
 800124a:	4bb2      	ldr	r3, [pc, #712]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4bb2      	ldr	r3, [pc, #712]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	49b2      	ldr	r1, [pc, #712]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	4413      	add	r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	440b      	add	r3, r1
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <calculate_optimal_path_from_explored_areas+0x228>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y1;
 8001262:	4bac      	ldr	r3, [pc, #688]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800126a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800126e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001276:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001280:	4aa5      	ldr	r2, [pc, #660]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001282:	6811      	ldr	r1, [r2, #0]
 8001284:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001288:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 800128c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x2][goal_y1].visited && maze[goal_x2][goal_y1].distance == 0) {
 8001290:	4ba3      	ldr	r3, [pc, #652]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4ba0      	ldr	r3, [pc, #640]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	49a0      	ldr	r1, [pc, #640]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	4413      	add	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	440b      	add	r3, r1
 80012a2:	3304      	adds	r3, #4
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d022      	beq.n	80012f0 <calculate_optimal_path_from_explored_areas+0x288>
 80012aa:	4b9d      	ldr	r3, [pc, #628]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b9a      	ldr	r3, [pc, #616]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	499a      	ldr	r1, [pc, #616]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	440b      	add	r3, r1
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <calculate_optimal_path_from_explored_areas+0x288>
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y1;
 80012c2:	4b97      	ldr	r3, [pc, #604]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80012ca:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80012ce:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80012d6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80012e0:	4a8d      	ldr	r2, [pc, #564]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80012e8:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80012ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x1][goal_y2].visited && maze[goal_x1][goal_y2].distance == 0) {
 80012f0:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b8b      	ldr	r3, [pc, #556]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4988      	ldr	r1, [pc, #544]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d022      	beq.n	8001350 <calculate_optimal_path_from_explored_areas+0x2e8>
 800130a:	4b82      	ldr	r3, [pc, #520]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b85      	ldr	r3, [pc, #532]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4982      	ldr	r1, [pc, #520]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	4413      	add	r3, r2
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	440b      	add	r3, r1
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <calculate_optimal_path_from_explored_areas+0x2e8>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y2;
 8001322:	4b7c      	ldr	r3, [pc, #496]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001324:	6819      	ldr	r1, [r3, #0]
 8001326:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800132a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800132e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001336:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001340:	4a78      	ldr	r2, [pc, #480]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001342:	6811      	ldr	r1, [r2, #0]
 8001344:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001348:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 800134c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x2][goal_y2].visited && maze[goal_x2][goal_y2].distance == 0) {
 8001350:	4b73      	ldr	r3, [pc, #460]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b73      	ldr	r3, [pc, #460]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4970      	ldr	r1, [pc, #448]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	4413      	add	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	440b      	add	r3, r1
 8001362:	3304      	adds	r3, #4
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d022      	beq.n	80013b0 <calculate_optimal_path_from_explored_areas+0x348>
 800136a:	4b6d      	ldr	r3, [pc, #436]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	496a      	ldr	r1, [pc, #424]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	4413      	add	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	440b      	add	r3, r1
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <calculate_optimal_path_from_explored_areas+0x348>
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y2;
 8001382:	4b67      	ldr	r3, [pc, #412]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800138a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800138e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001396:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80013a0:	4a60      	ldr	r2, [pc, #384]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 80013a2:	6811      	ldr	r1, [r2, #0]
 80013a4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80013a8:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80013ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    int updates = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    // Run flood fill ONLY through explored areas
    while (queue_head < queue_tail) {
 80013b6:	e0c7      	b.n	8001548 <calculate_optimal_path_from_explored_areas+0x4e0>
        int x = queue_x[queue_head];
 80013b8:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80013bc:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013c0:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
        int y = queue_y[queue_head++];
 80013cc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 80013d6:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80013da:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c

        for (int dir = 0; dir < 4; dir++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 80013ec:	e0a7      	b.n	800153e <calculate_optimal_path_from_explored_areas+0x4d6>
            int nx = x + dx[dir];
 80013ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001528 <calculate_optimal_path_from_explored_areas+0x4c0>)
 80013f0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 80013fc:	4413      	add	r3, r2
 80013fe:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
            int ny = y + dy[dir];
 8001402:	4a4a      	ldr	r2, [pc, #296]	@ (800152c <calculate_optimal_path_from_explored_areas+0x4c4>)
 8001404:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8001410:	4413      	add	r3, r2
 8001412:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804

            // CRITICAL: Only process VISITED cells with no walls
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8001416:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800141a:	2b00      	cmp	r3, #0
 800141c:	f2c0 808a 	blt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 8001420:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001424:	2b0f      	cmp	r3, #15
 8001426:	f300 8085 	bgt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 800142a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800142e:	2b00      	cmp	r3, #0
 8001430:	f2c0 8080 	blt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 8001434:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001438:	2b0f      	cmp	r3, #15
 800143a:	dc7b      	bgt.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                maze[nx][ny].visited &&  // Must be visited/explored
 800143c:	4937      	ldr	r1, [pc, #220]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800143e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001442:	011a      	lsls	r2, r3, #4
 8001444:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001448:	4413      	add	r3, r2
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	440b      	add	r3, r1
 800144e:	3304      	adds	r3, #4
 8001450:	781b      	ldrb	r3, [r3, #0]
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d06e      	beq.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                !maze[x][y].walls[dir]) { // No wall between cells
 8001456:	4931      	ldr	r1, [pc, #196]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001458:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800145c:	011a      	lsls	r2, r3, #4
 800145e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001462:	4413      	add	r3, r2
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	18ca      	adds	r2, r1, r3
 8001468:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800146c:	4413      	add	r3, r2
 800146e:	3305      	adds	r3, #5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f083 0301 	eor.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
                maze[nx][ny].visited &&  // Must be visited/explored
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>

                int new_dist = maze[x][y].distance + 1;
 800147c:	4927      	ldr	r1, [pc, #156]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800147e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8001482:	011a      	lsls	r2, r3, #4
 8001484:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001488:	4413      	add	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
                if (new_dist < maze[nx][ny].distance) {
 8001496:	4921      	ldr	r1, [pc, #132]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001498:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800149c:	011a      	lsls	r2, r3, #4
 800149e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014a2:	4413      	add	r3, r2
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	440b      	add	r3, r1
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 80014ae:	429a      	cmp	r2, r3
 80014b0:	da40      	bge.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                    maze[nx][ny].distance = new_dist;
 80014b2:	491a      	ldr	r1, [pc, #104]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80014b4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80014b8:	011a      	lsls	r2, r3, #4
 80014ba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014be:	4413      	add	r3, r2
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 80014c8:	601a      	str	r2, [r3, #0]
                    if (queue_tail < 255) {
 80014ca:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80014ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80014d0:	dc1c      	bgt.n	800150c <calculate_optimal_path_from_explored_areas+0x4a4>
                        queue_x[queue_tail] = nx;
 80014d2:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80014d6:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80014da:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80014de:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        queue_y[queue_tail++] = ny;
 80014e6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80014f0:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80014f4:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80014f8:	f8d7 1804 	ldr.w	r1, [r7, #2052]	@ 0x804
 80014fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    } else {
                        send_bluetooth_message("Queue overflow!\r\n");
                        break;
                    }
                    updates++;
 8001500:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001504:	3301      	adds	r3, #1
 8001506:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 800150a:	e013      	b.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                        send_bluetooth_message("Queue overflow!\r\n");
 800150c:	4808      	ldr	r0, [pc, #32]	@ (8001530 <calculate_optimal_path_from_explored_areas+0x4c8>)
 800150e:	f000 f9ff 	bl	8001910 <send_bluetooth_message>
                        break;
 8001512:	e019      	b.n	8001548 <calculate_optimal_path_from_explored_areas+0x4e0>
 8001514:	0800de88 	.word	0x0800de88
 8001518:	0800de8c 	.word	0x0800de8c
 800151c:	20000418 	.word	0x20000418
 8001520:	0800de90 	.word	0x0800de90
 8001524:	0800de94 	.word	0x0800de94
 8001528:	0800de68 	.word	0x0800de68
 800152c:	0800de78 	.word	0x0800de78
 8001530:	0800c05c 	.word	0x0800c05c
        for (int dir = 0; dir < 4; dir++) {
 8001534:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001538:	3301      	adds	r3, #1
 800153a:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800153e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001542:	2b03      	cmp	r3, #3
 8001544:	f77f af53 	ble.w	80013ee <calculate_optimal_path_from_explored_areas+0x386>
    while (queue_head < queue_tail) {
 8001548:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 800154c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001550:	429a      	cmp	r2, r3
 8001552:	f6ff af31 	blt.w	80013b8 <calculate_optimal_path_from_explored_areas+0x350>
            }
        }
    }

    // Get theoretical minimum from explored path
    theoretical_minimum = maze[0][0].distance;
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <calculate_optimal_path_from_explored_areas+0x514>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a09      	ldr	r2, [pc, #36]	@ (8001580 <calculate_optimal_path_from_explored_areas+0x518>)
 800155c:	6013      	str	r3, [r2, #0]

    send_bluetooth_printf("[PATH ANALYSIS] Optimal path through explored areas: %d steps\r\n", theoretical_minimum);
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <calculate_optimal_path_from_explored_areas+0x518>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	@ (8001584 <calculate_optimal_path_from_explored_areas+0x51c>)
 8001566:	f000 f9e9 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("[PATH ANALYSIS] Flood fill updates: %d\r\n", updates);
 800156a:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 800156e:	4806      	ldr	r0, [pc, #24]	@ (8001588 <calculate_optimal_path_from_explored_areas+0x520>)
 8001570:	f000 f9e4 	bl	800193c <send_bluetooth_printf>
}
 8001574:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000418 	.word	0x20000418
 8001580:	20001468 	.word	0x20001468
 8001584:	0800c070 	.word	0x0800c070
 8001588:	0800c0b0 	.word	0x0800c0b0

0800158c <analyze_championship_maze_performance>:

/**
 * @brief Comprehensive championship maze performance analysis (MMS style)
 */
void analyze_championship_maze_performance(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== CHAMPIONSHIP PERFORMANCE ANALYSIS ===\r\n");
 8001592:	4872      	ldr	r0, [pc, #456]	@ (800175c <analyze_championship_maze_performance+0x1d0>)
 8001594:	f000 f9bc 	bl	8001910 <send_bluetooth_message>

    // Calculate exploration efficiency
    int cells_visited = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
    int total_cells = MAZE_SIZE * MAZE_SIZE;
 800159c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a0:	60bb      	str	r3, [r7, #8]

    for (int x = 0; x < MAZE_SIZE; x++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e019      	b.n	80015dc <analyze_championship_maze_performance+0x50>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e010      	b.n	80015d0 <analyze_championship_maze_performance+0x44>
            if (maze[x][y].visited) {
 80015ae:	496c      	ldr	r1, [pc, #432]	@ (8001760 <analyze_championship_maze_performance+0x1d4>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	011a      	lsls	r2, r3, #4
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	440b      	add	r3, r1
 80015bc:	3304      	adds	r3, #4
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <analyze_championship_maze_performance+0x3e>
                cells_visited++;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
        for (int y = 0; y < MAZE_SIZE; y++) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	ddeb      	ble.n	80015ae <analyze_championship_maze_performance+0x22>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	3301      	adds	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	dde2      	ble.n	80015a8 <analyze_championship_maze_performance+0x1c>
            }
        }
    }

    float exploration_efficiency = (float)cells_visited / total_cells * 100.0f;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fa:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001764 <analyze_championship_maze_performance+0x1d8>
 80015fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001602:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_message("📊 EXPLORATION METRICS:\r\n");
 8001606:	4858      	ldr	r0, [pc, #352]	@ (8001768 <analyze_championship_maze_performance+0x1dc>)
 8001608:	f000 f982 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf(" Exploration Efficiency: %.1f%%\r\n", exploration_efficiency);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7fe ffa3 	bl	8000558 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4855      	ldr	r0, [pc, #340]	@ (800176c <analyze_championship_maze_performance+0x1e0>)
 8001618:	f000 f990 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf(" Cells Visited: %d/%d\r\n", cells_visited, total_cells);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	6979      	ldr	r1, [r7, #20]
 8001620:	4853      	ldr	r0, [pc, #332]	@ (8001770 <analyze_championship_maze_performance+0x1e4>)
 8001622:	f000 f98b 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf(" Total Exploration Steps: %d moves\r\n", exploration_steps);
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <analyze_championship_maze_performance+0x1e8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	4852      	ldr	r0, [pc, #328]	@ (8001778 <analyze_championship_maze_performance+0x1ec>)
 800162e:	f000 f985 	bl	800193c <send_bluetooth_printf>

    send_bluetooth_message("\r\n🎯 OPTIMAL PATH ANALYSIS:\r\n");
 8001632:	4852      	ldr	r0, [pc, #328]	@ (800177c <analyze_championship_maze_performance+0x1f0>)
 8001634:	f000 f96c 	bl	8001910 <send_bluetooth_message>
    if (theoretical_minimum < MAX_DISTANCE) {
 8001638:	4b51      	ldr	r3, [pc, #324]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001640:	4293      	cmp	r3, r2
 8001642:	dc0c      	bgt.n	800165e <analyze_championship_maze_performance+0xd2>
        send_bluetooth_printf(" Best Path Through Explored Areas: %d steps\r\n", theoretical_minimum);
 8001644:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	484e      	ldr	r0, [pc, #312]	@ (8001784 <analyze_championship_maze_performance+0x1f8>)
 800164c:	f000 f976 	bl	800193c <send_bluetooth_printf>
        send_bluetooth_message(" Path Knowledge: ✅ COMPLETE for explored regions\r\n");
 8001650:	484d      	ldr	r0, [pc, #308]	@ (8001788 <analyze_championship_maze_performance+0x1fc>)
 8001652:	f000 f95d 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" Algorithm Efficiency: ✅ CHAMPIONSHIP LEVEL\r\n");
 8001656:	484d      	ldr	r0, [pc, #308]	@ (800178c <analyze_championship_maze_performance+0x200>)
 8001658:	f000 f95a 	bl	8001910 <send_bluetooth_message>
 800165c:	e005      	b.n	800166a <analyze_championship_maze_performance+0xde>
    } else {
        send_bluetooth_message(" ❌ No path found through explored areas!\r\n");
 800165e:	484c      	ldr	r0, [pc, #304]	@ (8001790 <analyze_championship_maze_performance+0x204>)
 8001660:	f000 f956 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" Check if center was reached and start is accessible\r\n");
 8001664:	484b      	ldr	r0, [pc, #300]	@ (8001794 <analyze_championship_maze_performance+0x208>)
 8001666:	f000 f953 	bl	8001910 <send_bluetooth_message>
    }

    // Performance rating based on exploration efficiency
    send_bluetooth_message("\r\n🏆 PERFORMANCE RATING:\r\n");
 800166a:	484b      	ldr	r0, [pc, #300]	@ (8001798 <analyze_championship_maze_performance+0x20c>)
 800166c:	f000 f950 	bl	8001910 <send_bluetooth_message>
    if (exploration_efficiency <= 50.0f && theoretical_minimum < MAX_DISTANCE) {
 8001670:	edd7 7a01 	vldr	s15, [r7, #4]
 8001674:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800179c <analyze_championship_maze_performance+0x210>
 8001678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d80c      	bhi.n	800169c <analyze_championship_maze_performance+0x110>
 8001682:	4b3f      	ldr	r3, [pc, #252]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f242 720e 	movw	r2, #9998	@ 0x270e
 800168a:	4293      	cmp	r3, r2
 800168c:	dc06      	bgt.n	800169c <analyze_championship_maze_performance+0x110>
        send_bluetooth_message(" ⭐⭐⭐⭐⭐ CHAMPIONSHIP LEVEL\r\n");
 800168e:	4844      	ldr	r0, [pc, #272]	@ (80017a0 <analyze_championship_maze_performance+0x214>)
 8001690:	f000 f93e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥇 Efficient exploration with optimal path knowledge!\r\n");
 8001694:	4843      	ldr	r0, [pc, #268]	@ (80017a4 <analyze_championship_maze_performance+0x218>)
 8001696:	f000 f93b 	bl	8001910 <send_bluetooth_message>
 800169a:	e025      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else if (exploration_efficiency <= 65.0f) {
 800169c:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80017a8 <analyze_championship_maze_performance+0x21c>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d806      	bhi.n	80016bc <analyze_championship_maze_performance+0x130>
        send_bluetooth_message(" ⭐⭐⭐⭐ COMPETITION READY\r\n");
 80016ae:	483f      	ldr	r0, [pc, #252]	@ (80017ac <analyze_championship_maze_performance+0x220>)
 80016b0:	f000 f92e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥈 Good exploration efficiency with complete maze knowledge\r\n");
 80016b4:	483e      	ldr	r0, [pc, #248]	@ (80017b0 <analyze_championship_maze_performance+0x224>)
 80016b6:	f000 f92b 	bl	8001910 <send_bluetooth_message>
 80016ba:	e015      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else if (exploration_efficiency <= 80.0f) {
 80016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80017b4 <analyze_championship_maze_performance+0x228>
 80016c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d806      	bhi.n	80016dc <analyze_championship_maze_performance+0x150>
        send_bluetooth_message(" ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 80016ce:	483a      	ldr	r0, [pc, #232]	@ (80017b8 <analyze_championship_maze_performance+0x22c>)
 80016d0:	f000 f91e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥉 Solid exploration, room for optimization\r\n");
 80016d4:	4839      	ldr	r0, [pc, #228]	@ (80017bc <analyze_championship_maze_performance+0x230>)
 80016d6:	f000 f91b 	bl	8001910 <send_bluetooth_message>
 80016da:	e005      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else {
        send_bluetooth_message(" ⭐⭐ NEEDS OPTIMIZATION\r\n");
 80016dc:	4838      	ldr	r0, [pc, #224]	@ (80017c0 <analyze_championship_maze_performance+0x234>)
 80016de:	f000 f917 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🔄 Over-exploration detected, improve search termination\r\n");
 80016e2:	4838      	ldr	r0, [pc, #224]	@ (80017c4 <analyze_championship_maze_performance+0x238>)
 80016e4:	f000 f914 	bl	8001910 <send_bluetooth_message>
    }

    // Championship recommendations
    send_bluetooth_message("\r\n💡 CHAMPIONSHIP RECOMMENDATIONS:\r\n");
 80016e8:	4837      	ldr	r0, [pc, #220]	@ (80017c8 <analyze_championship_maze_performance+0x23c>)
 80016ea:	f000 f911 	bl	8001910 <send_bluetooth_message>
    if (exploration_efficiency <= 50.0f && theoretical_minimum < MAX_DISTANCE) {
 80016ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800179c <analyze_championship_maze_performance+0x210>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d80f      	bhi.n	8001720 <analyze_championship_maze_performance+0x194>
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001708:	4293      	cmp	r3, r2
 800170a:	dc09      	bgt.n	8001720 <analyze_championship_maze_performance+0x194>
        send_bluetooth_message(" ✅ Excellent exploration efficiency! Championship ready!\r\n");
 800170c:	482f      	ldr	r0, [pc, #188]	@ (80017cc <analyze_championship_maze_performance+0x240>)
 800170e:	f000 f8ff 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" ✅ Optimal path knowledge complete!\r\n");
 8001712:	482f      	ldr	r0, [pc, #188]	@ (80017d0 <analyze_championship_maze_performance+0x244>)
 8001714:	f000 f8fc 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🏆 Ready for IEEE Micromouse competition!\r\n");
 8001718:	482e      	ldr	r0, [pc, #184]	@ (80017d4 <analyze_championship_maze_performance+0x248>)
 800171a:	f000 f8f9 	bl	8001910 <send_bluetooth_message>
 800171e:	e015      	b.n	800174c <analyze_championship_maze_performance+0x1c0>
    } else if (exploration_efficiency > 75.0f) {
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80017d8 <analyze_championship_maze_performance+0x24c>
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd06      	ble.n	8001740 <analyze_championship_maze_performance+0x1b4>
        send_bluetooth_message(" 🔄 Consider smarter search termination\r\n");
 8001732:	482a      	ldr	r0, [pc, #168]	@ (80017dc <analyze_championship_maze_performance+0x250>)
 8001734:	f000 f8ec 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🔄 Implement early stopping when center is fully explored\r\n");
 8001738:	4829      	ldr	r0, [pc, #164]	@ (80017e0 <analyze_championship_maze_performance+0x254>)
 800173a:	f000 f8e9 	bl	8001910 <send_bluetooth_message>
 800173e:	e005      	b.n	800174c <analyze_championship_maze_performance+0x1c0>
    } else {
        send_bluetooth_message(" ✅ Good balance of exploration and efficiency\r\n");
 8001740:	4828      	ldr	r0, [pc, #160]	@ (80017e4 <analyze_championship_maze_performance+0x258>)
 8001742:	f000 f8e5 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" ✅ Path knowledge is complete for explored areas\r\n");
 8001746:	4828      	ldr	r0, [pc, #160]	@ (80017e8 <analyze_championship_maze_performance+0x25c>)
 8001748:	f000 f8e2 	bl	8001910 <send_bluetooth_message>
    }

    send_bluetooth_message("========================================\r\n");
 800174c:	4827      	ldr	r0, [pc, #156]	@ (80017ec <analyze_championship_maze_performance+0x260>)
 800174e:	f000 f8df 	bl	8001910 <send_bluetooth_message>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	0800c0dc 	.word	0x0800c0dc
 8001760:	20000418 	.word	0x20000418
 8001764:	42c80000 	.word	0x42c80000
 8001768:	0800c10c 	.word	0x0800c10c
 800176c:	0800c128 	.word	0x0800c128
 8001770:	0800c14c 	.word	0x0800c14c
 8001774:	20001464 	.word	0x20001464
 8001778:	0800c164 	.word	0x0800c164
 800177c:	0800c18c 	.word	0x0800c18c
 8001780:	20001468 	.word	0x20001468
 8001784:	0800c1ac 	.word	0x0800c1ac
 8001788:	0800c1dc 	.word	0x0800c1dc
 800178c:	0800c214 	.word	0x0800c214
 8001790:	0800c244 	.word	0x0800c244
 8001794:	0800c274 	.word	0x0800c274
 8001798:	0800c2ac 	.word	0x0800c2ac
 800179c:	42480000 	.word	0x42480000
 80017a0:	0800c2cc 	.word	0x0800c2cc
 80017a4:	0800c2f4 	.word	0x0800c2f4
 80017a8:	42820000 	.word	0x42820000
 80017ac:	0800c330 	.word	0x0800c330
 80017b0:	0800c354 	.word	0x0800c354
 80017b4:	42a00000 	.word	0x42a00000
 80017b8:	0800c398 	.word	0x0800c398
 80017bc:	0800c3b8 	.word	0x0800c3b8
 80017c0:	0800c3ec 	.word	0x0800c3ec
 80017c4:	0800c40c 	.word	0x0800c40c
 80017c8:	0800c44c 	.word	0x0800c44c
 80017cc:	0800c474 	.word	0x0800c474
 80017d0:	0800c4b4 	.word	0x0800c4b4
 80017d4:	0800c4dc 	.word	0x0800c4dc
 80017d8:	42960000 	.word	0x42960000
 80017dc:	0800c50c 	.word	0x0800c50c
 80017e0:	0800c538 	.word	0x0800c538
 80017e4:	0800c578 	.word	0x0800c578
 80017e8:	0800c5ac 	.word	0x0800c5ac
 80017ec:	0800c5e4 	.word	0x0800c5e4

080017f0 <print_championship_distance_map>:

/**
 * @brief Print detailed distance map for EXPLORED areas only (MMS style)
 */
void print_championship_distance_map(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n📍 OPTIMAL DISTANCE MAP (explored areas only):\r\n");
 80017f6:	483a      	ldr	r0, [pc, #232]	@ (80018e0 <print_championship_distance_map+0xf0>)
 80017f8:	f000 f88a 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("   ");
 80017fc:	4839      	ldr	r0, [pc, #228]	@ (80018e4 <print_championship_distance_map+0xf4>)
 80017fe:	f000 f887 	bl	8001910 <send_bluetooth_message>

    // Print column headers
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e006      	b.n	8001816 <print_championship_distance_map+0x26>
        send_bluetooth_printf("%3d", x);
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4837      	ldr	r0, [pc, #220]	@ (80018e8 <print_championship_distance_map+0xf8>)
 800180c:	f000 f896 	bl	800193c <send_bluetooth_printf>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	ddf5      	ble.n	8001808 <print_championship_distance_map+0x18>
    }
    send_bluetooth_message("\r\n");
 800181c:	4833      	ldr	r0, [pc, #204]	@ (80018ec <print_championship_distance_map+0xfc>)
 800181e:	f000 f877 	bl	8001910 <send_bluetooth_message>

    // Print maze from top to bottom (MMS style)
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 8001822:	230f      	movs	r3, #15
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	e040      	b.n	80018aa <print_championship_distance_map+0xba>
        send_bluetooth_printf("%2d ", y);
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	4831      	ldr	r0, [pc, #196]	@ (80018f0 <print_championship_distance_map+0x100>)
 800182c:	f000 f886 	bl	800193c <send_bluetooth_printf>

        for (int x = 0; x < MAZE_SIZE; x++) {
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	e030      	b.n	8001898 <print_championship_distance_map+0xa8>
            if (!maze[x][y].visited) {
 8001836:	492f      	ldr	r1, [pc, #188]	@ (80018f4 <print_championship_distance_map+0x104>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	011a      	lsls	r2, r3, #4
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	440b      	add	r3, r1
 8001844:	3304      	adds	r3, #4
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <print_championship_distance_map+0x6a>
                send_bluetooth_message(" - "); // Not explored
 8001852:	4829      	ldr	r0, [pc, #164]	@ (80018f8 <print_championship_distance_map+0x108>)
 8001854:	f000 f85c 	bl	8001910 <send_bluetooth_message>
 8001858:	e01b      	b.n	8001892 <print_championship_distance_map+0xa2>
            } else if (maze[x][y].distance == MAX_DISTANCE) {
 800185a:	4926      	ldr	r1, [pc, #152]	@ (80018f4 <print_championship_distance_map+0x104>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	011a      	lsls	r2, r3, #4
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	440b      	add	r3, r1
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800186e:	4293      	cmp	r3, r2
 8001870:	d103      	bne.n	800187a <print_championship_distance_map+0x8a>
                send_bluetooth_message(" ∞ "); // Explored but unreachable
 8001872:	4822      	ldr	r0, [pc, #136]	@ (80018fc <print_championship_distance_map+0x10c>)
 8001874:	f000 f84c 	bl	8001910 <send_bluetooth_message>
 8001878:	e00b      	b.n	8001892 <print_championship_distance_map+0xa2>
            } else {
                send_bluetooth_printf("%3d", maze[x][y].distance);
 800187a:	491e      	ldr	r1, [pc, #120]	@ (80018f4 <print_championship_distance_map+0x104>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	011a      	lsls	r2, r3, #4
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	440b      	add	r3, r1
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	@ (80018e8 <print_championship_distance_map+0xf8>)
 800188e:	f000 f855 	bl	800193c <send_bluetooth_printf>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3301      	adds	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	ddcb      	ble.n	8001836 <print_championship_distance_map+0x46>
            }
        }
        send_bluetooth_message("\r\n");
 800189e:	4813      	ldr	r0, [pc, #76]	@ (80018ec <print_championship_distance_map+0xfc>)
 80018a0:	f000 f836 	bl	8001910 <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dabb      	bge.n	8001828 <print_championship_distance_map+0x38>
    }

    if (theoretical_minimum < MAX_DISTANCE) {
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <print_championship_distance_map+0x110>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f242 720e 	movw	r2, #9998	@ 0x270e
 80018b8:	4293      	cmp	r3, r2
 80018ba:	dc06      	bgt.n	80018ca <print_championship_distance_map+0xda>
        send_bluetooth_printf("\r\nOptimal path through explored areas: %d steps\r\n", theoretical_minimum);
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <print_championship_distance_map+0x110>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4810      	ldr	r0, [pc, #64]	@ (8001904 <print_championship_distance_map+0x114>)
 80018c4:	f000 f83a 	bl	800193c <send_bluetooth_printf>
 80018c8:	e002      	b.n	80018d0 <print_championship_distance_map+0xe0>
    } else {
        send_bluetooth_message("\r\n❌ No path found through explored areas\r\n");
 80018ca:	480f      	ldr	r0, [pc, #60]	@ (8001908 <print_championship_distance_map+0x118>)
 80018cc:	f000 f820 	bl	8001910 <send_bluetooth_message>
    }

    send_bluetooth_message("Legend: - = not explored, ∞ = explored but unreachable\r\n");
 80018d0:	480e      	ldr	r0, [pc, #56]	@ (800190c <print_championship_distance_map+0x11c>)
 80018d2:	f000 f81d 	bl	8001910 <send_bluetooth_message>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	0800c610 	.word	0x0800c610
 80018e4:	0800c648 	.word	0x0800c648
 80018e8:	0800c64c 	.word	0x0800c64c
 80018ec:	0800c650 	.word	0x0800c650
 80018f0:	0800c654 	.word	0x0800c654
 80018f4:	20000418 	.word	0x20000418
 80018f8:	0800c65c 	.word	0x0800c65c
 80018fc:	0800c660 	.word	0x0800c660
 8001900:	20001468 	.word	0x20001468
 8001904:	0800c668 	.word	0x0800c668
 8001908:	0800c69c 	.word	0x0800c69c
 800190c:	0800c6cc 	.word	0x0800c6cc

08001910 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7fe fcb1 	bl	8000280 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	b29a      	uxth	r2, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4803      	ldr	r0, [pc, #12]	@ (8001938 <send_bluetooth_message+0x28>)
 800192a:	f006 fd15 	bl	8008358 <HAL_UART_Transmit>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200003d0 	.word	0x200003d0

0800193c <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 800193c:	b40f      	push	{r0, r1, r2, r3}
 800193e:	b580      	push	{r7, lr}
 8001940:	b0c2      	sub	sp, #264	@ 0x108
 8001942:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8001944:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800194c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001950:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800195a:	f107 0008 	add.w	r0, r7, #8
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001968:	f008 fa48 	bl	8009dfc <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ffcd 	bl	8001910 <send_bluetooth_message>
}
 8001976:	bf00      	nop
 8001978:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001982:	b004      	add	sp, #16
 8001984:	4770      	bx	lr
	...

08001988 <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <send_battery_status+0x60>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019ec <send_battery_status+0x64>
 800199e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80019f0 <send_battery_status+0x68>
 80019a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019aa:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7fe fdd2 	bl	8000558 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	490b      	ldr	r1, [pc, #44]	@ (80019e8 <send_battery_status+0x60>)
 80019ba:	8809      	ldrh	r1, [r1, #0]
 80019bc:	9100      	str	r1, [sp, #0]
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <send_battery_status+0x6c>)
 80019c0:	f7ff ffbc 	bl	800193c <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <send_battery_status+0x60>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d803      	bhi.n	80019d8 <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 80019d0:	4809      	ldr	r0, [pc, #36]	@ (80019f8 <send_battery_status+0x70>)
 80019d2:	f7ff ff9d 	bl	8001910 <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 80019d6:	e002      	b.n	80019de <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 80019d8:	4808      	ldr	r0, [pc, #32]	@ (80019fc <send_battery_status+0x74>)
 80019da:	f7ff ff99 	bl	8001910 <send_bluetooth_message>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000142c 	.word	0x2000142c
 80019ec:	40533333 	.word	0x40533333
 80019f0:	45800000 	.word	0x45800000
 80019f4:	0800cd28 	.word	0x0800cd28
 80019f8:	0800cd40 	.word	0x0800cd40
 80019fc:	0800cd5c 	.word	0x0800cd5c

08001a00 <send_championship_stats>:

/**
 * @brief Send championship statistics
 */
void send_championship_stats(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🏆 CHAMPIONSHIP STATISTICS 🏆\r\n");
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <send_championship_stats+0x34>)
 8001a06:	f7ff ff83 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("Algorithm: Flood Fill + Championship Heuristics\r\n");
 8001a0a:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <send_championship_stats+0x38>)
 8001a0c:	f7ff ff96 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("MCU: STM32F411CEU6 @ 84MHz\r\n");
 8001a10:	480a      	ldr	r0, [pc, #40]	@ (8001a3c <send_championship_stats+0x3c>)
 8001a12:	f7ff ff93 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("Sensors: 4x TEFT4300 IR + MPU9250 Gyro\r\n");
 8001a16:	480a      	ldr	r0, [pc, #40]	@ (8001a40 <send_championship_stats+0x40>)
 8001a18:	f7ff ff90 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("Motors: DRV8833 H-Bridge with Encoders\r\n");
 8001a1c:	4809      	ldr	r0, [pc, #36]	@ (8001a44 <send_championship_stats+0x44>)
 8001a1e:	f7ff ff8d 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("International Standard: IEEE Micromouse Compliant\r\n");
 8001a22:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <send_championship_stats+0x48>)
 8001a24:	f7ff ff8a 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_message("====================================\r\n");
 8001a28:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <send_championship_stats+0x4c>)
 8001a2a:	f7ff ff71 	bl	8001910 <send_bluetooth_message>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	0800cd64 	.word	0x0800cd64
 8001a38:	0800cd8c 	.word	0x0800cd8c
 8001a3c:	0800cdc0 	.word	0x0800cdc0
 8001a40:	0800cde0 	.word	0x0800cde0
 8001a44:	0800ce0c 	.word	0x0800ce0c
 8001a48:	0800ce38 	.word	0x0800ce38
 8001a4c:	0800ce6c 	.word	0x0800ce6c

08001a50 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a6e:	4817      	ldr	r0, [pc, #92]	@ (8001acc <mpu9250_read_register+0x7c>)
 8001a70:	f004 f86a 	bl	8005b48 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 8001a74:	f107 010d 	add.w	r1, r7, #13
 8001a78:	2364      	movs	r3, #100	@ 0x64
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4814      	ldr	r0, [pc, #80]	@ (8001ad0 <mpu9250_read_register+0x80>)
 8001a7e:	f004 fd90 	bl	80065a2 <HAL_SPI_Transmit>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 8001a86:	f107 010c 	add.w	r1, r7, #12
 8001a8a:	2364      	movs	r3, #100	@ 0x64
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4810      	ldr	r0, [pc, #64]	@ (8001ad0 <mpu9250_read_register+0x80>)
 8001a90:	f004 fecb 	bl	800682a <HAL_SPI_Receive>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a9e:	480b      	ldr	r0, [pc, #44]	@ (8001acc <mpu9250_read_register+0x7c>)
 8001aa0:	f004 f852 	bl	8005b48 <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <mpu9250_read_register+0x60>
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 8001ab0:	4808      	ldr	r0, [pc, #32]	@ (8001ad4 <mpu9250_read_register+0x84>)
 8001ab2:	f7ff ff2d 	bl	8001910 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <mpu9250_read_register+0x88>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 8001abc:	23ff      	movs	r3, #255	@ 0xff
 8001abe:	e000      	b.n	8001ac2 <mpu9250_read_register+0x72>
    }

    return rx_data;
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	20000258 	.word	0x20000258
 8001ad4:	0800ce94 	.word	0x0800ce94
 8001ad8:	200001f8 	.word	0x200001f8

08001adc <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	733b      	strb	r3, [r7, #12]
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afa:	4811      	ldr	r0, [pc, #68]	@ (8001b40 <mpu9250_write_register+0x64>)
 8001afc:	f004 f824 	bl	8005b48 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 8001b00:	f107 010c 	add.w	r1, r7, #12
 8001b04:	2364      	movs	r3, #100	@ 0x64
 8001b06:	2202      	movs	r2, #2
 8001b08:	480e      	ldr	r0, [pc, #56]	@ (8001b44 <mpu9250_write_register+0x68>)
 8001b0a:	f004 fd4a 	bl	80065a2 <HAL_SPI_Transmit>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b18:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <mpu9250_write_register+0x64>)
 8001b1a:	f004 f815 	bl	8005b48 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001b24:	4808      	ldr	r0, [pc, #32]	@ (8001b48 <mpu9250_write_register+0x6c>)
 8001b26:	f7ff fef3 	bl	8001910 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <mpu9250_write_register+0x70>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001b30:	2001      	movs	r0, #1
 8001b32:	f003 f8cb 	bl	8004ccc <HAL_Delay>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40020400 	.word	0x40020400
 8001b44:	20000258 	.word	0x20000258
 8001b48:	0800ceb8 	.word	0x0800ceb8
 8001b4c:	200001f8 	.word	0x200001f8

08001b50 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 8001b56:	483c      	ldr	r0, [pc, #240]	@ (8001c48 <mpu9250_init+0xf8>)
 8001b58:	f7ff feda 	bl	8001910 <send_bluetooth_message>
    HAL_Delay(200);
 8001b5c:	20c8      	movs	r0, #200	@ 0xc8
 8001b5e:	f003 f8b5 	bl	8004ccc <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	206b      	movs	r0, #107	@ 0x6b
 8001b66:	f7ff ffb9 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 8001b6a:	20fa      	movs	r0, #250	@ 0xfa
 8001b6c:	f003 f8ae 	bl	8004ccc <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 8001b70:	2100      	movs	r1, #0
 8001b72:	206b      	movs	r0, #107	@ 0x6b
 8001b74:	f7ff ffb2 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(50);
 8001b78:	2032      	movs	r0, #50	@ 0x32
 8001b7a:	f003 f8a7 	bl	8004ccc <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 8001b7e:	2101      	movs	r1, #1
 8001b80:	206b      	movs	r0, #107	@ 0x6b
 8001b82:	f7ff ffab 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(50);
 8001b86:	2032      	movs	r0, #50	@ 0x32
 8001b88:	f003 f8a0 	bl	8004ccc <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	206c      	movs	r0, #108	@ 0x6c
 8001b90:	f7ff ffa4 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001b94:	200a      	movs	r0, #10
 8001b96:	f003 f899 	bl	8004ccc <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 8001b9a:	206a      	movs	r0, #106	@ 0x6a
 8001b9c:	f7ff ff58 	bl	8001a50 <mpu9250_read_register>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	206a      	movs	r0, #106	@ 0x6a
 8001bb2:	f7ff ff93 	bl	8001adc <mpu9250_write_register>
     HAL_Delay(10);
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f003 f888 	bl	8004ccc <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	2019      	movs	r0, #25
 8001bc0:	f7ff ff8c 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001bc4:	200a      	movs	r0, #10
 8001bc6:	f003 f881 	bl	8004ccc <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 8001bca:	2102      	movs	r1, #2
 8001bcc:	201a      	movs	r0, #26
 8001bce:	f7ff ff85 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	f003 f87a 	bl	8004ccc <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 8001bd8:	2108      	movs	r1, #8
 8001bda:	201b      	movs	r0, #27
 8001bdc:	f7ff ff7e 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f003 f873 	bl	8004ccc <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 8001be6:	2108      	movs	r1, #8
 8001be8:	201c      	movs	r0, #28
 8001bea:	f7ff ff77 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f003 f86c 	bl	8004ccc <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	201d      	movs	r0, #29
 8001bf8:	f7ff ff70 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f003 f865 	bl	8004ccc <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001c02:	2075      	movs	r0, #117	@ 0x75
 8001c04:	f7ff ff24 	bl	8001a50 <mpu9250_read_register>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480e      	ldr	r0, [pc, #56]	@ (8001c4c <mpu9250_init+0xfc>)
 8001c12:	f7ff fe93 	bl	800193c <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	2b70      	cmp	r3, #112	@ 0x70
 8001c1a:	d009      	beq.n	8001c30 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480b      	ldr	r0, [pc, #44]	@ (8001c50 <mpu9250_init+0x100>)
 8001c22:	f7ff fe8b 	bl	800193c <send_bluetooth_printf>
        mpu9250_initialized=false;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <mpu9250_init+0x104>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
        return false;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e006      	b.n	8001c3e <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001c30:	4809      	ldr	r0, [pc, #36]	@ (8001c58 <mpu9250_init+0x108>)
 8001c32:	f7ff fe6d 	bl	8001910 <send_bluetooth_message>
    mpu9250_initialized=true;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <mpu9250_init+0x104>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
    return true;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	0800cee0 	.word	0x0800cee0
 8001c4c:	0800cf0c 	.word	0x0800cf0c
 8001c50:	0800cf20 	.word	0x0800cf20
 8001c54:	200001f8 	.word	0x200001f8
 8001c58:	0800cf48 	.word	0x0800cf48

08001c5c <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 8001c5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c60:	b088      	sub	sp, #32
 8001c62:	af04      	add	r7, sp, #16
    if (!mpu9250_initialized) {
 8001c64:	4b4e      	ldr	r3, [pc, #312]	@ (8001da0 <mpu9250_calibrate_bias+0x144>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <mpu9250_calibrate_bias+0x1e>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 8001c72:	484c      	ldr	r0, [pc, #304]	@ (8001da4 <mpu9250_calibrate_bias+0x148>)
 8001c74:	f7ff fe4c 	bl	8001910 <send_bluetooth_message>
        return;
 8001c78:	e08e      	b.n	8001d98 <mpu9250_calibrate_bias+0x13c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 8001c7a:	484b      	ldr	r0, [pc, #300]	@ (8001da8 <mpu9250_calibrate_bias+0x14c>)
 8001c7c:	f7ff fe48 	bl	8001910 <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 1000;
 8001c80:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c86:	611a      	str	r2, [r3, #16]
    float sum_x = 0, sum_y = 0, sum_z = 0;
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	e02e      	b.n	8001cfe <mpu9250_calibrate_bias+0xa2>
        mpu9250_read_gyro();
 8001ca0:	f000 f896 	bl	8001dd0 <mpu9250_read_gyro>
        sum_x += gyro.gyro_x;
 8001ca4:	4b42      	ldr	r3, [pc, #264]	@ (8001db0 <mpu9250_calibrate_bias+0x154>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cba:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_y += gyro.gyro_y;
 8001cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8001db0 <mpu9250_calibrate_bias+0x154>)
 8001cc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ccc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_z += gyro.gyro_z;
 8001cd8:	4b35      	ldr	r3, [pc, #212]	@ (8001db0 <mpu9250_calibrate_bias+0x154>)
 8001cda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f002 ffea 	bl	8004ccc <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8cb      	bhi.n	8001ca0 <mpu9250_calibrate_bias+0x44>
    }

    enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
 8001d08:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d14:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1c:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d2e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d38:	edc3 7a01 	vstr	s15, [r3, #4]
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d48:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d50:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d52:	edc3 7a02 	vstr	s15, [r3, #8]
    enhanced_gyro.calibrated = true;
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	731a      	strb	r2, [r3, #12]

    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbf9 	bl	8000558 <__aeabi_f2d>
 8001d66:	4680      	mov	r8, r0
 8001d68:	4689      	mov	r9, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf2 	bl	8000558 <__aeabi_f2d>
 8001d74:	4604      	mov	r4, r0
 8001d76:	460d      	mov	r5, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbeb 	bl	8000558 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d8a:	e9cd 4500 	strd	r4, r5, [sp]
 8001d8e:	4642      	mov	r2, r8
 8001d90:	464b      	mov	r3, r9
 8001d92:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <mpu9250_calibrate_bias+0x158>)
 8001d94:	f7ff fdd2 	bl	800193c <send_bluetooth_printf>
}
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001da0:	200001f8 	.word	0x200001f8
 8001da4:	0800cf5c 	.word	0x0800cf5c
 8001da8:	0800cf88 	.word	0x0800cf88
 8001dac:	200001fc 	.word	0x200001fc
 8001db0:	2000143c 	.word	0x2000143c
 8001db4:	0800cfbc 	.word	0x0800cfbc

08001db8 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <mpu9250_is_initialized+0x14>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	200001f8 	.word	0x200001f8

08001dd0 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <mpu9250_read_gyro+0xc4>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	f083 0301 	eor.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 8001de4:	482c      	ldr	r0, [pc, #176]	@ (8001e98 <mpu9250_read_gyro+0xc8>)
 8001de6:	f7ff fd93 	bl	8001910 <send_bluetooth_message>
        return;
 8001dea:	e050      	b.n	8001e8e <mpu9250_read_gyro+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 8001dec:	23c3      	movs	r3, #195	@ 0xc3
 8001dee:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001df6:	4829      	ldr	r0, [pc, #164]	@ (8001e9c <mpu9250_read_gyro+0xcc>)
 8001df8:	f003 fea6 	bl	8005b48 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001dfc:	1df9      	adds	r1, r7, #7
 8001dfe:	2364      	movs	r3, #100	@ 0x64
 8001e00:	2201      	movs	r2, #1
 8001e02:	4827      	ldr	r0, [pc, #156]	@ (8001ea0 <mpu9250_read_gyro+0xd0>)
 8001e04:	f004 fbcd 	bl	80065a2 <HAL_SPI_Transmit>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e18:	4820      	ldr	r0, [pc, #128]	@ (8001e9c <mpu9250_read_gyro+0xcc>)
 8001e1a:	f003 fe95 	bl	8005b48 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 8001e1e:	4821      	ldr	r0, [pc, #132]	@ (8001ea4 <mpu9250_read_gyro+0xd4>)
 8001e20:	f7ff fd76 	bl	8001910 <send_bluetooth_message>
        return;
 8001e24:	e033      	b.n	8001e8e <mpu9250_read_gyro+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001e26:	f107 0108 	add.w	r1, r7, #8
 8001e2a:	2364      	movs	r3, #100	@ 0x64
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	481c      	ldr	r0, [pc, #112]	@ (8001ea0 <mpu9250_read_gyro+0xd0>)
 8001e30:	f004 fcfb 	bl	800682a <HAL_SPI_Receive>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e3e:	4817      	ldr	r0, [pc, #92]	@ (8001e9c <mpu9250_read_gyro+0xcc>)
 8001e40:	f003 fe82 	bl	8005b48 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 8001e4a:	4817      	ldr	r0, [pc, #92]	@ (8001ea8 <mpu9250_read_gyro+0xd8>)
 8001e4c:	f7ff fd60 	bl	8001910 <send_bluetooth_message>
        return;
 8001e50:	e01d      	b.n	8001e8e <mpu9250_read_gyro+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 8001e52:	7a3b      	ldrb	r3, [r7, #8]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	7a7b      	ldrb	r3, [r7, #9]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <mpu9250_read_gyro+0xdc>)
 8001e64:	801a      	strh	r2, [r3, #0]
    gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 8001e66:	7abb      	ldrb	r3, [r7, #10]
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <mpu9250_read_gyro+0xdc>)
 8001e78:	805a      	strh	r2, [r3, #2]
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001e7a:	7b3b      	ldrb	r3, [r7, #12]
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <mpu9250_read_gyro+0xdc>)
 8001e8c:	809a      	strh	r2, [r3, #4]
}
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200001f8 	.word	0x200001f8
 8001e98:	0800cfec 	.word	0x0800cfec
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	20000258 	.word	0x20000258
 8001ea4:	0800d020 	.word	0x0800d020
 8001ea8:	0800d044 	.word	0x0800d044
 8001eac:	2000143c 	.word	0x2000143c

08001eb0 <mpu9250_read_accel>:

/**
 * @brief Read raw accelerometer data - FIXED with error checking
 */
void mpu9250_read_accel(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <mpu9250_read_accel+0xc4>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <mpu9250_read_accel+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read accel\r\n");
 8001ec4:	482c      	ldr	r0, [pc, #176]	@ (8001f78 <mpu9250_read_accel+0xc8>)
 8001ec6:	f7ff fd23 	bl	8001910 <send_bluetooth_message>
        return;
 8001eca:	e050      	b.n	8001f6e <mpu9250_read_accel+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_ACCEL_XOUT_H | 0x80; // Set read bit
 8001ecc:	23bb      	movs	r3, #187	@ 0xbb
 8001ece:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ed6:	4829      	ldr	r0, [pc, #164]	@ (8001f7c <mpu9250_read_accel+0xcc>)
 8001ed8:	f003 fe36 	bl	8005b48 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001edc:	1df9      	adds	r1, r7, #7
 8001ede:	2364      	movs	r3, #100	@ 0x64
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4827      	ldr	r0, [pc, #156]	@ (8001f80 <mpu9250_read_accel+0xd0>)
 8001ee4:	f004 fb5d 	bl	80065a2 <HAL_SPI_Transmit>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <mpu9250_read_accel+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef8:	4820      	ldr	r0, [pc, #128]	@ (8001f7c <mpu9250_read_accel+0xcc>)
 8001efa:	f003 fe25 	bl	8005b48 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in accel read\r\n");
 8001efe:	4821      	ldr	r0, [pc, #132]	@ (8001f84 <mpu9250_read_accel+0xd4>)
 8001f00:	f7ff fd06 	bl	8001910 <send_bluetooth_message>
        return;
 8001f04:	e033      	b.n	8001f6e <mpu9250_read_accel+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001f06:	f107 0108 	add.w	r1, r7, #8
 8001f0a:	2364      	movs	r3, #100	@ 0x64
 8001f0c:	2206      	movs	r2, #6
 8001f0e:	481c      	ldr	r0, [pc, #112]	@ (8001f80 <mpu9250_read_accel+0xd0>)
 8001f10:	f004 fc8b 	bl	800682a <HAL_SPI_Receive>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f1e:	4817      	ldr	r0, [pc, #92]	@ (8001f7c <mpu9250_read_accel+0xcc>)
 8001f20:	f003 fe12 	bl	8005b48 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <mpu9250_read_accel+0x82>
        send_bluetooth_message("SPI receive error in accel read\r\n");
 8001f2a:	4817      	ldr	r0, [pc, #92]	@ (8001f88 <mpu9250_read_accel+0xd8>)
 8001f2c:	f7ff fcf0 	bl	8001910 <send_bluetooth_message>
        return;
 8001f30:	e01d      	b.n	8001f6e <mpu9250_read_accel+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.accel_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 8001f32:	7a3b      	ldrb	r3, [r7, #8]
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	7a7b      	ldrb	r3, [r7, #9]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <mpu9250_read_accel+0xdc>)
 8001f44:	80da      	strh	r2, [r3, #6]
    gyro.accel_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 8001f46:	7abb      	ldrb	r3, [r7, #10]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <mpu9250_read_accel+0xdc>)
 8001f58:	811a      	strh	r2, [r3, #8]
    gyro.accel_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001f5a:	7b3b      	ldrb	r3, [r7, #12]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	7b7b      	ldrb	r3, [r7, #13]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <mpu9250_read_accel+0xdc>)
 8001f6c:	815a      	strh	r2, [r3, #10]
}
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200001f8 	.word	0x200001f8
 8001f78:	0800d068 	.word	0x0800d068
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	20000258 	.word	0x20000258
 8001f84:	0800d0a0 	.word	0x0800d0a0
 8001f88:	0800d0c4 	.word	0x0800d0c4
 8001f8c:	2000143c 	.word	0x2000143c

08001f90 <mpu9250_read_all>:

/**
 * @brief Read all IMU data
 */
void mpu9250_read_all(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
    mpu9250_read_accel();
 8001f94:	f7ff ff8c 	bl	8001eb0 <mpu9250_read_accel>
    mpu9250_read_gyro();
 8001f98:	f7ff ff1a 	bl	8001dd0 <mpu9250_read_gyro>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)
    return (float)gyro.gyro_z / 65.5f;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <mpu9250_get_gyro_z_dps+0x2c>)
 8001fa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001fd0 <mpu9250_get_gyro_z_dps+0x30>
 8001fb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fba:	eef0 7a66 	vmov.f32	s15, s13
}
 8001fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000143c 	.word	0x2000143c
 8001fd0:	42830000 	.word	0x42830000

08001fd4 <mpu9250_send_status>:

/**
 * @brief Get MPU9250 status for debugging - NEW FUNCTION
 */
void mpu9250_send_status(void)
{
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af02      	add	r7, sp, #8
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
                         mpu9250_initialized ? "OK" : "FAILED");
 8001fda:	4b2e      	ldr	r3, [pc, #184]	@ (8002094 <mpu9250_send_status+0xc0>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <mpu9250_send_status+0x12>
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <mpu9250_send_status+0xc4>)
 8001fe4:	e000      	b.n	8001fe8 <mpu9250_send_status+0x14>
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <mpu9250_send_status+0xc8>)
 8001fe8:	4619      	mov	r1, r3
 8001fea:	482d      	ldr	r0, [pc, #180]	@ (80020a0 <mpu9250_send_status+0xcc>)
 8001fec:	f7ff fca6 	bl	800193c <send_bluetooth_printf>

    if (mpu9250_initialized) {
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <mpu9250_send_status+0xc0>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d048      	beq.n	800208a <mpu9250_send_status+0xb6>
        uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001ff8:	2075      	movs	r0, #117	@ 0x75
 8001ffa:	f7ff fd29 	bl	8001a50 <mpu9250_read_register>
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
        uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 8002002:	206a      	movs	r0, #106	@ 0x6a
 8002004:	f7ff fd24 	bl	8001a50 <mpu9250_read_register>
 8002008:	4603      	mov	r3, r0
 800200a:	71bb      	strb	r3, [r7, #6]
        uint8_t pwr_mgmt = mpu9250_read_register(MPU9250_PWR_MGMT_1);
 800200c:	206b      	movs	r0, #107	@ 0x6b
 800200e:	f7ff fd1f 	bl	8001a50 <mpu9250_read_register>
 8002012:	4603      	mov	r3, r0
 8002014:	717b      	strb	r3, [r7, #5]

        send_bluetooth_printf("WHO_AM_I:0x%02X USER_CTRL:0x%02X PWR_MGMT:0x%02X\r\n",
 8002016:	79f9      	ldrb	r1, [r7, #7]
 8002018:	79ba      	ldrb	r2, [r7, #6]
 800201a:	797b      	ldrb	r3, [r7, #5]
 800201c:	4821      	ldr	r0, [pc, #132]	@ (80020a4 <mpu9250_send_status+0xd0>)
 800201e:	f7ff fc8d 	bl	800193c <send_bluetooth_printf>
                             who_am_i, user_ctrl, pwr_mgmt);

        if (user_ctrl & 0x10) {
 8002022:	79bb      	ldrb	r3, [r7, #6]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <mpu9250_send_status+0x60>
            send_bluetooth_message("I2C disabled: ✅\r\n");
 800202c:	481e      	ldr	r0, [pc, #120]	@ (80020a8 <mpu9250_send_status+0xd4>)
 800202e:	f7ff fc6f 	bl	8001910 <send_bluetooth_message>
 8002032:	e002      	b.n	800203a <mpu9250_send_status+0x66>
        } else {
            send_bluetooth_message("I2C disabled: ❌\r\n");
 8002034:	481d      	ldr	r0, [pc, #116]	@ (80020ac <mpu9250_send_status+0xd8>)
 8002036:	f7ff fc6b 	bl	8001910 <send_bluetooth_message>
        }

        // Read current sensor values
        mpu9250_read_all();
 800203a:	f7ff ffa9 	bl	8001f90 <mpu9250_read_all>
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002040:	f9b3 3000 	ldrsh.w	r3, [r3]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8002044:	461c      	mov	r4, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 800204c:	461d      	mov	r5, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 800204e:	f7ff ffa7 	bl	8001fa0 <mpu9250_get_gyro_z_dps>
 8002052:	ee10 3a10 	vmov	r3, s0
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa7e 	bl	8000558 <__aeabi_f2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	e9cd 2300 	strd	r2, r3, [sp]
 8002064:	462a      	mov	r2, r5
 8002066:	4621      	mov	r1, r4
 8002068:	4812      	ldr	r0, [pc, #72]	@ (80020b4 <mpu9250_send_status+0xe0>)
 800206a:	f7ff fc67 	bl	800193c <send_bluetooth_printf>
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002070:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8002074:	4619      	mov	r1, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002078:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 800207c:	461a      	mov	r2, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002080:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <mpu9250_send_status+0xe4>)
 8002086:	f7ff fc59 	bl	800193c <send_bluetooth_printf>
    }
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bdb0      	pop	{r4, r5, r7, pc}
 8002092:	bf00      	nop
 8002094:	200001f8 	.word	0x200001f8
 8002098:	0800d0e8 	.word	0x0800d0e8
 800209c:	0800d0ec 	.word	0x0800d0ec
 80020a0:	0800d0f4 	.word	0x0800d0f4
 80020a4:	0800d110 	.word	0x0800d110
 80020a8:	0800d144 	.word	0x0800d144
 80020ac:	0800d158 	.word	0x0800d158
 80020b0:	2000143c 	.word	0x2000143c
 80020b4:	0800d16c 	.word	0x0800d16c
 80020b8:	0800d188 	.word	0x0800d188

080020bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c2:	f002 fd91 	bl	8004be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c6:	f000 f92b 	bl	8002320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ca:	f000 fc5b 	bl	8002984 <MX_GPIO_Init>
  MX_ADC1_Init();
 80020ce:	f000 f98f 	bl	80023f0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80020d2:	f000 fa17 	bl	8002504 <MX_SPI2_Init>
  MX_TIM1_Init();
 80020d6:	f000 fa4b 	bl	8002570 <MX_TIM1_Init>
  MX_TIM2_Init();
 80020da:	f000 fae9 	bl	80026b0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80020de:	f000 fbd3 	bl	8002888 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80020e2:	f000 fc25 	bl	8002930 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80020e6:	f000 fb37 	bl	8002758 <MX_TIM3_Init>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   // PA6  (MOTOR_IN1)
 80020ea:	2100      	movs	r1, #0
 80020ec:	487b      	ldr	r0, [pc, #492]	@ (80022dc <main+0x220>)
 80020ee:	f005 f849 	bl	8007184 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // PA7  (MOTOR_IN2)
 80020f2:	2104      	movs	r1, #4
 80020f4:	4879      	ldr	r0, [pc, #484]	@ (80022dc <main+0x220>)
 80020f6:	f005 f845 	bl	8007184 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);   // PB0  (MOTOR_IN3)
 80020fa:	2108      	movs	r1, #8
 80020fc:	4877      	ldr	r0, [pc, #476]	@ (80022dc <main+0x220>)
 80020fe:	f005 f841 	bl	8007184 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);   // PB1  (MOTOR_IN4)
 8002102:	210c      	movs	r1, #12
 8002104:	4875      	ldr	r0, [pc, #468]	@ (80022dc <main+0x220>)
 8002106:	f005 f83d 	bl	8007184 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // wake DRV8833
 800210a:	2201      	movs	r2, #1
 800210c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002110:	4873      	ldr	r0, [pc, #460]	@ (80022e0 <main+0x224>)
 8002112:	f003 fd19 	bl	8005b48 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN 2 */
  /* Initialize micromouse system */
  championship_micromouse_init();
 8002116:	f000 fd83 	bl	8002c20 <championship_micromouse_init>
  verify_adc_gpio_configuration();
 800211a:	f000 fd15 	bl	8002b48 <verify_adc_gpio_configuration>
  calibrate_adc();
 800211e:	f000 fd4f 	bl	8002bc0 <calibrate_adc>
  adc_system_diagnostics();
 8002122:	f002 f8d7 	bl	80042d4 <adc_system_diagnostics>

  // Check gyro initialization
  if (!mpu9250_is_initialized()) {
 8002126:	f7ff fe47 	bl	8001db8 <mpu9250_is_initialized>
 800212a:	4603      	mov	r3, r0
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <main+0x80>
      send_bluetooth_message("❌ CRITICAL: Gyroscope initialization failed!\r\n");
 8002136:	486b      	ldr	r0, [pc, #428]	@ (80022e4 <main+0x228>)
 8002138:	f7ff fbea 	bl	8001910 <send_bluetooth_message>

  }
  mpu9250_calibrate_bias();
 800213c:	f7ff fd8e 	bl	8001c5c <mpu9250_calibrate_bias>
  mpu9250_send_status();
 8002140:	f7ff ff48 	bl	8001fd4 <mpu9250_send_status>


  // Test ADC functionality
  update_sensors();
 8002144:	f001 ffe6 	bl	8004114 <update_sensors>
  if (sensors.battery == 0 && sensors.front_left == 0 &&
 8002148:	4b67      	ldr	r3, [pc, #412]	@ (80022e8 <main+0x22c>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d112      	bne.n	8002176 <main+0xba>
 8002150:	4b65      	ldr	r3, [pc, #404]	@ (80022e8 <main+0x22c>)
 8002152:	891b      	ldrh	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10e      	bne.n	8002176 <main+0xba>
      sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8002158:	4b63      	ldr	r3, [pc, #396]	@ (80022e8 <main+0x22c>)
 800215a:	885b      	ldrh	r3, [r3, #2]
  if (sensors.battery == 0 && sensors.front_left == 0 &&
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <main+0xba>
      sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8002160:	4b61      	ldr	r3, [pc, #388]	@ (80022e8 <main+0x22c>)
 8002162:	88db      	ldrh	r3, [r3, #6]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <main+0xba>
 8002168:	4b5f      	ldr	r3, [pc, #380]	@ (80022e8 <main+0x22c>)
 800216a:	889b      	ldrh	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <main+0xba>
      send_bluetooth_message("❌ CRITICAL: All sensors reading zero - ADC failure!\r\n");
 8002170:	485e      	ldr	r0, [pc, #376]	@ (80022ec <main+0x230>)
 8002172:	f7ff fbcd 	bl	8001910 <send_bluetooth_message>
  }

  // Test encoder functionality
  start_encoders();
 8002176:	f001 fd9d 	bl	8003cb4 <start_encoders>
  int32_t left_test = get_left_encoder_total();
 800217a:	f001 fd87 	bl	8003c8c <get_left_encoder_total>
 800217e:	6078      	str	r0, [r7, #4]
  int32_t right_test = get_right_encoder_total();
 8002180:	f001 fd8e 	bl	8003ca0 <get_right_encoder_total>
 8002184:	6038      	str	r0, [r7, #0]
  HAL_Delay(100);
 8002186:	2064      	movs	r0, #100	@ 0x64
 8002188:	f002 fda0 	bl	8004ccc <HAL_Delay>

//
//  debug_encoder_setup();
//  test_encoder_manual();
//  test_encoder_rotation();
  left_test = get_left_encoder_total();
 800218c:	f001 fd7e 	bl	8003c8c <get_left_encoder_total>
 8002190:	6078      	str	r0, [r7, #4]
  right_test = get_right_encoder_total();
 8002192:	f001 fd85 	bl	8003ca0 <get_right_encoder_total>
 8002196:	6038      	str	r0, [r7, #0]

  if (left_test == 0 && right_test == 0) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <main+0xee>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <main+0xee>
      send_bluetooth_message("⚠️ WARNING: Encoders may not be working\r\n");
 80021a4:	4852      	ldr	r0, [pc, #328]	@ (80022f0 <main+0x234>)
 80021a6:	f7ff fbb3 	bl	8001910 <send_bluetooth_message>
      // Don't mark as critical failure - encoders might be stationary
  }


  /* Play startup tone */
  play_startup_tone();
 80021aa:	f7fe fee9 	bl	8000f80 <play_startup_tone>

  /* Status LEDs test */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2110      	movs	r1, #16
 80021b2:	4850      	ldr	r0, [pc, #320]	@ (80022f4 <main+0x238>)
 80021b4:	f003 fcc8 	bl	8005b48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_SET);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2120      	movs	r1, #32
 80021bc:	484d      	ldr	r0, [pc, #308]	@ (80022f4 <main+0x238>)
 80021be:	f003 fcc3 	bl	8005b48 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80021c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021c6:	f002 fd81 	bl	8004ccc <HAL_Delay>
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2110      	movs	r1, #16
 80021ce:	4849      	ldr	r0, [pc, #292]	@ (80022f4 <main+0x238>)
 80021d0:	f003 fcba 	bl	8005b48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2120      	movs	r1, #32
 80021d8:	4846      	ldr	r0, [pc, #280]	@ (80022f4 <main+0x238>)
 80021da:	f003 fcb5 	bl	8005b48 <HAL_GPIO_WritePin>

  /* Send startup message via Bluetooth */
  send_bluetooth_message("Championship Micromouse Ready!\r\n");
 80021de:	4846      	ldr	r0, [pc, #280]	@ (80022f8 <main+0x23c>)
 80021e0:	f7ff fb96 	bl	8001910 <send_bluetooth_message>

  send_championship_stats();
 80021e4:	f7ff fc0c 	bl	8001a00 <send_championship_stats>

  /* Wait for start button */
  send_bluetooth_message("Press button to start exploration...\r\n");
 80021e8:	4844      	ldr	r0, [pc, #272]	@ (80022fc <main+0x240>)
 80021ea:	f7ff fb91 	bl	8001910 <send_bluetooth_message>
  while (!start_flag) {
 80021ee:	e006      	b.n	80021fe <main+0x142>
      HAL_Delay(10);
 80021f0:	200a      	movs	r0, #10
 80021f2:	f002 fd6b 	bl	8004ccc <HAL_Delay>
      // Blink LED to show ready state
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80021f6:	2110      	movs	r1, #16
 80021f8:	483e      	ldr	r0, [pc, #248]	@ (80022f4 <main+0x238>)
 80021fa:	f003 fcbe 	bl	8005b7a <HAL_GPIO_TogglePin>
  while (!start_flag) {
 80021fe:	4b40      	ldr	r3, [pc, #256]	@ (8002300 <main+0x244>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f3      	beq.n	80021f0 <main+0x134>
  }

  /* Reset LEDs */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	2110      	movs	r1, #16
 800220c:	4839      	ldr	r0, [pc, #228]	@ (80022f4 <main+0x238>)
 800220e:	f003 fc9b 	bl	8005b48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	2120      	movs	r1, #32
 8002216:	4837      	ldr	r0, [pc, #220]	@ (80022f4 <main+0x238>)
 8002218:	f003 fc96 	bl	8005b48 <HAL_GPIO_WritePin>

  /* Start exploration after delay */
  play_confirmation_tone();
 800221c:	f7fe fecc 	bl	8000fb8 <play_confirmation_tone>
  HAL_Delay(2000);
 8002220:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002224:	f002 fd52 	bl	8004ccc <HAL_Delay>

  /* Main micromouse algorithm */
  send_bluetooth_message("Starting maze exploration...\r\n");
 8002228:	4836      	ldr	r0, [pc, #216]	@ (8002304 <main+0x248>)
 800222a:	f7ff fb71 	bl	8001910 <send_bluetooth_message>

  /* Initialize movement system */
  start_encoders();
 800222e:	f001 fd41 	bl	8003cb4 <start_encoders>
  calibrate_sensors();
 8002232:	f002 f82f 	bl	8004294 <calibrate_sensors>

  /* Execute championship exploration */
  championship_exploration_with_analysis();
 8002236:	f001 fa6b 	bl	8003710 <championship_exploration_with_analysis>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  update_sensors();
 800223a:	f001 ff6b 	bl	8004114 <update_sensors>

	  if (button_pressed == 1) {
 800223e:	4b32      	ldr	r3, [pc, #200]	@ (8002308 <main+0x24c>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d114      	bne.n	8002272 <main+0x1b6>
		  button_pressed = 0;
 8002248:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <main+0x24c>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
		  // Left button - start speed run or new exploration
		  if (robot.center_reached && robot.returned_to_start) {
 800224e:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <main+0x250>)
 8002250:	7b1b      	ldrb	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <main+0x1a8>
 8002256:	4b2d      	ldr	r3, [pc, #180]	@ (800230c <main+0x250>)
 8002258:	7b5b      	ldrb	r3, [r3, #13]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <main+0x1a8>
			  championship_speed_run(); // Championship speed run with MMS path
 800225e:	f001 fbd5 	bl	8003a0c <championship_speed_run>
 8002262:	e006      	b.n	8002272 <main+0x1b6>
		  } else {
			  send_bluetooth_message("Starting new championship exploration...\r\n");
 8002264:	482a      	ldr	r0, [pc, #168]	@ (8002310 <main+0x254>)
 8002266:	f7ff fb53 	bl	8001910 <send_bluetooth_message>
			  reset_championship_micromouse();
 800226a:	f001 fba3 	bl	80039b4 <reset_championship_micromouse>
			  championship_exploration_with_analysis();
 800226e:	f001 fa4f 	bl	8003710 <championship_exploration_with_analysis>
		  }
	  }

	  if (button_pressed == 2) {
 8002272:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <main+0x24c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d107      	bne.n	800228c <main+0x1d0>
		  button_pressed = 0;
 800227c:	4b22      	ldr	r3, [pc, #136]	@ (8002308 <main+0x24c>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
		  // Right button - reset system
		  reset_championship_micromouse();
 8002282:	f001 fb97 	bl	80039b4 <reset_championship_micromouse>
		  send_bluetooth_message("Championship system reset\r\n");
 8002286:	4823      	ldr	r0, [pc, #140]	@ (8002314 <main+0x258>)
 8002288:	f7ff fb42 	bl	8001910 <send_bluetooth_message>
	  }

	  // Send periodic status updates
	  static uint32_t last_status = 0;
	  if (HAL_GetTick() - last_status > 5000) {
 800228c:	f002 fd12 	bl	8004cb4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	4b21      	ldr	r3, [pc, #132]	@ (8002318 <main+0x25c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d906      	bls.n	80022ae <main+0x1f2>
		  send_battery_status();
 80022a0:	f7ff fb72 	bl	8001988 <send_battery_status>
		  last_status = HAL_GetTick();
 80022a4:	f002 fd06 	bl	8004cb4 <HAL_GetTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002318 <main+0x25c>)
 80022ac:	6013      	str	r3, [r2, #0]
	  }

	  // Blink LED to show system is alive
	  static uint32_t last_blink = 0;
	  if (HAL_GetTick() - last_blink > 2000) {
 80022ae:	f002 fd01 	bl	8004cb4 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <main+0x260>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80022be:	d908      	bls.n	80022d2 <main+0x216>
		  HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80022c0:	2110      	movs	r1, #16
 80022c2:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <main+0x238>)
 80022c4:	f003 fc59 	bl	8005b7a <HAL_GPIO_TogglePin>
		  last_blink = HAL_GetTick();
 80022c8:	f002 fcf4 	bl	8004cb4 <HAL_GetTick>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a13      	ldr	r2, [pc, #76]	@ (800231c <main+0x260>)
 80022d0:	6013      	str	r3, [r2, #0]
	  }

	  HAL_Delay(100);
 80022d2:	2064      	movs	r0, #100	@ 0x64
 80022d4:	f002 fcfa 	bl	8004ccc <HAL_Delay>
  {
 80022d8:	e7af      	b.n	800223a <main+0x17e>
 80022da:	bf00      	nop
 80022dc:	20000340 	.word	0x20000340
 80022e0:	40020800 	.word	0x40020800
 80022e4:	0800d1a0 	.word	0x0800d1a0
 80022e8:	2000142c 	.word	0x2000142c
 80022ec:	0800d1d4 	.word	0x0800d1d4
 80022f0:	0800d20c 	.word	0x0800d20c
 80022f4:	40020400 	.word	0x40020400
 80022f8:	0800d23c 	.word	0x0800d23c
 80022fc:	0800d260 	.word	0x0800d260
 8002300:	20001461 	.word	0x20001461
 8002304:	0800d288 	.word	0x0800d288
 8002308:	20001460 	.word	0x20001460
 800230c:	20001418 	.word	0x20001418
 8002310:	0800d2a8 	.word	0x0800d2a8
 8002314:	0800d2d4 	.word	0x0800d2d4
 8002318:	2000146c 	.word	0x2000146c
 800231c:	20001470 	.word	0x20001470

08002320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b094      	sub	sp, #80	@ 0x50
 8002324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002326:	f107 0320 	add.w	r3, r7, #32
 800232a:	2230      	movs	r2, #48	@ 0x30
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f007 fd72 	bl	8009e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <SystemClock_Config+0xc8>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	4a26      	ldr	r2, [pc, #152]	@ (80023e8 <SystemClock_Config+0xc8>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002352:	6413      	str	r3, [r2, #64]	@ 0x40
 8002354:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <SystemClock_Config+0xc8>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002360:	2300      	movs	r3, #0
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <SystemClock_Config+0xcc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a20      	ldr	r2, [pc, #128]	@ (80023ec <SystemClock_Config+0xcc>)
 800236a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <SystemClock_Config+0xcc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800237c:	2302      	movs	r3, #2
 800237e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002380:	2301      	movs	r3, #1
 8002382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002384:	2310      	movs	r3, #16
 8002386:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002388:	2302      	movs	r3, #2
 800238a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800238c:	2300      	movs	r3, #0
 800238e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002390:	2310      	movs	r3, #16
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002394:	23a8      	movs	r3, #168	@ 0xa8
 8002396:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002398:	2302      	movs	r3, #2
 800239a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800239c:	2304      	movs	r3, #4
 800239e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 fc1b 	bl	8005be0 <HAL_RCC_OscConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023b0:	f000 fc22 	bl	8002bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b4:	230f      	movs	r3, #15
 80023b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b8:	2302      	movs	r3, #2
 80023ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	2102      	movs	r1, #2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fe7d 	bl	80060d0 <HAL_RCC_ClockConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80023dc:	f000 fc0c 	bl	8002bf8 <Error_Handler>
  }
}
 80023e0:	bf00      	nop
 80023e2:	3750      	adds	r7, #80	@ 0x50
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000

080023f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023f6:	463b      	mov	r3, r7
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002402:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002404:	4a3d      	ldr	r2, [pc, #244]	@ (80024fc <MX_ADC1_Init+0x10c>)
 8002406:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002408:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <MX_ADC1_Init+0x108>)
 800240a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800240e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002410:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002416:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002418:	2201      	movs	r2, #1
 800241a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800241c:	4b36      	ldr	r3, [pc, #216]	@ (80024f8 <MX_ADC1_Init+0x108>)
 800241e:	2201      	movs	r2, #1
 8002420:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002422:	4b35      	ldr	r3, [pc, #212]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800242a:	4b33      	ldr	r3, [pc, #204]	@ (80024f8 <MX_ADC1_Init+0x108>)
 800242c:	2200      	movs	r2, #0
 800242e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002430:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002432:	4a33      	ldr	r2, [pc, #204]	@ (8002500 <MX_ADC1_Init+0x110>)
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002436:	4b30      	ldr	r3, [pc, #192]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800243c:	4b2e      	ldr	r3, [pc, #184]	@ (80024f8 <MX_ADC1_Init+0x108>)
 800243e:	2205      	movs	r2, #5
 8002440:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002442:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800244a:	4b2b      	ldr	r3, [pc, #172]	@ (80024f8 <MX_ADC1_Init+0x108>)
 800244c:	2201      	movs	r2, #1
 800244e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002450:	4829      	ldr	r0, [pc, #164]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002452:	f002 fc5f 	bl	8004d14 <HAL_ADC_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800245c:	f000 fbcc 	bl	8002bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002460:	2300      	movs	r3, #0
 8002462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002464:	2301      	movs	r3, #1
 8002466:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800246c:	463b      	mov	r3, r7
 800246e:	4619      	mov	r1, r3
 8002470:	4821      	ldr	r0, [pc, #132]	@ (80024f8 <MX_ADC1_Init+0x108>)
 8002472:	f002 fe13 	bl	800509c <HAL_ADC_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800247c:	f000 fbbc 	bl	8002bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002480:	2302      	movs	r3, #2
 8002482:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002484:	2302      	movs	r3, #2
 8002486:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002488:	463b      	mov	r3, r7
 800248a:	4619      	mov	r1, r3
 800248c:	481a      	ldr	r0, [pc, #104]	@ (80024f8 <MX_ADC1_Init+0x108>)
 800248e:	f002 fe05 	bl	800509c <HAL_ADC_ConfigChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002498:	f000 fbae 	bl	8002bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800249c:	2303      	movs	r3, #3
 800249e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80024a0:	2303      	movs	r3, #3
 80024a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a4:	463b      	mov	r3, r7
 80024a6:	4619      	mov	r1, r3
 80024a8:	4813      	ldr	r0, [pc, #76]	@ (80024f8 <MX_ADC1_Init+0x108>)
 80024aa:	f002 fdf7 	bl	800509c <HAL_ADC_ConfigChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80024b4:	f000 fba0 	bl	8002bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80024b8:	2304      	movs	r3, #4
 80024ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80024bc:	2304      	movs	r3, #4
 80024be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	4619      	mov	r1, r3
 80024c4:	480c      	ldr	r0, [pc, #48]	@ (80024f8 <MX_ADC1_Init+0x108>)
 80024c6:	f002 fde9 	bl	800509c <HAL_ADC_ConfigChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80024d0:	f000 fb92 	bl	8002bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80024d4:	2305      	movs	r3, #5
 80024d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80024d8:	2305      	movs	r3, #5
 80024da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <MX_ADC1_Init+0x108>)
 80024e2:	f002 fddb 	bl	800509c <HAL_ADC_ConfigChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80024ec:	f000 fb84 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000210 	.word	0x20000210
 80024fc:	40012000 	.word	0x40012000
 8002500:	0f000001 	.word	0x0f000001

08002504 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <MX_SPI2_Init+0x64>)
 800250a:	4a18      	ldr	r2, [pc, #96]	@ (800256c <MX_SPI2_Init+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002510:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <MX_SPI2_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <MX_SPI2_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002534:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002536:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002538:	2230      	movs	r2, #48	@ 0x30
 800253a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <MX_SPI2_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <MX_SPI2_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002550:	220a      	movs	r2, #10
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002556:	f003 ff9b 	bl	8006490 <HAL_SPI_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002560:	f000 fb4a 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000258 	.word	0x20000258
 800256c:	40003800 	.word	0x40003800

08002570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b096      	sub	sp, #88	@ 0x58
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800258e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
 800259e:	615a      	str	r2, [r3, #20]
 80025a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2220      	movs	r2, #32
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f007 fc35 	bl	8009e18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025ae:	4b3e      	ldr	r3, [pc, #248]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025b0:	4a3e      	ldr	r2, [pc, #248]	@ (80026ac <MX_TIM1_Init+0x13c>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80025b4:	4b3c      	ldr	r3, [pc, #240]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025b6:	2214      	movs	r2, #20
 80025b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b3b      	ldr	r3, [pc, #236]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 80025c0:	4b39      	ldr	r3, [pc, #228]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025c2:	22c8      	movs	r2, #200	@ 0xc8
 80025c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c6:	4b38      	ldr	r3, [pc, #224]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025cc:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d2:	4b35      	ldr	r3, [pc, #212]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025d4:	2280      	movs	r2, #128	@ 0x80
 80025d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025d8:	4833      	ldr	r0, [pc, #204]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025da:	f004 fd2b 	bl	8007034 <HAL_TIM_Base_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80025e4:	f000 fb08 	bl	8002bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025f2:	4619      	mov	r1, r3
 80025f4:	482c      	ldr	r0, [pc, #176]	@ (80026a8 <MX_TIM1_Init+0x138>)
 80025f6:	f005 f9bf 	bl	8007978 <HAL_TIM_ConfigClockSource>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002600:	f000 fafa 	bl	8002bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002604:	4828      	ldr	r0, [pc, #160]	@ (80026a8 <MX_TIM1_Init+0x138>)
 8002606:	f004 fd64 	bl	80070d2 <HAL_TIM_PWM_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002610:	f000 faf2 	bl	8002bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800261c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002620:	4619      	mov	r1, r3
 8002622:	4821      	ldr	r0, [pc, #132]	@ (80026a8 <MX_TIM1_Init+0x138>)
 8002624:	f005 fd74 	bl	8008110 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800262e:	f000 fae3 	bl	8002bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002632:	2360      	movs	r3, #96	@ 0x60
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 8002636:	2364      	movs	r3, #100	@ 0x64
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800263e:	2300      	movs	r3, #0
 8002640:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800264e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002652:	2208      	movs	r2, #8
 8002654:	4619      	mov	r1, r3
 8002656:	4814      	ldr	r0, [pc, #80]	@ (80026a8 <MX_TIM1_Init+0x138>)
 8002658:	f005 f8cc 	bl	80077f4 <HAL_TIM_PWM_ConfigChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002662:	f000 fac9 	bl	8002bf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800267a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800267e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4807      	ldr	r0, [pc, #28]	@ (80026a8 <MX_TIM1_Init+0x138>)
 800268a:	f005 fdaf 	bl	80081ec <HAL_TIMEx_ConfigBreakDeadTime>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002694:	f000 fab0 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002698:	4803      	ldr	r0, [pc, #12]	@ (80026a8 <MX_TIM1_Init+0x138>)
 800269a:	f002 f85d 	bl	8004758 <HAL_TIM_MspPostInit>

}
 800269e:	bf00      	nop
 80026a0:	3758      	adds	r7, #88	@ 0x58
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200002b0 	.word	0x200002b0
 80026ac:	40010000 	.word	0x40010000

080026b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	@ 0x30
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	2224      	movs	r2, #36	@ 0x24
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f007 fbaa 	bl	8009e18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026cc:	4b21      	ldr	r3, [pc, #132]	@ (8002754 <MX_TIM2_Init+0xa4>)
 80026ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <MX_TIM2_Init+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026da:	4b1e      	ldr	r3, [pc, #120]	@ (8002754 <MX_TIM2_Init+0xa4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <MX_TIM2_Init+0xa4>)
 80026e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <MX_TIM2_Init+0xa4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <MX_TIM2_Init+0xa4>)
 80026f0:	2280      	movs	r2, #128	@ 0x80
 80026f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026f4:	2303      	movs	r3, #3
 80026f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026fc:	2301      	movs	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800270c:	2301      	movs	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002710:	2300      	movs	r3, #0
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4619      	mov	r1, r3
 800271e:	480d      	ldr	r0, [pc, #52]	@ (8002754 <MX_TIM2_Init+0xa4>)
 8002720:	f004 fe44 	bl	80073ac <HAL_TIM_Encoder_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800272a:	f000 fa65 	bl	8002bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	@ (8002754 <MX_TIM2_Init+0xa4>)
 800273c:	f005 fce8 	bl	8008110 <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002746:	f000 fa57 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	3730      	adds	r7, #48	@ 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200002f8 	.word	0x200002f8

08002758 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	@ 0x38
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	f107 0320 	add.w	r3, r7, #32
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
 8002784:	615a      	str	r2, [r3, #20]
 8002786:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002788:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <MX_TIM3_Init+0x128>)
 800278a:	4a3e      	ldr	r2, [pc, #248]	@ (8002884 <MX_TIM3_Init+0x12c>)
 800278c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800278e:	4b3c      	ldr	r3, [pc, #240]	@ (8002880 <MX_TIM3_Init+0x128>)
 8002790:	2204      	movs	r2, #4
 8002792:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002794:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <MX_TIM3_Init+0x128>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 800279a:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <MX_TIM3_Init+0x128>)
 800279c:	f240 3246 	movw	r2, #838	@ 0x346
 80027a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <MX_TIM3_Init+0x128>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027a8:	4b35      	ldr	r3, [pc, #212]	@ (8002880 <MX_TIM3_Init+0x128>)
 80027aa:	2280      	movs	r2, #128	@ 0x80
 80027ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ae:	4834      	ldr	r0, [pc, #208]	@ (8002880 <MX_TIM3_Init+0x128>)
 80027b0:	f004 fc40 	bl	8007034 <HAL_TIM_Base_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80027ba:	f000 fa1d 	bl	8002bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027c8:	4619      	mov	r1, r3
 80027ca:	482d      	ldr	r0, [pc, #180]	@ (8002880 <MX_TIM3_Init+0x128>)
 80027cc:	f005 f8d4 	bl	8007978 <HAL_TIM_ConfigClockSource>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80027d6:	f000 fa0f 	bl	8002bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027da:	4829      	ldr	r0, [pc, #164]	@ (8002880 <MX_TIM3_Init+0x128>)
 80027dc:	f004 fc79 	bl	80070d2 <HAL_TIM_PWM_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80027e6:	f000 fa07 	bl	8002bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027f2:	f107 0320 	add.w	r3, r7, #32
 80027f6:	4619      	mov	r1, r3
 80027f8:	4821      	ldr	r0, [pc, #132]	@ (8002880 <MX_TIM3_Init+0x128>)
 80027fa:	f005 fc89 	bl	8008110 <HAL_TIMEx_MasterConfigSynchronization>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002804:	f000 f9f8 	bl	8002bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002808:	2360      	movs	r3, #96	@ 0x60
 800280a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	4619      	mov	r1, r3
 800281e:	4818      	ldr	r0, [pc, #96]	@ (8002880 <MX_TIM3_Init+0x128>)
 8002820:	f004 ffe8 	bl	80077f4 <HAL_TIM_PWM_ConfigChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800282a:	f000 f9e5 	bl	8002bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2204      	movs	r2, #4
 8002832:	4619      	mov	r1, r3
 8002834:	4812      	ldr	r0, [pc, #72]	@ (8002880 <MX_TIM3_Init+0x128>)
 8002836:	f004 ffdd 	bl	80077f4 <HAL_TIM_PWM_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002840:	f000 f9da 	bl	8002bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2208      	movs	r2, #8
 8002848:	4619      	mov	r1, r3
 800284a:	480d      	ldr	r0, [pc, #52]	@ (8002880 <MX_TIM3_Init+0x128>)
 800284c:	f004 ffd2 	bl	80077f4 <HAL_TIM_PWM_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002856:	f000 f9cf 	bl	8002bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	220c      	movs	r2, #12
 800285e:	4619      	mov	r1, r3
 8002860:	4807      	ldr	r0, [pc, #28]	@ (8002880 <MX_TIM3_Init+0x128>)
 8002862:	f004 ffc7 	bl	80077f4 <HAL_TIM_PWM_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800286c:	f000 f9c4 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002870:	4803      	ldr	r0, [pc, #12]	@ (8002880 <MX_TIM3_Init+0x128>)
 8002872:	f001 ff71 	bl	8004758 <HAL_TIM_MspPostInit>

}
 8002876:	bf00      	nop
 8002878:	3738      	adds	r7, #56	@ 0x38
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000340 	.word	0x20000340
 8002884:	40000400 	.word	0x40000400

08002888 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	@ 0x30
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	2224      	movs	r2, #36	@ 0x24
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f007 fabe 	bl	8009e18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028a4:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <MX_TIM4_Init+0xa0>)
 80028a6:	4a21      	ldr	r2, [pc, #132]	@ (800292c <MX_TIM4_Init+0xa4>)
 80028a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <MX_TIM4_Init+0xa0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <MX_TIM4_Init+0xa0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <MX_TIM4_Init+0xa0>)
 80028b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <MX_TIM4_Init+0xa0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028c4:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <MX_TIM4_Init+0xa0>)
 80028c6:	2280      	movs	r2, #128	@ 0x80
 80028c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028ca:	2303      	movs	r3, #3
 80028cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028d2:	2301      	movs	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028e2:	2301      	movs	r3, #1
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	4619      	mov	r1, r3
 80028f4:	480c      	ldr	r0, [pc, #48]	@ (8002928 <MX_TIM4_Init+0xa0>)
 80028f6:	f004 fd59 	bl	80073ac <HAL_TIM_Encoder_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002900:	f000 f97a 	bl	8002bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002904:	2300      	movs	r3, #0
 8002906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	@ (8002928 <MX_TIM4_Init+0xa0>)
 8002912:	f005 fbfd 	bl	8008110 <HAL_TIMEx_MasterConfigSynchronization>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800291c:	f000 f96c 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	3730      	adds	r7, #48	@ 0x30
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000388 	.word	0x20000388
 800292c:	40000800 	.word	0x40000800

08002930 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 8002936:	4a12      	ldr	r2, [pc, #72]	@ (8002980 <MX_USART6_UART_Init+0x50>)
 8002938:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 800293c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002940:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b08      	ldr	r3, [pc, #32]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <MX_USART6_UART_Init+0x4c>)
 8002968:	f005 fca6 	bl	80082b8 <HAL_UART_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002972:	f000 f941 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200003d0 	.word	0x200003d0
 8002980:	40011400 	.word	0x40011400

08002984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b4b      	ldr	r3, [pc, #300]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a4a      	ldr	r2, [pc, #296]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b48      	ldr	r3, [pc, #288]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b44      	ldr	r3, [pc, #272]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a43      	ldr	r2, [pc, #268]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b41      	ldr	r3, [pc, #260]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4b3d      	ldr	r3, [pc, #244]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a3c      	ldr	r2, [pc, #240]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b3a      	ldr	r3, [pc, #232]	@ (8002acc <MX_GPIO_Init+0x148>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 80029ee:	2200      	movs	r2, #0
 80029f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029f4:	4836      	ldr	r0, [pc, #216]	@ (8002ad0 <MX_GPIO_Init+0x14c>)
 80029f6:	f003 f8a7 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 80029fa:	2200      	movs	r2, #0
 80029fc:	f241 3130 	movw	r1, #4912	@ 0x1330
 8002a00:	4834      	ldr	r0, [pc, #208]	@ (8002ad4 <MX_GPIO_Init+0x150>)
 8002a02:	f003 f8a1 	bl	8005b48 <HAL_GPIO_WritePin>
                          |EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_LEFT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002a0c:	4832      	ldr	r0, [pc, #200]	@ (8002ad8 <MX_GPIO_Init+0x154>)
 8002a0e:	f003 f89b 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 8002a12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4829      	ldr	r0, [pc, #164]	@ (8002ad0 <MX_GPIO_Init+0x14c>)
 8002a2c:	f002 ff08 	bl	8005840 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8002a30:	2302      	movs	r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	4619      	mov	r1, r3
 8002a44:	4824      	ldr	r0, [pc, #144]	@ (8002ad8 <MX_GPIO_Init+0x154>)
 8002a46:	f002 fefb 	bl	8005840 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8002a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	4619      	mov	r1, r3
 8002a60:	481c      	ldr	r0, [pc, #112]	@ (8002ad4 <MX_GPIO_Init+0x150>)
 8002a62:	f002 feed 	bl	8005840 <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_RIGHT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8002a66:	f241 3330 	movw	r3, #4912	@ 0x1330
 8002a6a:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4815      	ldr	r0, [pc, #84]	@ (8002ad4 <MX_GPIO_Init+0x150>)
 8002a80:	f002 fede 	bl	8005840 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_LEFT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_LEFT_Pin|EMIT_SIDE_LEFT_Pin;
 8002a84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480e      	ldr	r0, [pc, #56]	@ (8002ad8 <MX_GPIO_Init+0x154>)
 8002a9e:	f002 fecf 	bl	8005840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	2007      	movs	r0, #7
 8002aa8:	f002 fe01 	bl	80056ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002aac:	2007      	movs	r0, #7
 8002aae:	f002 fe1a 	bl	80056e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2105      	movs	r1, #5
 8002ab6:	2028      	movs	r0, #40	@ 0x28
 8002ab8:	f002 fdf9 	bl	80056ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002abc:	2028      	movs	r0, #40	@ 0x28
 8002abe:	f002 fe12 	bl	80056e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ac2:	bf00      	nop
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020000 	.word	0x40020000

08002adc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 8002ae6:	f002 f8e5 	bl	8004cb4 <HAL_GetTick>
 8002aea:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 8002aec:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0x58>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2bc8      	cmp	r3, #200	@ 0xc8
 8002af6:	d919      	bls.n	8002b2c <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d109      	bne.n	8002b12 <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 8002b04:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <HAL_GPIO_EXTI_Callback+0x60>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 8002b0a:	480d      	ldr	r0, [pc, #52]	@ (8002b40 <HAL_GPIO_EXTI_Callback+0x64>)
 8002b0c:	f7fe ff00 	bl	8001910 <send_bluetooth_message>
 8002b10:	e009      	b.n	8002b26 <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b18:	d105      	bne.n	8002b26 <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 8002b20:	4808      	ldr	r0, [pc, #32]	@ (8002b44 <HAL_GPIO_EXTI_Callback+0x68>)
 8002b22:	f7fe fef5 	bl	8001910 <send_bluetooth_message>
        }
        last_press = current_time;
 8002b26:	4a03      	ldr	r2, [pc, #12]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6013      	str	r3, [r2, #0]
    }
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20001474 	.word	0x20001474
 8002b38:	20001460 	.word	0x20001460
 8002b3c:	20001461 	.word	0x20001461
 8002b40:	0800d2f0 	.word	0x0800d2f0
 8002b44:	0800d308 	.word	0x0800d308

08002b48 <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b60:	2303      	movs	r3, #3
 8002b62:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4812      	ldr	r0, [pc, #72]	@ (8002bb8 <verify_adc_gpio_configuration+0x70>)
 8002b6e:	f002 fe67 	bl	8005840 <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b72:	2304      	movs	r3, #4
 8002b74:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	480f      	ldr	r0, [pc, #60]	@ (8002bb8 <verify_adc_gpio_configuration+0x70>)
 8002b7c:	f002 fe60 	bl	8005840 <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b80:	2308      	movs	r3, #8
 8002b82:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	480b      	ldr	r0, [pc, #44]	@ (8002bb8 <verify_adc_gpio_configuration+0x70>)
 8002b8a:	f002 fe59 	bl	8005840 <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b8e:	2310      	movs	r3, #16
 8002b90:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4808      	ldr	r0, [pc, #32]	@ (8002bb8 <verify_adc_gpio_configuration+0x70>)
 8002b98:	f002 fe52 	bl	8005840 <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4804      	ldr	r0, [pc, #16]	@ (8002bb8 <verify_adc_gpio_configuration+0x70>)
 8002ba6:	f002 fe4b 	bl	8005840 <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 8002baa:	4804      	ldr	r0, [pc, #16]	@ (8002bbc <verify_adc_gpio_configuration+0x74>)
 8002bac:	f7fe feb0 	bl	8001910 <send_bluetooth_message>
}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	0800d320 	.word	0x0800d320

08002bc0 <calibrate_adc>:

// Add this after MX_ADC1_Init() in main()
void calibrate_adc(void) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
    send_bluetooth_message("Calibrating ADC1...\r\n");
 8002bc4:	4808      	ldr	r0, [pc, #32]	@ (8002be8 <calibrate_adc+0x28>)
 8002bc6:	f7fe fea3 	bl	8001910 <send_bluetooth_message>
    // For STM32F4, use offset calibration if available
    // Note: STM32F4 doesn't have automatic calibration like F3/L4
    // But we can do manual offset calibration

    // Ensure ADC is powered up
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002bca:	4808      	ldr	r0, [pc, #32]	@ (8002bec <calibrate_adc+0x2c>)
 8002bcc:	f002 f8a2 	bl	8004d14 <HAL_ADC_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <calibrate_adc+0x1e>
        send_bluetooth_message("❌ ADC initialization failed!\r\n");
 8002bd6:	4806      	ldr	r0, [pc, #24]	@ (8002bf0 <calibrate_adc+0x30>)
 8002bd8:	f7fe fe9a 	bl	8001910 <send_bluetooth_message>
        return;
 8002bdc:	e002      	b.n	8002be4 <calibrate_adc+0x24>
    }

    send_bluetooth_message("✅ ADC calibration completed\r\n");
 8002bde:	4805      	ldr	r0, [pc, #20]	@ (8002bf4 <calibrate_adc+0x34>)
 8002be0:	f7fe fe96 	bl	8001910 <send_bluetooth_message>
}
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	0800d348 	.word	0x0800d348
 8002bec:	20000210 	.word	0x20000210
 8002bf0:	0800d360 	.word	0x0800d360
 8002bf4:	0800d384 	.word	0x0800d384

08002bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfc:	b672      	cpsid	i
}
 8002bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002c00:	2110      	movs	r1, #16
 8002c02:	4806      	ldr	r0, [pc, #24]	@ (8002c1c <Error_Handler+0x24>)
 8002c04:	f002 ffb9 	bl	8005b7a <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8002c08:	2120      	movs	r1, #32
 8002c0a:	4804      	ldr	r0, [pc, #16]	@ (8002c1c <Error_Handler+0x24>)
 8002c0c:	f002 ffb5 	bl	8005b7a <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8002c10:	2064      	movs	r0, #100	@ 0x64
 8002c12:	f002 f85b 	bl	8004ccc <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002c16:	bf00      	nop
 8002c18:	e7f2      	b.n	8002c00 <Error_Handler+0x8>
 8002c1a:	bf00      	nop
 8002c1c:	40020400 	.word	0x40020400

08002c20 <championship_micromouse_init>:

/**
 * @brief Initialize championship micromouse system with MMS integration
 */
void championship_micromouse_init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
    // Initialize championship maze
    initialize_championship_maze();
 8002c24:	f000 f842 	bl	8002cac <initialize_championship_maze>

    // Initialize robot state
    robot.x = 0;
 8002c28:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <championship_micromouse_init+0x6c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	@ (8002c8c <championship_micromouse_init+0x6c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 8002c34:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <championship_micromouse_init+0x6c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 8002c3a:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <championship_micromouse_init+0x6c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 8002c40:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <championship_micromouse_init+0x6c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 8002c46:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <championship_micromouse_init+0x6c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]

    // Initialize sensors
    memset(&sensors, 0, sizeof(sensors));
 8002c4c:	220e      	movs	r2, #14
 8002c4e:	2100      	movs	r1, #0
 8002c50:	480f      	ldr	r0, [pc, #60]	@ (8002c90 <championship_micromouse_init+0x70>)
 8002c52:	f007 f8e1 	bl	8009e18 <memset>
    memset(&gyro, 0, sizeof(gyro));
 8002c56:	2212      	movs	r2, #18
 8002c58:	2100      	movs	r1, #0
 8002c5a:	480e      	ldr	r0, [pc, #56]	@ (8002c94 <championship_micromouse_init+0x74>)
 8002c5c:	f007 f8dc 	bl	8009e18 <memset>
    memset(&encoders, 0, sizeof(encoders));
 8002c60:	2210      	movs	r2, #16
 8002c62:	2100      	movs	r1, #0
 8002c64:	480c      	ldr	r0, [pc, #48]	@ (8002c98 <championship_micromouse_init+0x78>)
 8002c66:	f007 f8d7 	bl	8009e18 <memset>

    // Initialize championship path analysis
    exploration_steps = 0;
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <championship_micromouse_init+0x7c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <championship_micromouse_init+0x80>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

    // Initialize gyroscope
    mpu9250_init();
 8002c76:	f7fe ff6b 	bl	8001b50 <mpu9250_init>

    send_bluetooth_message("Championship micromouse system initialized\r\n");
 8002c7a:	480a      	ldr	r0, [pc, #40]	@ (8002ca4 <championship_micromouse_init+0x84>)
 8002c7c:	f7fe fe48 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("Based on MMS championship algorithms\r\n");
 8002c80:	4809      	ldr	r0, [pc, #36]	@ (8002ca8 <championship_micromouse_init+0x88>)
 8002c82:	f7fe fe45 	bl	8001910 <send_bluetooth_message>
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20001418 	.word	0x20001418
 8002c90:	2000142c 	.word	0x2000142c
 8002c94:	2000143c 	.word	0x2000143c
 8002c98:	20001450 	.word	0x20001450
 8002c9c:	20001464 	.word	0x20001464
 8002ca0:	20001468 	.word	0x20001468
 8002ca4:	0800d3a4 	.word	0x0800d3a4
 8002ca8:	0800d3d4 	.word	0x0800d3d4

08002cac <initialize_championship_maze>:

/**
 * @brief Initialize maze with championship settings (MMS style)
 */
void initialize_championship_maze(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
    // Initialize all cells
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e03e      	b.n	8002d36 <initialize_championship_maze+0x8a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	e035      	b.n	8002d2a <initialize_championship_maze+0x7e>
            maze[x][y].distance = MAX_DISTANCE;
 8002cbe:	4939      	ldr	r1, [pc, #228]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	011a      	lsls	r2, r3, #4
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	440b      	add	r3, r1
 8002ccc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002cd0:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 8002cd2:	4934      	ldr	r1, [pc, #208]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	011a      	lsls	r2, r3, #4
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4413      	add	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	440b      	add	r3, r1
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 8002ce6:	492f      	ldr	r1, [pc, #188]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	011a      	lsls	r2, r3, #4
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4413      	add	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	440b      	add	r3, r1
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	e00e      	b.n	8002d1e <initialize_championship_maze+0x72>
                maze[x][y].walls[i] = false;
 8002d00:	4928      	ldr	r1, [pc, #160]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	011a      	lsls	r2, r3, #4
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4413      	add	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	18ca      	adds	r2, r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	3305      	adds	r3, #5
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	dded      	ble.n	8002d00 <initialize_championship_maze+0x54>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	3301      	adds	r3, #1
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	ddc6      	ble.n	8002cbe <initialize_championship_maze+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	ddbd      	ble.n	8002cb8 <initialize_championship_maze+0xc>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	e01f      	b.n	8002d82 <initialize_championship_maze+0xd6>
        maze[i][0].walls[SOUTH] = true;           // South boundary
 8002d42:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	4413      	add	r3, r2
 8002d4a:	3307      	adds	r3, #7
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true; // North boundary
 8002d50:	4a14      	ldr	r2, [pc, #80]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	4413      	add	r3, r2
 8002d58:	33f5      	adds	r3, #245	@ 0xf5
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;            // West boundary
 8002d5e:	4a11      	ldr	r2, [pc, #68]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	4413      	add	r3, r2
 8002d66:	3308      	adds	r3, #8
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;  // East boundary
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	dddc      	ble.n	8002d42 <initialize_championship_maze+0x96>
    }

    // Mark start position as visited
    maze[0][0].visited = true;
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <initialize_championship_maze+0xf8>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	60da      	str	r2, [r3, #12]

    send_bluetooth_message("Championship maze initialized with boundary walls\r\n");
 8002d94:	4804      	ldr	r0, [pc, #16]	@ (8002da8 <initialize_championship_maze+0xfc>)
 8002d96:	f7fe fdbb 	bl	8001910 <send_bluetooth_message>
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000418 	.word	0x20000418
 8002da8:	0800d3fc 	.word	0x0800d3fc

08002dac <championship_flood_fill>:
/**
 * @brief Championship flood fill from GOAL position (MMS algorithm)
 * This is the key difference - we flood from destination, not robot
 */
void championship_flood_fill(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 8002db2:	af00      	add	r7, sp, #0
    // Reset all distances
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8002dba:	e01d      	b.n	8002df8 <championship_flood_fill+0x4c>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8002dc2:	e010      	b.n	8002de6 <championship_flood_fill+0x3a>
            maze[x][y].distance = MAX_DISTANCE;
 8002dc4:	49c8      	ldr	r1, [pc, #800]	@ (80030e8 <championship_flood_fill+0x33c>)
 8002dc6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8002dca:	011a      	lsls	r2, r3, #4
 8002dcc:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8002dd0:	4413      	add	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	440b      	add	r3, r1
 8002dd6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002dda:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002ddc:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8002de0:	3301      	adds	r3, #1
 8002de2:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8002de6:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	ddea      	ble.n	8002dc4 <championship_flood_fill+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002dee:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8002df2:	3301      	adds	r3, #1
 8002df4:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8002df8:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	dddd      	ble.n	8002dbc <championship_flood_fill+0x10>
        }
    }

    // Set goal distances to 0
    if (!robot.center_reached) {
 8002e00:	4bba      	ldr	r3, [pc, #744]	@ (80030ec <championship_flood_fill+0x340>)
 8002e02:	7b1b      	ldrb	r3, [r3, #12]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d02c      	beq.n	8002e68 <championship_flood_fill+0xbc>
        // Exploring to center - flood from center
        maze[goal_x1][goal_y1].distance = 0;
 8002e0e:	4bb8      	ldr	r3, [pc, #736]	@ (80030f0 <championship_flood_fill+0x344>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4bb8      	ldr	r3, [pc, #736]	@ (80030f4 <championship_flood_fill+0x348>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	49b4      	ldr	r1, [pc, #720]	@ (80030e8 <championship_flood_fill+0x33c>)
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	4413      	add	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	440b      	add	r3, r1
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
        maze[goal_x2][goal_y1].distance = 0;
 8002e24:	4bb4      	ldr	r3, [pc, #720]	@ (80030f8 <championship_flood_fill+0x34c>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4bb2      	ldr	r3, [pc, #712]	@ (80030f4 <championship_flood_fill+0x348>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	49ae      	ldr	r1, [pc, #696]	@ (80030e8 <championship_flood_fill+0x33c>)
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	4413      	add	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	440b      	add	r3, r1
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
        maze[goal_x1][goal_y2].distance = 0;
 8002e3a:	4bad      	ldr	r3, [pc, #692]	@ (80030f0 <championship_flood_fill+0x344>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4baf      	ldr	r3, [pc, #700]	@ (80030fc <championship_flood_fill+0x350>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	49a9      	ldr	r1, [pc, #676]	@ (80030e8 <championship_flood_fill+0x33c>)
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	4413      	add	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	440b      	add	r3, r1
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
        maze[goal_x2][goal_y2].distance = 0;
 8002e50:	4ba9      	ldr	r3, [pc, #676]	@ (80030f8 <championship_flood_fill+0x34c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4ba9      	ldr	r3, [pc, #676]	@ (80030fc <championship_flood_fill+0x350>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	49a3      	ldr	r1, [pc, #652]	@ (80030e8 <championship_flood_fill+0x33c>)
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	4413      	add	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	440b      	add	r3, r1
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e002      	b.n	8002e6e <championship_flood_fill+0xc2>
    } else {
        // Returning to start - flood from start
        maze[0][0].distance = 0;
 8002e68:	4b9f      	ldr	r3, [pc, #636]	@ (80030e8 <championship_flood_fill+0x33c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    }

    // Queue implementation for BFS flood fill
    int queue_x[256], queue_y[256];
    int queue_head = 0, queue_tail = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820

    if (!robot.center_reached) {
 8002e7a:	4b9c      	ldr	r3, [pc, #624]	@ (80030ec <championship_flood_fill+0x340>)
 8002e7c:	7b1b      	ldrb	r3, [r3, #12]
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d05c      	beq.n	8002f42 <championship_flood_fill+0x196>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y1;
 8002e88:	4b99      	ldr	r3, [pc, #612]	@ (80030f0 <championship_flood_fill+0x344>)
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002e90:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002e94:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e9c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002ea6:	4a93      	ldr	r2, [pc, #588]	@ (80030f4 <championship_flood_fill+0x348>)
 8002ea8:	6811      	ldr	r1, [r2, #0]
 8002eaa:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002eae:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002eb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y1;
 8002eb6:	4b90      	ldr	r3, [pc, #576]	@ (80030f8 <championship_flood_fill+0x34c>)
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002ebe:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002ec2:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002eca:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002ed4:	4a87      	ldr	r2, [pc, #540]	@ (80030f4 <championship_flood_fill+0x348>)
 8002ed6:	6811      	ldr	r1, [r2, #0]
 8002ed8:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002edc:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002ee0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y2;
 8002ee4:	4b82      	ldr	r3, [pc, #520]	@ (80030f0 <championship_flood_fill+0x344>)
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002eec:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002ef0:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002ef8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002f02:	4a7e      	ldr	r2, [pc, #504]	@ (80030fc <championship_flood_fill+0x350>)
 8002f04:	6811      	ldr	r1, [r2, #0]
 8002f06:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002f0a:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y2;
 8002f12:	4b79      	ldr	r3, [pc, #484]	@ (80030f8 <championship_flood_fill+0x34c>)
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002f1a:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002f1e:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f26:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002f30:	4a72      	ldr	r2, [pc, #456]	@ (80030fc <championship_flood_fill+0x350>)
 8002f32:	6811      	ldr	r1, [r2, #0]
 8002f34:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002f38:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002f3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002f40:	e014      	b.n	8002f6c <championship_flood_fill+0x1c0>
    } else {
        queue_x[queue_tail] = 0; queue_y[queue_tail++] = 0;
 8002f42:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002f46:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002f4a:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002f4e:	2100      	movs	r1, #0
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f54:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002f5e:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002f62:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002f66:	2100      	movs	r1, #0
 8002f68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    int updates = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c

    // Championship flood fill algorithm
    while (queue_head < queue_tail) {
 8002f72:	e0a7      	b.n	80030c4 <championship_flood_fill+0x318>
        int x = queue_x[queue_head];
 8002f74:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002f78:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002f7c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8002f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f84:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
        int y = queue_y[queue_head++];
 8002f88:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	f8c7 2824 	str.w	r2, [r7, #2084]	@ 0x824
 8002f92:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002f96:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8002fa8:	e087      	b.n	80030ba <championship_flood_fill+0x30e>
            int nx = x + dx[dir];
 8002faa:	4a55      	ldr	r2, [pc, #340]	@ (8003100 <championship_flood_fill+0x354>)
 8002fac:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb4:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8002fb8:	4413      	add	r3, r2
 8002fba:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
            int ny = y + dy[dir];
 8002fbe:	4a51      	ldr	r2, [pc, #324]	@ (8003104 <championship_flood_fill+0x358>)
 8002fc0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc8:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 8002fcc:	4413      	add	r3, r2
 8002fce:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

            // Check bounds and walls
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8002fd2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	db6a      	blt.n	80030b0 <championship_flood_fill+0x304>
 8002fda:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8002fde:	2b0f      	cmp	r3, #15
 8002fe0:	dc66      	bgt.n	80030b0 <championship_flood_fill+0x304>
 8002fe2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db62      	blt.n	80030b0 <championship_flood_fill+0x304>
 8002fea:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8002fee:	2b0f      	cmp	r3, #15
 8002ff0:	dc5e      	bgt.n	80030b0 <championship_flood_fill+0x304>
                !maze[x][y].walls[dir]) {
 8002ff2:	493d      	ldr	r1, [pc, #244]	@ (80030e8 <championship_flood_fill+0x33c>)
 8002ff4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002ff8:	011a      	lsls	r2, r3, #4
 8002ffa:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002ffe:	4413      	add	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	18ca      	adds	r2, r1, r3
 8003004:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8003008:	4413      	add	r3, r2
 800300a:	3305      	adds	r3, #5
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	f083 0301 	eor.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	d04b      	beq.n	80030b0 <championship_flood_fill+0x304>

                int new_dist = maze[x][y].distance + 1;
 8003018:	4933      	ldr	r1, [pc, #204]	@ (80030e8 <championship_flood_fill+0x33c>)
 800301a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800301e:	011a      	lsls	r2, r3, #4
 8003020:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8003024:	4413      	add	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	440b      	add	r3, r1
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804

                // Update if we found a shorter path
                if (new_dist < maze[nx][ny].distance) {
 8003032:	492d      	ldr	r1, [pc, #180]	@ (80030e8 <championship_flood_fill+0x33c>)
 8003034:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8003038:	011a      	lsls	r2, r3, #4
 800303a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800303e:	4413      	add	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	440b      	add	r3, r1
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 800304a:	429a      	cmp	r2, r3
 800304c:	da30      	bge.n	80030b0 <championship_flood_fill+0x304>
                    maze[nx][ny].distance = new_dist;
 800304e:	4926      	ldr	r1, [pc, #152]	@ (80030e8 <championship_flood_fill+0x33c>)
 8003050:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8003054:	011a      	lsls	r2, r3, #4
 8003056:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800305a:	4413      	add	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	440b      	add	r3, r1
 8003060:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8003064:	601a      	str	r2, [r3, #0]
                    if (queue_tail < 255) {
 8003066:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800306a:	2bfe      	cmp	r3, #254	@ 0xfe
 800306c:	dc1c      	bgt.n	80030a8 <championship_flood_fill+0x2fc>
                        queue_x[queue_tail] = nx;
 800306e:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8003072:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8003076:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 800307a:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 800307e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        queue_y[queue_tail++] = ny;
 8003082:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 800308c:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8003090:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8003094:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8003098:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    } else {
                        send_bluetooth_message("Queue overflow!\r\n");
                        break;
                    }
                    updates++;
 800309c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80030a0:	3301      	adds	r3, #1
 80030a2:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 80030a6:	e003      	b.n	80030b0 <championship_flood_fill+0x304>
                        send_bluetooth_message("Queue overflow!\r\n");
 80030a8:	4817      	ldr	r0, [pc, #92]	@ (8003108 <championship_flood_fill+0x35c>)
 80030aa:	f7fe fc31 	bl	8001910 <send_bluetooth_message>
                        break;
 80030ae:	e009      	b.n	80030c4 <championship_flood_fill+0x318>
        for (int dir = 0; dir < 4; dir++) {
 80030b0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80030b4:	3301      	adds	r3, #1
 80030b6:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 80030ba:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80030be:	2b03      	cmp	r3, #3
 80030c0:	f77f af73 	ble.w	8002faa <championship_flood_fill+0x1fe>
    while (queue_head < queue_tail) {
 80030c4:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 80030c8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80030cc:	429a      	cmp	r2, r3
 80030ce:	f6ff af51 	blt.w	8002f74 <championship_flood_fill+0x1c8>
            }
        }
    }

    // Debug output via Bluetooth
    send_bluetooth_printf("Championship flood fill: %d updates\r\n", updates);
 80030d2:	f8d7 181c 	ldr.w	r1, [r7, #2076]	@ 0x81c
 80030d6:	480d      	ldr	r0, [pc, #52]	@ (800310c <championship_flood_fill+0x360>)
 80030d8:	f7fe fc30 	bl	800193c <send_bluetooth_printf>
}
 80030dc:	bf00      	nop
 80030de:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000418 	.word	0x20000418
 80030ec:	20001418 	.word	0x20001418
 80030f0:	0800de88 	.word	0x0800de88
 80030f4:	0800de8c 	.word	0x0800de8c
 80030f8:	0800de90 	.word	0x0800de90
 80030fc:	0800de94 	.word	0x0800de94
 8003100:	0800de68 	.word	0x0800de68
 8003104:	0800de78 	.word	0x0800de78
 8003108:	0800d430 	.word	0x0800d430
 800310c:	0800d444 	.word	0x0800d444

08003110 <get_championship_direction>:

/**
 * @brief Championship direction selection - NEVER gets stuck (MMS algorithm)
 */
int get_championship_direction(void)
{
 8003110:	b480      	push	{r7}
 8003112:	b093      	sub	sp, #76	@ 0x4c
 8003114:	af00      	add	r7, sp, #0
    int best_dir = robot.direction; // Default to current direction
 8003116:	4b88      	ldr	r3, [pc, #544]	@ (8003338 <get_championship_direction+0x228>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 800311c:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003120:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 8003122:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Priority order: straight, right, left, back
    int priority_dirs[4];
    priority_dirs[0] = robot.direction;
 800312e:	4b82      	ldr	r3, [pc, #520]	@ (8003338 <get_championship_direction+0x228>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	603b      	str	r3, [r7, #0]
    priority_dirs[1] = (robot.direction + 1) % 4;
 8003134:	4b80      	ldr	r3, [pc, #512]	@ (8003338 <get_championship_direction+0x228>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	425a      	negs	r2, r3
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	f002 0203 	and.w	r2, r2, #3
 8003144:	bf58      	it	pl
 8003146:	4253      	negpl	r3, r2
 8003148:	607b      	str	r3, [r7, #4]
    priority_dirs[2] = (robot.direction + 3) % 4;
 800314a:	4b7b      	ldr	r3, [pc, #492]	@ (8003338 <get_championship_direction+0x228>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	3303      	adds	r3, #3
 8003150:	425a      	negs	r2, r3
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	bf58      	it	pl
 800315c:	4253      	negpl	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
    priority_dirs[3] = (robot.direction + 2) % 4;
 8003160:	4b75      	ldr	r3, [pc, #468]	@ (8003338 <get_championship_direction+0x228>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	3302      	adds	r3, #2
 8003166:	425a      	negs	r2, r3
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	f002 0203 	and.w	r2, r2, #3
 8003170:	bf58      	it	pl
 8003172:	4253      	negpl	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

    // First pass: look for unvisited cells
    for (int p = 0; p < 4; p++) {
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
 800317a:	e05b      	b.n	8003234 <get_championship_direction+0x124>
        int dir = priority_dirs[p];
 800317c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	3348      	adds	r3, #72	@ 0x48
 8003182:	443b      	add	r3, r7
 8003184:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003188:	61bb      	str	r3, [r7, #24]
        int nx = robot.x + dx[dir];
 800318a:	4b6b      	ldr	r3, [pc, #428]	@ (8003338 <get_championship_direction+0x228>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	496b      	ldr	r1, [pc, #428]	@ (800333c <get_championship_direction+0x22c>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003196:	4413      	add	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 800319a:	4b67      	ldr	r3, [pc, #412]	@ (8003338 <get_championship_direction+0x228>)
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4968      	ldr	r1, [pc, #416]	@ (8003340 <get_championship_direction+0x230>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031a6:	4413      	add	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]

        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db3e      	blt.n	800322e <get_championship_direction+0x11e>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	dc3b      	bgt.n	800322e <get_championship_direction+0x11e>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db38      	blt.n	800322e <get_championship_direction+0x11e>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	dc35      	bgt.n	800322e <get_championship_direction+0x11e>
            !maze[robot.x][robot.y].walls[dir]) {
 80031c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003338 <get_championship_direction+0x228>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003338 <get_championship_direction+0x228>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	495e      	ldr	r1, [pc, #376]	@ (8003344 <get_championship_direction+0x234>)
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	18ca      	adds	r2, r1, r3
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	3305      	adds	r3, #5
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	f083 0301 	eor.w	r3, r3, #1
 80031e0:	b2db      	uxtb	r3, r3
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d023      	beq.n	800322e <get_championship_direction+0x11e>

            // Prefer unvisited cells
            if (maze[nx][ny].visit_count == 0) {
 80031e6:	4957      	ldr	r1, [pc, #348]	@ (8003344 <get_championship_direction+0x234>)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	011a      	lsls	r2, r3, #4
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	440b      	add	r3, r1
 80031f4:	330c      	adds	r3, #12
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d118      	bne.n	800322e <get_championship_direction+0x11e>
                found_unvisited = true;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                if (maze[nx][ny].distance < min_distance) {
 8003202:	4950      	ldr	r1, [pc, #320]	@ (8003344 <get_championship_direction+0x234>)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	011a      	lsls	r2, r3, #4
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	440b      	add	r3, r1
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003214:	429a      	cmp	r2, r3
 8003216:	dd0a      	ble.n	800322e <get_championship_direction+0x11e>
                    min_distance = maze[nx][ny].distance;
 8003218:	494a      	ldr	r1, [pc, #296]	@ (8003344 <get_championship_direction+0x234>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	011a      	lsls	r2, r3, #4
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	440b      	add	r3, r1
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	643b      	str	r3, [r7, #64]	@ 0x40
                    best_dir = dir;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	647b      	str	r3, [r7, #68]	@ 0x44
    for (int p = 0; p < 4; p++) {
 800322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003230:	3301      	adds	r3, #1
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	2b03      	cmp	r3, #3
 8003238:	dda0      	ble.n	800317c <get_championship_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited, find least visited with lowest distance
    if (!found_unvisited) {
 800323a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800323e:	f083 0301 	eor.w	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d06f      	beq.n	8003328 <get_championship_direction+0x218>
        for (int p = 0; p < 4; p++) {
 8003248:	2300      	movs	r3, #0
 800324a:	633b      	str	r3, [r7, #48]	@ 0x30
 800324c:	e069      	b.n	8003322 <get_championship_direction+0x212>
            int dir = priority_dirs[p];
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	3348      	adds	r3, #72	@ 0x48
 8003254:	443b      	add	r3, r7
 8003256:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int nx = robot.x + dx[dir];
 800325c:	4b36      	ldr	r3, [pc, #216]	@ (8003338 <get_championship_direction+0x228>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4936      	ldr	r1, [pc, #216]	@ (800333c <get_championship_direction+0x22c>)
 8003262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003264:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003268:	4413      	add	r3, r2
 800326a:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 800326c:	4b32      	ldr	r3, [pc, #200]	@ (8003338 <get_championship_direction+0x228>)
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	4933      	ldr	r1, [pc, #204]	@ (8003340 <get_championship_direction+0x230>)
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003278:	4413      	add	r3, r2
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	db4c      	blt.n	800331c <get_championship_direction+0x20c>
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	2b0f      	cmp	r3, #15
 8003286:	dc49      	bgt.n	800331c <get_championship_direction+0x20c>
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	db46      	blt.n	800331c <get_championship_direction+0x20c>
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	2b0f      	cmp	r3, #15
 8003292:	dc43      	bgt.n	800331c <get_championship_direction+0x20c>
                !maze[robot.x][robot.y].walls[dir]) {
 8003294:	4b28      	ldr	r3, [pc, #160]	@ (8003338 <get_championship_direction+0x228>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <get_championship_direction+0x228>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4929      	ldr	r1, [pc, #164]	@ (8003344 <get_championship_direction+0x234>)
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	4413      	add	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	18ca      	adds	r2, r1, r3
 80032a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a8:	4413      	add	r3, r2
 80032aa:	3305      	adds	r3, #5
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	f083 0301 	eor.w	r3, r3, #1
 80032b2:	b2db      	uxtb	r3, r3
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d031      	beq.n	800331c <get_championship_direction+0x20c>

                int neighbor_dist = maze[nx][ny].distance;
 80032b8:	4922      	ldr	r1, [pc, #136]	@ (8003344 <get_championship_direction+0x234>)
 80032ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032bc:	011a      	lsls	r2, r3, #4
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	4413      	add	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	440b      	add	r3, r1
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	623b      	str	r3, [r7, #32]
                int neighbor_visits = maze[nx][ny].visit_count;
 80032ca:	491e      	ldr	r1, [pc, #120]	@ (8003344 <get_championship_direction+0x234>)
 80032cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ce:	011a      	lsls	r2, r3, #4
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	4413      	add	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	440b      	add	r3, r1
 80032d8:	330c      	adds	r3, #12
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61fb      	str	r3, [r7, #28]

                // Choose based on distance first, then visit count
                if (neighbor_dist < min_distance ||
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e2:	429a      	cmp	r2, r3
 80032e4:	db14      	blt.n	8003310 <get_championship_direction+0x200>
 80032e6:	6a3a      	ldr	r2, [r7, #32]
 80032e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d103      	bne.n	80032f6 <get_championship_direction+0x1e6>
                    (neighbor_dist == min_distance && neighbor_visits < min_visits) ||
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f2:	429a      	cmp	r2, r3
 80032f4:	db0c      	blt.n	8003310 <get_championship_direction+0x200>
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d10e      	bne.n	800331c <get_championship_direction+0x20c>
                    (neighbor_dist == min_distance && neighbor_visits == min_visits && dir == robot.direction)) {
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003302:	429a      	cmp	r2, r3
 8003304:	d10a      	bne.n	800331c <get_championship_direction+0x20c>
 8003306:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <get_championship_direction+0x228>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800330c:	429a      	cmp	r2, r3
 800330e:	d105      	bne.n	800331c <get_championship_direction+0x20c>
                    min_distance = neighbor_dist;
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	643b      	str	r3, [r7, #64]	@ 0x40
                    min_visits = neighbor_visits;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    best_dir = dir;
 8003318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331a:	647b      	str	r3, [r7, #68]	@ 0x44
        for (int p = 0; p < 4; p++) {
 800331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331e:	3301      	adds	r3, #1
 8003320:	633b      	str	r3, [r7, #48]	@ 0x30
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	2b03      	cmp	r3, #3
 8003326:	dd92      	ble.n	800324e <get_championship_direction+0x13e>
                }
            }
        }
    }

    return best_dir;
 8003328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800332a:	4618      	mov	r0, r3
 800332c:	374c      	adds	r7, #76	@ 0x4c
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20001418 	.word	0x20001418
 800333c:	0800de68 	.word	0x0800de68
 8003340:	0800de78 	.word	0x0800de78
 8003344:	20000418 	.word	0x20000418

08003348 <championship_update_walls>:

/**
 * @brief Update walls based on sensor readings (MMS style)
 */
void championship_update_walls(void)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b08b      	sub	sp, #44	@ 0x2c
 800334c:	af02      	add	r7, sp, #8
    // Update sensors first
    update_sensors();
 800334e:	f000 fee1 	bl	8004114 <update_sensors>

    // Update walls based on current direction
    if (sensors.wall_front) {
 8003352:	4b8a      	ldr	r3, [pc, #552]	@ (800357c <championship_update_walls+0x234>)
 8003354:	7a9b      	ldrb	r3, [r3, #10]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d041      	beq.n	80033de <championship_update_walls+0x96>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 800335a:	4b89      	ldr	r3, [pc, #548]	@ (8003580 <championship_update_walls+0x238>)
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	4b88      	ldr	r3, [pc, #544]	@ (8003580 <championship_update_walls+0x238>)
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4b87      	ldr	r3, [pc, #540]	@ (8003580 <championship_update_walls+0x238>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4887      	ldr	r0, [pc, #540]	@ (8003584 <championship_update_walls+0x23c>)
 8003368:	0109      	lsls	r1, r1, #4
 800336a:	440a      	add	r2, r1
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	4402      	add	r2, r0
 8003370:	4413      	add	r3, r2
 8003372:	3305      	adds	r3, #5
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 8003378:	4b81      	ldr	r3, [pc, #516]	@ (8003580 <championship_update_walls+0x238>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b80      	ldr	r3, [pc, #512]	@ (8003580 <championship_update_walls+0x238>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4981      	ldr	r1, [pc, #516]	@ (8003588 <championship_update_walls+0x240>)
 8003382:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003386:	4413      	add	r3, r2
 8003388:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 800338a:	4b7d      	ldr	r3, [pc, #500]	@ (8003580 <championship_update_walls+0x238>)
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4b7c      	ldr	r3, [pc, #496]	@ (8003580 <championship_update_walls+0x238>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	497e      	ldr	r1, [pc, #504]	@ (800358c <championship_update_walls+0x244>)
 8003394:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003398:	4413      	add	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db1d      	blt.n	80033de <championship_update_walls+0x96>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b0f      	cmp	r3, #15
 80033a6:	dc1a      	bgt.n	80033de <championship_update_walls+0x96>
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db17      	blt.n	80033de <championship_update_walls+0x96>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0f      	cmp	r3, #15
 80033b2:	dc14      	bgt.n	80033de <championship_update_walls+0x96>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 80033b4:	4b72      	ldr	r3, [pc, #456]	@ (8003580 <championship_update_walls+0x238>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	3302      	adds	r3, #2
 80033ba:	425a      	negs	r2, r3
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	f002 0203 	and.w	r2, r2, #3
 80033c4:	bf58      	it	pl
 80033c6:	4253      	negpl	r3, r2
 80033c8:	486e      	ldr	r0, [pc, #440]	@ (8003584 <championship_update_walls+0x23c>)
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	0111      	lsls	r1, r2, #4
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	440a      	add	r2, r1
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	4402      	add	r2, r0
 80033d6:	4413      	add	r3, r2
 80033d8:	3305      	adds	r3, #5
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 80033de:	4b67      	ldr	r3, [pc, #412]	@ (800357c <championship_update_walls+0x234>)
 80033e0:	7adb      	ldrb	r3, [r3, #11]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d048      	beq.n	8003478 <championship_update_walls+0x130>
        int left_dir = (robot.direction + 3) % 4;
 80033e6:	4b66      	ldr	r3, [pc, #408]	@ (8003580 <championship_update_walls+0x238>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	3303      	adds	r3, #3
 80033ec:	425a      	negs	r2, r3
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	f002 0203 	and.w	r2, r2, #3
 80033f6:	bf58      	it	pl
 80033f8:	4253      	negpl	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 80033fc:	4b60      	ldr	r3, [pc, #384]	@ (8003580 <championship_update_walls+0x238>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b5f      	ldr	r3, [pc, #380]	@ (8003580 <championship_update_walls+0x238>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	495f      	ldr	r1, [pc, #380]	@ (8003584 <championship_update_walls+0x23c>)
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	4413      	add	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	18ca      	adds	r2, r1, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4413      	add	r3, r2
 8003412:	3305      	adds	r3, #5
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
        int nx = robot.x + dx[left_dir];
 8003418:	4b59      	ldr	r3, [pc, #356]	@ (8003580 <championship_update_walls+0x238>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	495a      	ldr	r1, [pc, #360]	@ (8003588 <championship_update_walls+0x240>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003424:	4413      	add	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 8003428:	4b55      	ldr	r3, [pc, #340]	@ (8003580 <championship_update_walls+0x238>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4957      	ldr	r1, [pc, #348]	@ (800358c <championship_update_walls+0x244>)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003434:	4413      	add	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	db1c      	blt.n	8003478 <championship_update_walls+0x130>
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b0f      	cmp	r3, #15
 8003442:	dc19      	bgt.n	8003478 <championship_update_walls+0x130>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db16      	blt.n	8003478 <championship_update_walls+0x130>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b0f      	cmp	r3, #15
 800344e:	dc13      	bgt.n	8003478 <championship_update_walls+0x130>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3302      	adds	r3, #2
 8003454:	425a      	negs	r2, r3
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	f002 0203 	and.w	r2, r2, #3
 800345e:	bf58      	it	pl
 8003460:	4253      	negpl	r3, r2
 8003462:	4848      	ldr	r0, [pc, #288]	@ (8003584 <championship_update_walls+0x23c>)
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	0111      	lsls	r1, r2, #4
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	440a      	add	r2, r1
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	4402      	add	r2, r0
 8003470:	4413      	add	r3, r2
 8003472:	3305      	adds	r3, #5
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 8003478:	4b40      	ldr	r3, [pc, #256]	@ (800357c <championship_update_walls+0x234>)
 800347a:	7b1b      	ldrb	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d048      	beq.n	8003512 <championship_update_walls+0x1ca>
        int right_dir = (robot.direction + 1) % 4;
 8003480:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <championship_update_walls+0x238>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	3301      	adds	r3, #1
 8003486:	425a      	negs	r2, r3
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	f002 0203 	and.w	r2, r2, #3
 8003490:	bf58      	it	pl
 8003492:	4253      	negpl	r3, r2
 8003494:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 8003496:	4b3a      	ldr	r3, [pc, #232]	@ (8003580 <championship_update_walls+0x238>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <championship_update_walls+0x238>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4939      	ldr	r1, [pc, #228]	@ (8003584 <championship_update_walls+0x23c>)
 80034a0:	0112      	lsls	r2, r2, #4
 80034a2:	4413      	add	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	18ca      	adds	r2, r1, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4413      	add	r3, r2
 80034ac:	3305      	adds	r3, #5
 80034ae:	2201      	movs	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
        int nx = robot.x + dx[right_dir];
 80034b2:	4b33      	ldr	r3, [pc, #204]	@ (8003580 <championship_update_walls+0x238>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4934      	ldr	r1, [pc, #208]	@ (8003588 <championship_update_walls+0x240>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034be:	4413      	add	r3, r2
 80034c0:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 80034c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003580 <championship_update_walls+0x238>)
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	4931      	ldr	r1, [pc, #196]	@ (800358c <championship_update_walls+0x244>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034ce:	4413      	add	r3, r2
 80034d0:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db1c      	blt.n	8003512 <championship_update_walls+0x1ca>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	dc19      	bgt.n	8003512 <championship_update_walls+0x1ca>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	db16      	blt.n	8003512 <championship_update_walls+0x1ca>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	dc13      	bgt.n	8003512 <championship_update_walls+0x1ca>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3302      	adds	r3, #2
 80034ee:	425a      	negs	r2, r3
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	f002 0203 	and.w	r2, r2, #3
 80034f8:	bf58      	it	pl
 80034fa:	4253      	negpl	r3, r2
 80034fc:	4821      	ldr	r0, [pc, #132]	@ (8003584 <championship_update_walls+0x23c>)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	0111      	lsls	r1, r2, #4
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	440a      	add	r2, r1
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	4402      	add	r2, r0
 800350a:	4413      	add	r3, r2
 800350c:	3305      	adds	r3, #5
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
        }
    }

    // Mark current cell as visited
    maze[robot.x][robot.y].visited = true;
 8003512:	4b1b      	ldr	r3, [pc, #108]	@ (8003580 <championship_update_walls+0x238>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b1a      	ldr	r3, [pc, #104]	@ (8003580 <championship_update_walls+0x238>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	491a      	ldr	r1, [pc, #104]	@ (8003584 <championship_update_walls+0x23c>)
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	4413      	add	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	440b      	add	r3, r1
 8003524:	3304      	adds	r3, #4
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 800352a:	4b15      	ldr	r3, [pc, #84]	@ (8003580 <championship_update_walls+0x238>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b14      	ldr	r3, [pc, #80]	@ (8003580 <championship_update_walls+0x238>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4814      	ldr	r0, [pc, #80]	@ (8003584 <championship_update_walls+0x23c>)
 8003534:	0111      	lsls	r1, r2, #4
 8003536:	4419      	add	r1, r3
 8003538:	0109      	lsls	r1, r1, #4
 800353a:	4401      	add	r1, r0
 800353c:	310c      	adds	r1, #12
 800353e:	6809      	ldr	r1, [r1, #0]
 8003540:	3101      	adds	r1, #1
 8003542:	4810      	ldr	r0, [pc, #64]	@ (8003584 <championship_update_walls+0x23c>)
 8003544:	0112      	lsls	r2, r2, #4
 8003546:	4413      	add	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	4403      	add	r3, r0
 800354c:	330c      	adds	r3, #12
 800354e:	6019      	str	r1, [r3, #0]

    // Debug output
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003550:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <championship_update_walls+0x238>)
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <championship_update_walls+0x238>)
 8003556:	685a      	ldr	r2, [r3, #4]
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8003558:	4b08      	ldr	r3, [pc, #32]	@ (800357c <championship_update_walls+0x234>)
 800355a:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 800355c:	461c      	mov	r4, r3
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 800355e:	4b07      	ldr	r3, [pc, #28]	@ (800357c <championship_update_walls+0x234>)
 8003560:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003562:	4618      	mov	r0, r3
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <championship_update_walls+0x234>)
 8003566:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	9000      	str	r0, [sp, #0]
 800356c:	4623      	mov	r3, r4
 800356e:	4808      	ldr	r0, [pc, #32]	@ (8003590 <championship_update_walls+0x248>)
 8003570:	f7fe f9e4 	bl	800193c <send_bluetooth_printf>
}
 8003574:	bf00      	nop
 8003576:	3724      	adds	r7, #36	@ 0x24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd90      	pop	{r4, r7, pc}
 800357c:	2000142c 	.word	0x2000142c
 8003580:	20001418 	.word	0x20001418
 8003584:	20000418 	.word	0x20000418
 8003588:	0800de68 	.word	0x0800de68
 800358c:	0800de78 	.word	0x0800de78
 8003590:	0800d46c 	.word	0x0800d46c

08003594 <turn_to_direction>:

/**
 * @brief Turn robot to face target direction (MMS style)
 */
void turn_to_direction(int target_dir)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
    while (robot.direction != target_dir) {
 800359c:	e041      	b.n	8003622 <turn_to_direction+0x8e>
        int turn_diff = (target_dir - robot.direction + 4) % 4;
 800359e:	4b26      	ldr	r3, [pc, #152]	@ (8003638 <turn_to_direction+0xa4>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	3304      	adds	r3, #4
 80035a8:	425a      	negs	r2, r3
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	f002 0203 	and.w	r2, r2, #3
 80035b2:	bf58      	it	pl
 80035b4:	4253      	negpl	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

        if (turn_diff == 1) {
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10e      	bne.n	80035dc <turn_to_direction+0x48>
            turn_right();
 80035be:	f000 fc63 	bl	8003e88 <turn_right>
            robot.direction = (robot.direction + 1) % 4;
 80035c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <turn_to_direction+0xa4>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	3301      	adds	r3, #1
 80035c8:	425a      	negs	r2, r3
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	f002 0203 	and.w	r2, r2, #3
 80035d2:	bf58      	it	pl
 80035d4:	4253      	negpl	r3, r2
 80035d6:	4a18      	ldr	r2, [pc, #96]	@ (8003638 <turn_to_direction+0xa4>)
 80035d8:	6093      	str	r3, [r2, #8]
 80035da:	e022      	b.n	8003622 <turn_to_direction+0x8e>
        } else if (turn_diff == 3) {
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d10e      	bne.n	8003600 <turn_to_direction+0x6c>
            turn_left();
 80035e2:	f000 fc11 	bl	8003e08 <turn_left>
            robot.direction = (robot.direction + 3) % 4;
 80035e6:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <turn_to_direction+0xa4>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	3303      	adds	r3, #3
 80035ec:	425a      	negs	r2, r3
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	f002 0203 	and.w	r2, r2, #3
 80035f6:	bf58      	it	pl
 80035f8:	4253      	negpl	r3, r2
 80035fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003638 <turn_to_direction+0xa4>)
 80035fc:	6093      	str	r3, [r2, #8]
 80035fe:	e010      	b.n	8003622 <turn_to_direction+0x8e>
        } else if (turn_diff == 2) {
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d10d      	bne.n	8003622 <turn_to_direction+0x8e>
            turn_around();
 8003606:	f000 fc7f 	bl	8003f08 <turn_around>
            robot.direction = (robot.direction + 2) % 4;
 800360a:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <turn_to_direction+0xa4>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	3302      	adds	r3, #2
 8003610:	425a      	negs	r2, r3
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	f002 0203 	and.w	r2, r2, #3
 800361a:	bf58      	it	pl
 800361c:	4253      	negpl	r3, r2
 800361e:	4a06      	ldr	r2, [pc, #24]	@ (8003638 <turn_to_direction+0xa4>)
 8003620:	6093      	str	r3, [r2, #8]
    while (robot.direction != target_dir) {
 8003622:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <turn_to_direction+0xa4>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d1b8      	bne.n	800359e <turn_to_direction+0xa>
        }
    }
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20001418 	.word	0x20001418

0800363c <championship_move_forward>:

/**
 * @brief Move robot forward one cell (MMS style)
 */
bool championship_move_forward(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
    update_sensors();// neww
 8003640:	f000 fd68 	bl	8004114 <update_sensors>
    // Check for wall before moving
    if (sensors.wall_front) {
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <championship_move_forward+0x38>)
 8003646:	7a9b      	ldrb	r3, [r3, #10]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <championship_move_forward+0x1a>
        send_bluetooth_message("Front wall detected, cannot move\r\n");
 800364c:	480a      	ldr	r0, [pc, #40]	@ (8003678 <championship_move_forward+0x3c>)
 800364e:	f7fe f95f 	bl	8001910 <send_bluetooth_message>
        return false;
 8003652:	2300      	movs	r3, #0
 8003654:	e00c      	b.n	8003670 <championship_move_forward+0x34>
    }

    move_forward();  	//move_forward_cell_scurve();
 8003656:	f000 fb69 	bl	8003d2c <move_forward>
    robot.exploration_steps++;
 800365a:	4b08      	ldr	r3, [pc, #32]	@ (800367c <championship_move_forward+0x40>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	3301      	adds	r3, #1
 8003660:	4a06      	ldr	r2, [pc, #24]	@ (800367c <championship_move_forward+0x40>)
 8003662:	6113      	str	r3, [r2, #16]
    exploration_steps++;
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <championship_move_forward+0x44>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a05      	ldr	r2, [pc, #20]	@ (8003680 <championship_move_forward+0x44>)
 800366c:	6013      	str	r3, [r2, #0]

    return true;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	2000142c 	.word	0x2000142c
 8003678:	0800d498 	.word	0x0800d498
 800367c:	20001418 	.word	0x20001418
 8003680:	20001464 	.word	0x20001464

08003684 <is_at_goal>:

/**
 * @brief Check if robot is at goal (MMS style)
 */
bool is_at_goal(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 8003688:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <is_at_goal+0x78>)
 800368a:	7b1b      	ldrb	r3, [r3, #12]
 800368c:	f083 0301 	eor.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01e      	beq.n	80036d4 <is_at_goal+0x50>
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 8003696:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <is_at_goal+0x78>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <is_at_goal+0x7c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d005      	beq.n	80036ae <is_at_goal+0x2a>
 80036a2:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <is_at_goal+0x78>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b17      	ldr	r3, [pc, #92]	@ (8003704 <is_at_goal+0x80>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d10d      	bne.n	80036ca <is_at_goal+0x46>
               (robot.y == goal_y1 || robot.y == goal_y2);
 80036ae:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <is_at_goal+0x78>)
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <is_at_goal+0x84>)
 80036b4:	681b      	ldr	r3, [r3, #0]
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d005      	beq.n	80036c6 <is_at_goal+0x42>
               (robot.y == goal_y1 || robot.y == goal_y2);
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <is_at_goal+0x78>)
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	4b13      	ldr	r3, [pc, #76]	@ (800370c <is_at_goal+0x88>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d101      	bne.n	80036ca <is_at_goal+0x46>
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <is_at_goal+0x48>
 80036ca:	2300      	movs	r3, #0
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e00d      	b.n	80036f0 <is_at_goal+0x6c>
    } else {
        return robot.x == 0 && robot.y == 0;
 80036d4:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <is_at_goal+0x78>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <is_at_goal+0x64>
 80036dc:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <is_at_goal+0x78>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <is_at_goal+0x64>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <is_at_goal+0x66>
 80036e8:	2300      	movs	r3, #0
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
    }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20001418 	.word	0x20001418
 8003700:	0800de88 	.word	0x0800de88
 8003704:	0800de90 	.word	0x0800de90
 8003708:	0800de8c 	.word	0x0800de8c
 800370c:	0800de94 	.word	0x0800de94

08003710 <championship_exploration_with_analysis>:

/**
 * @brief Main championship exploration algorithm with MMS integration
 */
void championship_exploration_with_analysis(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	@ 0x28
 8003714:	af00      	add	r7, sp, #0
    send_bluetooth_message("Starting championship exploration\r\n");
 8003716:	4881      	ldr	r0, [pc, #516]	@ (800391c <championship_exploration_with_analysis+0x20c>)
 8003718:	f7fe f8fa 	bl	8001910 <send_bluetooth_message>

    int step_count = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
    const int max_steps = 1000;
 8003720:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003724:	613b      	str	r3, [r7, #16]

    while (step_count < max_steps && (!robot.center_reached || !robot.returned_to_start)) {
 8003726:	e0c0      	b.n	80038aa <championship_exploration_with_analysis+0x19a>
        send_bluetooth_printf("Step %d: Robot at (%d,%d)\r\n", step_count, robot.x, robot.y);
 8003728:	4b7d      	ldr	r3, [pc, #500]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b7c      	ldr	r3, [pc, #496]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003732:	487c      	ldr	r0, [pc, #496]	@ (8003924 <championship_exploration_with_analysis+0x214>)
 8003734:	f7fe f902 	bl	800193c <send_bluetooth_printf>

        // Update walls and run championship flood fill
        championship_update_walls();
 8003738:	f7ff fe06 	bl	8003348 <championship_update_walls>
        championship_flood_fill();
 800373c:	f7ff fb36 	bl	8002dac <championship_flood_fill>

        // Check if goal reached
        if (is_at_goal()) {
 8003740:	f7ff ffa0 	bl	8003684 <is_at_goal>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d032      	beq.n	80037b0 <championship_exploration_with_analysis+0xa0>
            if (!robot.center_reached) {
 800374a:	4b75      	ldr	r3, [pc, #468]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 800374c:	7b1b      	ldrb	r3, [r3, #12]
 800374e:	f083 0301 	eor.w	r3, r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d024      	beq.n	80037a2 <championship_exploration_with_analysis+0x92>
                send_bluetooth_message("CENTER REACHED! Switching to return mode\r\n");
 8003758:	4873      	ldr	r0, [pc, #460]	@ (8003928 <championship_exploration_with_analysis+0x218>)
 800375a:	f7fe f8d9 	bl	8001910 <send_bluetooth_message>
                robot.center_reached = true;
 800375e:	4b70      	ldr	r3, [pc, #448]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 8003760:	2201      	movs	r2, #1
 8003762:	731a      	strb	r2, [r3, #12]
                play_confirmation_tone();
 8003764:	f7fd fc28 	bl	8000fb8 <play_confirmation_tone>

                // Reset visit counts for return journey
                for (int x = 0; x < MAZE_SIZE; x++) {
 8003768:	2300      	movs	r3, #0
 800376a:	623b      	str	r3, [r7, #32]
 800376c:	e015      	b.n	800379a <championship_exploration_with_analysis+0x8a>
                    for (int y = 0; y < MAZE_SIZE; y++) {
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e00c      	b.n	800378e <championship_exploration_with_analysis+0x7e>
                        maze[x][y].visit_count = 0;
 8003774:	496d      	ldr	r1, [pc, #436]	@ (800392c <championship_exploration_with_analysis+0x21c>)
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	011a      	lsls	r2, r3, #4
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	440b      	add	r3, r1
 8003782:	330c      	adds	r3, #12
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
                    for (int y = 0; y < MAZE_SIZE; y++) {
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3301      	adds	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	ddef      	ble.n	8003774 <championship_exploration_with_analysis+0x64>
                for (int x = 0; x < MAZE_SIZE; x++) {
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	3301      	adds	r3, #1
 8003798:	623b      	str	r3, [r7, #32]
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	dde6      	ble.n	800376e <championship_exploration_with_analysis+0x5e>
 80037a0:	e006      	b.n	80037b0 <championship_exploration_with_analysis+0xa0>
                    }
                }
            } else {
                send_bluetooth_message("RETURNED TO START! Exploration complete!\r\n");
 80037a2:	4863      	ldr	r0, [pc, #396]	@ (8003930 <championship_exploration_with_analysis+0x220>)
 80037a4:	f7fe f8b4 	bl	8001910 <send_bluetooth_message>
                robot.returned_to_start = true;
 80037a8:	4b5d      	ldr	r3, [pc, #372]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	735a      	strb	r2, [r3, #13]
                break;
 80037ae:	e090      	b.n	80038d2 <championship_exploration_with_analysis+0x1c2>
            }
        }

        // Get championship direction
        int next_dir = get_championship_direction();
 80037b0:	f7ff fcae 	bl	8003110 <get_championship_direction>
 80037b4:	60f8      	str	r0, [r7, #12]
        send_bluetooth_printf("Championship direction: %d\r\n", next_dir);
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	485e      	ldr	r0, [pc, #376]	@ (8003934 <championship_exploration_with_analysis+0x224>)
 80037ba:	f7fe f8bf 	bl	800193c <send_bluetooth_printf>

        // Turn and move
        turn_to_direction(next_dir);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff fee8 	bl	8003594 <turn_to_direction>

        if (championship_move_forward()) {
 80037c4:	f7ff ff3a 	bl	800363c <championship_move_forward>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <championship_exploration_with_analysis+0xda>
            // Update LED status
            if (robot.center_reached) {
 80037ce:	4b54      	ldr	r3, [pc, #336]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 80037d0:	7b1b      	ldrb	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <championship_exploration_with_analysis+0xd0>
                led_status(0, 1); // Right LED for return journey
 80037d6:	2101      	movs	r1, #1
 80037d8:	2000      	movs	r0, #0
 80037da:	f001 f9b7 	bl	8004b4c <led_status>
 80037de:	e05e      	b.n	800389e <championship_exploration_with_analysis+0x18e>
            } else {
                led_status(1, 0); // Left LED for exploration
 80037e0:	2100      	movs	r1, #0
 80037e2:	2001      	movs	r0, #1
 80037e4:	f001 f9b2 	bl	8004b4c <led_status>
 80037e8:	e059      	b.n	800389e <championship_exploration_with_analysis+0x18e>
            }
        } else {
            send_bluetooth_message("Movement blocked - trying alternatives\r\n");
 80037ea:	4853      	ldr	r0, [pc, #332]	@ (8003938 <championship_exploration_with_analysis+0x228>)
 80037ec:	f7fe f890 	bl	8001910 <send_bluetooth_message>
            // Try other directions if blocked
            bool moved = false;
 80037f0:	2300      	movs	r3, #0
 80037f2:	76fb      	strb	r3, [r7, #27]
            for (int alt_dir = 0; alt_dir < 4 && !moved; alt_dir++) {
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e03e      	b.n	8003878 <championship_exploration_with_analysis+0x168>
                if (alt_dir != next_dir) {
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d037      	beq.n	8003872 <championship_exploration_with_analysis+0x162>
                    int nx = robot.x + dx[alt_dir];
 8003802:	4b47      	ldr	r3, [pc, #284]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	494d      	ldr	r1, [pc, #308]	@ (800393c <championship_exploration_with_analysis+0x22c>)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800380e:	4413      	add	r3, r2
 8003810:	60bb      	str	r3, [r7, #8]
                    int ny = robot.y + dy[alt_dir];
 8003812:	4b43      	ldr	r3, [pc, #268]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	494a      	ldr	r1, [pc, #296]	@ (8003940 <championship_exploration_with_analysis+0x230>)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800381e:	4413      	add	r3, r2
 8003820:	607b      	str	r3, [r7, #4]
                    if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db24      	blt.n	8003872 <championship_exploration_with_analysis+0x162>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	dc21      	bgt.n	8003872 <championship_exploration_with_analysis+0x162>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db1e      	blt.n	8003872 <championship_exploration_with_analysis+0x162>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	dc1b      	bgt.n	8003872 <championship_exploration_with_analysis+0x162>
                        !maze[robot.x][robot.y].walls[alt_dir]) {
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b38      	ldr	r3, [pc, #224]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	493a      	ldr	r1, [pc, #232]	@ (800392c <championship_exploration_with_analysis+0x21c>)
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	4413      	add	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	18ca      	adds	r2, r1, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	4413      	add	r3, r2
 8003850:	3305      	adds	r3, #5
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	f083 0301 	eor.w	r3, r3, #1
 8003858:	b2db      	uxtb	r3, r3
                    if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <championship_exploration_with_analysis+0x162>
                        turn_to_direction(alt_dir);
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff fe98 	bl	8003594 <turn_to_direction>
                        if (championship_move_forward()) {
 8003864:	f7ff feea 	bl	800363c <championship_move_forward>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <championship_exploration_with_analysis+0x162>
                            moved = true;
 800386e:	2301      	movs	r3, #1
 8003870:	76fb      	strb	r3, [r7, #27]
            for (int alt_dir = 0; alt_dir < 4 && !moved; alt_dir++) {
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3301      	adds	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2b03      	cmp	r3, #3
 800387c:	dc05      	bgt.n	800388a <championship_exploration_with_analysis+0x17a>
 800387e:	7efb      	ldrb	r3, [r7, #27]
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1b7      	bne.n	80037fa <championship_exploration_with_analysis+0xea>
                        }
                    }
                }
            }

            if (!moved) {
 800388a:	7efb      	ldrb	r3, [r7, #27]
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <championship_exploration_with_analysis+0x18e>
                send_bluetooth_message("All directions blocked!\r\n");
 8003896:	482b      	ldr	r0, [pc, #172]	@ (8003944 <championship_exploration_with_analysis+0x234>)
 8003898:	f7fe f83a 	bl	8001910 <send_bluetooth_message>
                break;
 800389c:	e019      	b.n	80038d2 <championship_exploration_with_analysis+0x1c2>
            }
        }

        step_count++;
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	3301      	adds	r3, #1
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_Delay(10); // Small delay for stability
 80038a4:	200a      	movs	r0, #10
 80038a6:	f001 fa11 	bl	8004ccc <HAL_Delay>
    while (step_count < max_steps && (!robot.center_reached || !robot.returned_to_start)) {
 80038aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	da0f      	bge.n	80038d2 <championship_exploration_with_analysis+0x1c2>
 80038b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 80038b4:	7b1b      	ldrb	r3, [r3, #12]
 80038b6:	f083 0301 	eor.w	r3, r3, #1
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f47f af33 	bne.w	8003728 <championship_exploration_with_analysis+0x18>
 80038c2:	4b17      	ldr	r3, [pc, #92]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 80038c4:	7b5b      	ldrb	r3, [r3, #13]
 80038c6:	f083 0301 	eor.w	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f47f af2b 	bne.w	8003728 <championship_exploration_with_analysis+0x18>
    }

    // Final status
    led_status(0, 0);
 80038d2:	2100      	movs	r1, #0
 80038d4:	2000      	movs	r0, #0
 80038d6:	f001 f939 	bl	8004b4c <led_status>
    send_bluetooth_printf("Exploration completed in %d moves\r\n", robot.exploration_steps);
 80038da:	4b11      	ldr	r3, [pc, #68]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4619      	mov	r1, r3
 80038e0:	4819      	ldr	r0, [pc, #100]	@ (8003948 <championship_exploration_with_analysis+0x238>)
 80038e2:	f7fe f82b 	bl	800193c <send_bluetooth_printf>

    // Execute perfect path analysis if exploration successful
    if (robot.center_reached && robot.returned_to_start) {
 80038e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 80038e8:	7b1b      	ldrb	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <championship_exploration_with_analysis+0x1f6>
 80038ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <championship_exploration_with_analysis+0x210>)
 80038f0:	7b5b      	ldrb	r3, [r3, #13]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <championship_exploration_with_analysis+0x1f6>
        send_bluetooth_message("\r\nExploration successful! Starting path analysis...\r\n");
 80038f6:	4815      	ldr	r0, [pc, #84]	@ (800394c <championship_exploration_with_analysis+0x23c>)
 80038f8:	f7fe f80a 	bl	8001910 <send_bluetooth_message>
        execute_championship_path_analysis();
 80038fc:	f000 f82a 	bl	8003954 <execute_championship_path_analysis>
        play_success_tone();
 8003900:	f7fd fb6c 	bl	8000fdc <play_success_tone>
 8003904:	e005      	b.n	8003912 <championship_exploration_with_analysis+0x202>
    } else {
        send_bluetooth_message("Exploration incomplete - path analysis not available\r\n");
 8003906:	4812      	ldr	r0, [pc, #72]	@ (8003950 <championship_exploration_with_analysis+0x240>)
 8003908:	f7fe f802 	bl	8001910 <send_bluetooth_message>
        play_error_tone();
 800390c:	f7fd fb92 	bl	8001034 <play_error_tone>
    }
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3728      	adds	r7, #40	@ 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	0800d4bc 	.word	0x0800d4bc
 8003920:	20001418 	.word	0x20001418
 8003924:	0800d4e0 	.word	0x0800d4e0
 8003928:	0800d4fc 	.word	0x0800d4fc
 800392c:	20000418 	.word	0x20000418
 8003930:	0800d528 	.word	0x0800d528
 8003934:	0800d554 	.word	0x0800d554
 8003938:	0800d574 	.word	0x0800d574
 800393c:	0800de68 	.word	0x0800de68
 8003940:	0800de78 	.word	0x0800de78
 8003944:	0800d5a0 	.word	0x0800d5a0
 8003948:	0800d5bc 	.word	0x0800d5bc
 800394c:	0800d5e0 	.word	0x0800d5e0
 8003950:	0800d618 	.word	0x0800d618

08003954 <execute_championship_path_analysis>:

/**
 * @brief Execute championship path analysis (MMS style)
 */
void execute_championship_path_analysis(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== CHAMPIONSHIP PATH ANALYSIS ===\r\n");
 8003958:	4810      	ldr	r0, [pc, #64]	@ (800399c <execute_championship_path_analysis+0x48>)
 800395a:	f7fd ffd9 	bl	8001910 <send_bluetooth_message>

    // Calculate optimal path from explored areas
    calculate_optimal_path_from_explored_areas();
 800395e:	f7fd fb83 	bl	8001068 <calculate_optimal_path_from_explored_areas>

    // Comprehensive maze performance analysis
    analyze_championship_maze_performance();
 8003962:	f7fd fe13 	bl	800158c <analyze_championship_maze_performance>

    // Print optimal distance map
    print_championship_distance_map();
 8003966:	f7fd ff43 	bl	80017f0 <print_championship_distance_map>

    // Visualize optimal path (would work with MMS visualization)
    send_bluetooth_message("\r\n🎯 CHAMPIONSHIP ANALYSIS COMPLETE!\r\n");
 800396a:	480d      	ldr	r0, [pc, #52]	@ (80039a0 <execute_championship_path_analysis+0x4c>)
 800396c:	f7fd ffd0 	bl	8001910 <send_bluetooth_message>

    if (theoretical_minimum < MAX_DISTANCE) {
 8003970:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <execute_championship_path_analysis+0x50>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f242 720e 	movw	r2, #9998	@ 0x270e
 8003978:	4293      	cmp	r3, r2
 800397a:	dc09      	bgt.n	8003990 <execute_championship_path_analysis+0x3c>
        send_bluetooth_printf("Optimal path through explored areas: %d steps!\r\n", theoretical_minimum);
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <execute_championship_path_analysis+0x50>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4619      	mov	r1, r3
 8003982:	4809      	ldr	r0, [pc, #36]	@ (80039a8 <execute_championship_path_analysis+0x54>)
 8003984:	f7fd ffda 	bl	800193c <send_bluetooth_printf>
        send_bluetooth_message("✅ Ready for IEEE Micromouse competition!\r\n");
 8003988:	4808      	ldr	r0, [pc, #32]	@ (80039ac <execute_championship_path_analysis+0x58>)
 800398a:	f7fd ffc1 	bl	8001910 <send_bluetooth_message>
    } else {
        send_bluetooth_message("❌ No valid path found through explored areas\r\n");
    }
}
 800398e:	e002      	b.n	8003996 <execute_championship_path_analysis+0x42>
        send_bluetooth_message("❌ No valid path found through explored areas\r\n");
 8003990:	4807      	ldr	r0, [pc, #28]	@ (80039b0 <execute_championship_path_analysis+0x5c>)
 8003992:	f7fd ffbd 	bl	8001910 <send_bluetooth_message>
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	0800d650 	.word	0x0800d650
 80039a0:	0800d678 	.word	0x0800d678
 80039a4:	20001468 	.word	0x20001468
 80039a8:	0800d6a4 	.word	0x0800d6a4
 80039ac:	0800d6d8 	.word	0x0800d6d8
 80039b0:	0800d708 	.word	0x0800d708

080039b4 <reset_championship_micromouse>:

/**
 * @brief Reset championship micromouse to initial state
 */
void reset_championship_micromouse(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
    robot.x = 0;
 80039b8:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <reset_championship_micromouse+0x48>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <reset_championship_micromouse+0x48>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 80039c4:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <reset_championship_micromouse+0x48>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 80039ca:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <reset_championship_micromouse+0x48>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 80039d0:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <reset_championship_micromouse+0x48>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <reset_championship_micromouse+0x48>)
 80039d8:	2200      	movs	r2, #0
 80039da:	611a      	str	r2, [r3, #16]

    exploration_steps = 0;
 80039dc:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <reset_championship_micromouse+0x4c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 80039e2:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <reset_championship_micromouse+0x50>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

    initialize_championship_maze();
 80039e8:	f7ff f960 	bl	8002cac <initialize_championship_maze>
    send_bluetooth_message("Championship micromouse reset to initial state\r\n");
 80039ec:	4806      	ldr	r0, [pc, #24]	@ (8003a08 <reset_championship_micromouse+0x54>)
 80039ee:	f7fd ff8f 	bl	8001910 <send_bluetooth_message>
    play_startup_tone();
 80039f2:	f7fd fac5 	bl	8000f80 <play_startup_tone>
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20001418 	.word	0x20001418
 8003a00:	20001464 	.word	0x20001464
 8003a04:	20001468 	.word	0x20001468
 8003a08:	0800d73c 	.word	0x0800d73c

08003a0c <championship_speed_run>:

/**
 * @brief Championship speed run with MMS path analysis
 */
void championship_speed_run(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🚀 CHAMPIONSHIP SPEED RUN MODE!\r\n");
 8003a10:	4804      	ldr	r0, [pc, #16]	@ (8003a24 <championship_speed_run+0x18>)
 8003a12:	f7fd ff7d 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("Using MMS optimal path analysis\r\n");
 8003a16:	4804      	ldr	r0, [pc, #16]	@ (8003a28 <championship_speed_run+0x1c>)
 8003a18:	f7fd ff7a 	bl	8001910 <send_bluetooth_message>

    // Use the advanced speed run implementation
    speed_run();
 8003a1c:	f000 f806 	bl	8003a2c <speed_run>
}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	0800d770 	.word	0x0800d770
 8003a28:	0800d798 	.word	0x0800d798

08003a2c <speed_run>:

/**
 * @brief Simple speed run implementation
 */
void speed_run(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🚀 SPEED RUN MODE ACTIVATED!\r\n");
 8003a32:	4864      	ldr	r0, [pc, #400]	@ (8003bc4 <speed_run+0x198>)
 8003a34:	f7fd ff6c 	bl	8001910 <send_bluetooth_message>

    // Check if exploration was completed
    if (!robot.center_reached || !robot.returned_to_start) {
 8003a38:	4b63      	ldr	r3, [pc, #396]	@ (8003bc8 <speed_run+0x19c>)
 8003a3a:	7b1b      	ldrb	r3, [r3, #12]
 8003a3c:	f083 0301 	eor.w	r3, r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <speed_run+0x28>
 8003a46:	4b60      	ldr	r3, [pc, #384]	@ (8003bc8 <speed_run+0x19c>)
 8003a48:	7b5b      	ldrb	r3, [r3, #13]
 8003a4a:	f083 0301 	eor.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <speed_run+0x30>
        send_bluetooth_message("❌ Speed run not available - exploration not complete\r\n");
 8003a54:	485d      	ldr	r0, [pc, #372]	@ (8003bcc <speed_run+0x1a0>)
 8003a56:	f7fd ff5b 	bl	8001910 <send_bluetooth_message>
        return;
 8003a5a:	e0b0      	b.n	8003bbe <speed_run+0x192>
    }

    send_bluetooth_message("Using championship algorithms for optimal speed run\r\n");
 8003a5c:	485c      	ldr	r0, [pc, #368]	@ (8003bd0 <speed_run+0x1a4>)
 8003a5e:	f7fd ff57 	bl	8001910 <send_bluetooth_message>

    // Reset robot position
    robot.x = 0;
 8003a62:	4b59      	ldr	r3, [pc, #356]	@ (8003bc8 <speed_run+0x19c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8003a68:	4b57      	ldr	r3, [pc, #348]	@ (8003bc8 <speed_run+0x19c>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 8003a6e:	4b56      	ldr	r3, [pc, #344]	@ (8003bc8 <speed_run+0x19c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]

    // Status indication
    led_status(1, 1); // Both LEDs on
 8003a74:	2101      	movs	r1, #1
 8003a76:	2001      	movs	r0, #1
 8003a78:	f001 f868 	bl	8004b4c <led_status>
    play_confirmation_tone();
 8003a7c:	f7fd fa9c 	bl	8000fb8 <play_confirmation_tone>

    // Wait for confirmation
    send_bluetooth_message("Press RIGHT button to execute speed run...\r\n"); //later change to hand movement
 8003a80:	4854      	ldr	r0, [pc, #336]	@ (8003bd4 <speed_run+0x1a8>)
 8003a82:	f7fd ff45 	bl	8001910 <send_bluetooth_message>

    uint32_t start_time = HAL_GetTick();
 8003a86:	f001 f915 	bl	8004cb4 <HAL_GetTick>
 8003a8a:	60f8      	str	r0, [r7, #12]
    bool execute_run = false;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	75fb      	strb	r3, [r7, #23]

    while ((HAL_GetTick() - start_time) < 10000) { // 10 second timeout
 8003a90:	e00d      	b.n	8003aae <speed_run+0x82>
        if (button_pressed == 2) { // Right button
 8003a92:	4b51      	ldr	r3, [pc, #324]	@ (8003bd8 <speed_run+0x1ac>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d105      	bne.n	8003aa8 <speed_run+0x7c>
            button_pressed = 0;
 8003a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd8 <speed_run+0x1ac>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
            execute_run = true;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
            break;
 8003aa6:	e00b      	b.n	8003ac0 <speed_run+0x94>
        }
        HAL_Delay(100);
 8003aa8:	2064      	movs	r0, #100	@ 0x64
 8003aaa:	f001 f90f 	bl	8004ccc <HAL_Delay>
    while ((HAL_GetTick() - start_time) < 10000) { // 10 second timeout
 8003aae:	f001 f901 	bl	8004cb4 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d9e8      	bls.n	8003a92 <speed_run+0x66>
    }

    if (!execute_run) {
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	f083 0301 	eor.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <speed_run+0xb0>
        send_bluetooth_message("⏰ Speed run cancelled - timeout\r\n");
 8003acc:	4843      	ldr	r0, [pc, #268]	@ (8003bdc <speed_run+0x1b0>)
 8003ace:	f7fd ff1f 	bl	8001910 <send_bluetooth_message>
        led_status(0, 0);
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	f001 f839 	bl	8004b4c <led_status>
        return;
 8003ada:	e070      	b.n	8003bbe <speed_run+0x192>
    }

    send_bluetooth_message("🏁 EXECUTING SPEED RUN!\r\n");
 8003adc:	4840      	ldr	r0, [pc, #256]	@ (8003be0 <speed_run+0x1b4>)
 8003ade:	f7fd ff17 	bl	8001910 <send_bluetooth_message>

    // Simple speed run - follow the shortest known path to center
    int moves = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
    const int max_moves = 50;
 8003ae6:	2332      	movs	r3, #50	@ 0x32
 8003ae8:	60bb      	str	r3, [r7, #8]

    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003aea:	e021      	b.n	8003b30 <speed_run+0x104>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
           moves < max_moves) {

        // Update sensor data
        update_sensors();
 8003aec:	f000 fb12 	bl	8004114 <update_sensors>

        // Use championship flood fill to get direction
        championship_flood_fill();
 8003af0:	f7ff f95c 	bl	8002dac <championship_flood_fill>
        int next_dir = get_championship_direction();
 8003af4:	f7ff fb0c 	bl	8003110 <get_championship_direction>
 8003af8:	6078      	str	r0, [r7, #4]

        // Turn to target direction
        turn_to_direction(next_dir);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fd4a 	bl	8003594 <turn_to_direction>

        // Move forward
        if (championship_move_forward()) {
 8003b00:	f7ff fd9c 	bl	800363c <championship_move_forward>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <speed_run+0xf6>
            moves++;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
            send_bluetooth_printf("Speed run move %d to (%d,%d)\r\n", moves, robot.x, robot.y);
 8003b10:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc8 <speed_run+0x19c>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <speed_run+0x19c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	6939      	ldr	r1, [r7, #16]
 8003b1a:	4832      	ldr	r0, [pc, #200]	@ (8003be4 <speed_run+0x1b8>)
 8003b1c:	f7fd ff0e 	bl	800193c <send_bluetooth_printf>
 8003b20:	e003      	b.n	8003b2a <speed_run+0xfe>
        } else {
            send_bluetooth_message("❌ Speed run blocked!\r\n");
 8003b22:	4831      	ldr	r0, [pc, #196]	@ (8003be8 <speed_run+0x1bc>)
 8003b24:	f7fd fef4 	bl	8001910 <send_bluetooth_message>
            break;
 8003b28:	e01e      	b.n	8003b68 <speed_run+0x13c>
        }

        // Brief delay for stability
        HAL_Delay(50);
 8003b2a:	2032      	movs	r0, #50	@ 0x32
 8003b2c:	f001 f8ce 	bl	8004ccc <HAL_Delay>
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b30:	4b25      	ldr	r3, [pc, #148]	@ (8003bc8 <speed_run+0x19c>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b2d      	ldr	r3, [pc, #180]	@ (8003bec <speed_run+0x1c0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d005      	beq.n	8003b48 <speed_run+0x11c>
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b3c:	4b22      	ldr	r3, [pc, #136]	@ (8003bc8 <speed_run+0x19c>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf0 <speed_run+0x1c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d10b      	bne.n	8003b60 <speed_run+0x134>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8003b48:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc8 <speed_run+0x19c>)
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	4b29      	ldr	r3, [pc, #164]	@ (8003bf4 <speed_run+0x1c8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d009      	beq.n	8003b68 <speed_run+0x13c>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8003b54:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc8 <speed_run+0x19c>)
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	4b27      	ldr	r3, [pc, #156]	@ (8003bf8 <speed_run+0x1cc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d003      	beq.n	8003b68 <speed_run+0x13c>
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	dbc1      	blt.n	8003aec <speed_run+0xc0>
    }

    // Speed run complete
    led_status(0, 0);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f000 ffee 	bl	8004b4c <led_status>

    if ((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b70:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <speed_run+0x19c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b1d      	ldr	r3, [pc, #116]	@ (8003bec <speed_run+0x1c0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d005      	beq.n	8003b88 <speed_run+0x15c>
 8003b7c:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <speed_run+0x19c>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <speed_run+0x1c4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d115      	bne.n	8003bb4 <speed_run+0x188>
        (robot.y == goal_y1 || robot.y == goal_y2)) {
 8003b88:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc8 <speed_run+0x19c>)
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <speed_run+0x1c8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
    if ((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d005      	beq.n	8003ba0 <speed_run+0x174>
        (robot.y == goal_y1 || robot.y == goal_y2)) {
 8003b94:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <speed_run+0x19c>)
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	4b17      	ldr	r3, [pc, #92]	@ (8003bf8 <speed_run+0x1cc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d109      	bne.n	8003bb4 <speed_run+0x188>
        send_bluetooth_message("🏁 SPEED RUN SUCCESS!\r\n");
 8003ba0:	4816      	ldr	r0, [pc, #88]	@ (8003bfc <speed_run+0x1d0>)
 8003ba2:	f7fd feb5 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_printf("Completed in %d moves\r\n", moves);
 8003ba6:	6939      	ldr	r1, [r7, #16]
 8003ba8:	4815      	ldr	r0, [pc, #84]	@ (8003c00 <speed_run+0x1d4>)
 8003baa:	f7fd fec7 	bl	800193c <send_bluetooth_printf>
        play_success_tone();
 8003bae:	f7fd fa15 	bl	8000fdc <play_success_tone>
 8003bb2:	e004      	b.n	8003bbe <speed_run+0x192>
    } else {
        send_bluetooth_message("⚠️ Speed run incomplete\r\n");
 8003bb4:	4813      	ldr	r0, [pc, #76]	@ (8003c04 <speed_run+0x1d8>)
 8003bb6:	f7fd feab 	bl	8001910 <send_bluetooth_message>
        play_error_tone();
 8003bba:	f7fd fa3b 	bl	8001034 <play_error_tone>
    }
}
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	0800d7bc 	.word	0x0800d7bc
 8003bc8:	20001418 	.word	0x20001418
 8003bcc:	0800d7e0 	.word	0x0800d7e0
 8003bd0:	0800d81c 	.word	0x0800d81c
 8003bd4:	0800d854 	.word	0x0800d854
 8003bd8:	20001460 	.word	0x20001460
 8003bdc:	0800d884 	.word	0x0800d884
 8003be0:	0800d8a8 	.word	0x0800d8a8
 8003be4:	0800d8c4 	.word	0x0800d8c4
 8003be8:	0800d8e4 	.word	0x0800d8e4
 8003bec:	0800de88 	.word	0x0800de88
 8003bf0:	0800de90 	.word	0x0800de90
 8003bf4:	0800de8c 	.word	0x0800de8c
 8003bf8:	0800de94 	.word	0x0800de94
 8003bfc:	0800d900 	.word	0x0800d900
 8003c00:	0800d91c 	.word	0x0800d91c
 8003c04:	0800d934 	.word	0x0800d934

08003c08 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 8003c0e:	4b19      	ldr	r3, [pc, #100]	@ (8003c74 <update_encoder_totals+0x6c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8003c16:	4b18      	ldr	r3, [pc, #96]	@ (8003c78 <update_encoder_totals+0x70>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 8003c1e:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <update_encoder_totals+0x74>)
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <update_encoder_totals+0x78>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	88ba      	ldrh	r2, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    left_diff = -left_diff;  // Make left encoder positive for forward movement
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	425b      	negs	r3, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	807b      	strh	r3, [r7, #2]

    // Update totals
    left_total += left_diff;
 8003c3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c42:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <update_encoder_totals+0x7c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	4a0e      	ldr	r2, [pc, #56]	@ (8003c84 <update_encoder_totals+0x7c>)
 8003c4a:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 8003c4c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c50:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <update_encoder_totals+0x80>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	4a0c      	ldr	r2, [pc, #48]	@ (8003c88 <update_encoder_totals+0x80>)
 8003c58:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 8003c5a:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <update_encoder_totals+0x74>)
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 8003c60:	4a07      	ldr	r2, [pc, #28]	@ (8003c80 <update_encoder_totals+0x78>)
 8003c62:	88bb      	ldrh	r3, [r7, #4]
 8003c64:	8013      	strh	r3, [r2, #0]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	200002f8 	.word	0x200002f8
 8003c78:	20000388 	.word	0x20000388
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	20000002 	.word	0x20000002
 8003c84:	20001478 	.word	0x20001478
 8003c88:	2000147c 	.word	0x2000147c

08003c8c <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003c90:	f7ff ffba 	bl	8003c08 <update_encoder_totals>
    return left_total;
 8003c94:	4b01      	ldr	r3, [pc, #4]	@ (8003c9c <get_left_encoder_total+0x10>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20001478 	.word	0x20001478

08003ca0 <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003ca4:	f7ff ffb0 	bl	8003c08 <update_encoder_totals>
    return right_total;
 8003ca8:	4b01      	ldr	r3, [pc, #4]	@ (8003cb0 <get_right_encoder_total+0x10>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	2000147c 	.word	0x2000147c

08003cb4 <start_encoders>:
}

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8003cb8:	213c      	movs	r1, #60	@ 0x3c
 8003cba:	4815      	ldr	r0, [pc, #84]	@ (8003d10 <start_encoders+0x5c>)
 8003cbc:	f003 fc1c 	bl	80074f8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8003cc0:	213c      	movs	r1, #60	@ 0x3c
 8003cc2:	4814      	ldr	r0, [pc, #80]	@ (8003d14 <start_encoders+0x60>)
 8003cc4:	f003 fc18 	bl	80074f8 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <start_encoders+0x5c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <start_encoders+0x60>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003cda:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f000 fff5 	bl	8004ccc <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <start_encoders+0x64>)
 8003ce4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003ce8:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <start_encoders+0x68>)
 8003cec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003cf0:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <start_encoders+0x6c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <start_encoders+0x70>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003d28 <start_encoders+0x74>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 8003d04:	4b08      	ldr	r3, [pc, #32]	@ (8003d28 <start_encoders+0x74>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	60da      	str	r2, [r3, #12]
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000388 	.word	0x20000388
 8003d14:	200002f8 	.word	0x200002f8
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	20000002 	.word	0x20000002
 8003d20:	20001478 	.word	0x20001478
 8003d24:	2000147c 	.word	0x2000147c
 8003d28:	20001450 	.word	0x20001450

08003d2c <move_forward>:

/**
 * @brief Move forward one cell - FIXED VERSION
 */
void move_forward(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	@ 0x28
 8003d30:	af00      	add	r7, sp, #0
    // Use safe encoder reading
    int32_t start_left = get_left_encoder_total();
 8003d32:	f7ff ffab 	bl	8003c8c <get_left_encoder_total>
 8003d36:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t start_right = get_right_encoder_total();
 8003d38:	f7ff ffb2 	bl	8003ca0 <get_right_encoder_total>
 8003d3c:	6238      	str	r0, [r7, #32]

    // Check bounds before moving
    int new_x = robot.x + dx[robot.direction];
 8003d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003df8 <move_forward+0xcc>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b2d      	ldr	r3, [pc, #180]	@ (8003df8 <move_forward+0xcc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	492d      	ldr	r1, [pc, #180]	@ (8003dfc <move_forward+0xd0>)
 8003d48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	61fb      	str	r3, [r7, #28]
    int new_y = robot.y + dy[robot.direction];
 8003d50:	4b29      	ldr	r3, [pc, #164]	@ (8003df8 <move_forward+0xcc>)
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	4b28      	ldr	r3, [pc, #160]	@ (8003df8 <move_forward+0xcc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4929      	ldr	r1, [pc, #164]	@ (8003e00 <move_forward+0xd4>)
 8003d5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d5e:	4413      	add	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	db08      	blt.n	8003d7a <move_forward+0x4e>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b0f      	cmp	r3, #15
 8003d6c:	dc05      	bgt.n	8003d7a <move_forward+0x4e>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	db02      	blt.n	8003d7a <move_forward+0x4e>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	dd03      	ble.n	8003d82 <move_forward+0x56>
        send_bluetooth_message("Cannot move - would go out of bounds!\r\n");
 8003d7a:	4822      	ldr	r0, [pc, #136]	@ (8003e04 <move_forward+0xd8>)
 8003d7c:	f7fd fdc8 	bl	8001910 <send_bluetooth_message>
        return;
 8003d80:	e037      	b.n	8003df2 <move_forward+0xc6>
    }

    motor_set_fixed(0, true, 800);  // Left motor forward
 8003d82:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003d86:	2101      	movs	r1, #1
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f000 f8df 	bl	8003f4c <motor_set_fixed>
    motor_set_fixed(1, true, 800);  // Right motor forward
 8003d8e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003d92:	2101      	movs	r1, #1
 8003d94:	2001      	movs	r0, #1
 8003d96:	f000 f8d9 	bl	8003f4c <motor_set_fixed>

    // Move until target distance reached
    int32_t target_counts = ENCODER_COUNTS_PER_CELL;
 8003d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d9e:	617b      	str	r3, [r7, #20]
    while (1) {
        int32_t current_left = get_left_encoder_total();
 8003da0:	f7ff ff74 	bl	8003c8c <get_left_encoder_total>
 8003da4:	6138      	str	r0, [r7, #16]
        int32_t current_right = get_right_encoder_total();
 8003da6:	f7ff ff7b 	bl	8003ca0 <get_right_encoder_total>
 8003daa:	60f8      	str	r0, [r7, #12]
        int32_t left_traveled = current_left - start_left;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	60bb      	str	r3, [r7, #8]
        int32_t right_traveled = current_right - start_right;
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	607b      	str	r3, [r7, #4]
        int32_t avg_traveled = (left_traveled + right_traveled) / 2;
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	0fda      	lsrs	r2, r3, #31
 8003dc4:	4413      	add	r3, r2
 8003dc6:	105b      	asrs	r3, r3, #1
 8003dc8:	603b      	str	r3, [r7, #0]

        if (avg_traveled >= target_counts) {
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	da03      	bge.n	8003dda <move_forward+0xae>
            break;
        }
        HAL_Delay(1);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f000 ff7a 	bl	8004ccc <HAL_Delay>
    while (1) {
 8003dd8:	e7e2      	b.n	8003da0 <move_forward+0x74>
            break;
 8003dda:	bf00      	nop
    }

    // Stop motors
    stop_motors();
 8003ddc:	f000 f89c 	bl	8003f18 <stop_motors>

    // Update position only after successful movement
    robot.x = new_x;
 8003de0:	4a05      	ldr	r2, [pc, #20]	@ (8003df8 <move_forward+0xcc>)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 8003de6:	4a04      	ldr	r2, [pc, #16]	@ (8003df8 <move_forward+0xcc>)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	6053      	str	r3, [r2, #4]
    HAL_Delay(100); // Settling time
 8003dec:	2064      	movs	r0, #100	@ 0x64
 8003dee:	f000 ff6d 	bl	8004ccc <HAL_Delay>
}
 8003df2:	3728      	adds	r7, #40	@ 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20001418 	.word	0x20001418
 8003dfc:	0800de68 	.word	0x0800de68
 8003e00:	0800de78 	.word	0x0800de78
 8003e04:	0800d954 	.word	0x0800d954

08003e08 <turn_left>:


/**
 * @brief Turn left 90 degrees - FIXED VERSION (removed unused variables)
 */
void turn_left(void) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
    // REMOVED: unused variable 'start_left'
    int32_t start_right = get_right_encoder_total();
 8003e0e:	f7ff ff47 	bl	8003ca0 <get_right_encoder_total>
 8003e12:	60f8      	str	r0, [r7, #12]


    // Left motor reverse, right motor forward
	motor_set_fixed(0, false, 800); // Left reverse
 8003e14:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003e18:	2100      	movs	r1, #0
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f000 f896 	bl	8003f4c <motor_set_fixed>
	motor_set_fixed(1, true, 800);  // Right forward
 8003e20:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003e24:	2101      	movs	r1, #1
 8003e26:	2001      	movs	r0, #1
 8003e28:	f000 f890 	bl	8003f4c <motor_set_fixed>

    int32_t target_counts = ENCODER_COUNTS_PER_TURN;
 8003e2c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e30:	60bb      	str	r3, [r7, #8]
    while (1) {
        int32_t current_right = get_right_encoder_total();
 8003e32:	f7ff ff35 	bl	8003ca0 <get_right_encoder_total>
 8003e36:	6078      	str	r0, [r7, #4]
        int32_t right_traveled = abs(current_right - start_right);
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfb8      	it	lt
 8003e42:	425b      	neglt	r3, r3
 8003e44:	603b      	str	r3, [r7, #0]

        if (right_traveled >= target_counts) {
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	da03      	bge.n	8003e56 <turn_left+0x4e>
            break;
        }
        HAL_Delay(1);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f000 ff3c 	bl	8004ccc <HAL_Delay>
    while (1) {
 8003e54:	e7ed      	b.n	8003e32 <turn_left+0x2a>
            break;
 8003e56:	bf00      	nop
    }

    stop_motors();
 8003e58:	f000 f85e 	bl	8003f18 <stop_motors>
    robot.direction = (robot.direction + 3) % 4; // Turn left
 8003e5c:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <turn_left+0x7c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	3303      	adds	r3, #3
 8003e62:	425a      	negs	r2, r3
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	f002 0203 	and.w	r2, r2, #3
 8003e6c:	bf58      	it	pl
 8003e6e:	4253      	negpl	r3, r2
 8003e70:	4a04      	ldr	r2, [pc, #16]	@ (8003e84 <turn_left+0x7c>)
 8003e72:	6093      	str	r3, [r2, #8]
    HAL_Delay(200);
 8003e74:	20c8      	movs	r0, #200	@ 0xc8
 8003e76:	f000 ff29 	bl	8004ccc <HAL_Delay>
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20001418 	.word	0x20001418

08003e88 <turn_right>:

/**
 * @brief Turn right 90 degrees - FIXED VERSION (removed unused variables)
 */
void turn_right(void) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
    int32_t start_left = get_left_encoder_total();
 8003e8e:	f7ff fefd 	bl	8003c8c <get_left_encoder_total>
 8003e92:	60f8      	str	r0, [r7, #12]
    // REMOVED: unused variable 'start_right'

    // Left motor forward, right motor backward
    motor_set_fixed(0, true, 800);  // Left forward
 8003e94:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003e98:	2101      	movs	r1, #1
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f000 f856 	bl	8003f4c <motor_set_fixed>
    motor_set_fixed(1, false, 800); // Right reverse
 8003ea0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f000 f850 	bl	8003f4c <motor_set_fixed>

    int32_t target_counts = ENCODER_COUNTS_PER_TURN;
 8003eac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003eb0:	60bb      	str	r3, [r7, #8]
    while (1) {
        int32_t current_left = get_left_encoder_total();
 8003eb2:	f7ff feeb 	bl	8003c8c <get_left_encoder_total>
 8003eb6:	6078      	str	r0, [r7, #4]
        int32_t left_traveled = abs(current_left - start_left);
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	bfb8      	it	lt
 8003ec2:	425b      	neglt	r3, r3
 8003ec4:	603b      	str	r3, [r7, #0]

        if (left_traveled >= target_counts) {
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	da03      	bge.n	8003ed6 <turn_right+0x4e>
            break;
        }
        HAL_Delay(1);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f000 fefc 	bl	8004ccc <HAL_Delay>
    while (1) {
 8003ed4:	e7ed      	b.n	8003eb2 <turn_right+0x2a>
            break;
 8003ed6:	bf00      	nop
    }

    stop_motors();
 8003ed8:	f000 f81e 	bl	8003f18 <stop_motors>
    robot.direction = (robot.direction + 1) % 4; // Turn right
 8003edc:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <turn_right+0x7c>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	425a      	negs	r2, r3
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	f002 0203 	and.w	r2, r2, #3
 8003eec:	bf58      	it	pl
 8003eee:	4253      	negpl	r3, r2
 8003ef0:	4a04      	ldr	r2, [pc, #16]	@ (8003f04 <turn_right+0x7c>)
 8003ef2:	6093      	str	r3, [r2, #8]
    HAL_Delay(200);
 8003ef4:	20c8      	movs	r0, #200	@ 0xc8
 8003ef6:	f000 fee9 	bl	8004ccc <HAL_Delay>
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20001418 	.word	0x20001418

08003f08 <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
    turn_right();
 8003f0c:	f7ff ffbc 	bl	8003e88 <turn_right>
    turn_right();
 8003f10:	f7ff ffba 	bl	8003e88 <turn_right>
}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Left motor PWM = 0
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <stop_motors+0x30>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2200      	movs	r2, #0
 8003f22:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Left motor direction = 0
 8003f24:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <stop_motors+0x30>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);  // Right motor PWM = 0
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <stop_motors+0x30>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2200      	movs	r2, #0
 8003f32:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);  // Right motor direction = 0
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <stop_motors+0x30>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000340 	.word	0x20000340

08003f4c <motor_set_fixed>:
    } else {
        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);    // Direction HIGH for backward
    }
}
// Fixed motor_set function for DRV8833
void motor_set_fixed(uint8_t motor, bool forward, uint16_t duty) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
 8003f56:	460b      	mov	r3, r1
 8003f58:	71bb      	strb	r3, [r7, #6]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d115      	bne.n	8003f90 <motor_set_fixed+0x44>
        if (forward) {
 8003f64:	79bb      	ldrb	r3, [r7, #6]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <motor_set_fixed+0x32>
            // Left forward: IN1=PWM, IN2=LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe0 <motor_set_fixed+0x94>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	88ba      	ldrh	r2, [r7, #4]
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET); // PA7 = LOW
 8003f72:	2200      	movs	r2, #0
 8003f74:	2180      	movs	r1, #128	@ 0x80
 8003f76:	481b      	ldr	r0, [pc, #108]	@ (8003fe4 <motor_set_fixed+0x98>)
 8003f78:	f001 fde6 	bl	8005b48 <HAL_GPIO_WritePin>
            // Right reverse: IN3=LOW, IN4=PWM
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0); // PB0 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
        }
    }
}
 8003f7c:	e02b      	b.n	8003fd6 <motor_set_fixed+0x8a>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // PA6 = LOW
 8003f7e:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <motor_set_fixed+0x94>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 8003f86:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <motor_set_fixed+0x94>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	88ba      	ldrh	r2, [r7, #4]
 8003f8c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003f8e:	e022      	b.n	8003fd6 <motor_set_fixed+0x8a>
    	bool actual_forward = !forward;  // invert direction
 8003f90:	79bb      	ldrb	r3, [r7, #6]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf14      	ite	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	2300      	moveq	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f083 0301 	eor.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <motor_set_fixed+0x7a>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <motor_set_fixed+0x94>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	88ba      	ldrh	r2, [r7, #4]
 8003fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_GPIO_WritePin(MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, GPIO_PIN_RESET); // PB1 = LOW
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	480a      	ldr	r0, [pc, #40]	@ (8003fe8 <motor_set_fixed+0x9c>)
 8003fc0:	f001 fdc2 	bl	8005b48 <HAL_GPIO_WritePin>
}
 8003fc4:	e007      	b.n	8003fd6 <motor_set_fixed+0x8a>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0); // PB0 = LOW
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <motor_set_fixed+0x94>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 8003fce:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <motor_set_fixed+0x94>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	88ba      	ldrh	r2, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000340 	.word	0x20000340
 8003fe4:	40020000 	.word	0x40020000
 8003fe8:	40020400 	.word	0x40020400

08003fec <turn_on_emitters>:
static bool sensors_healthy = true;
/**
 * @brief Turn on IR emitters
 */
void turn_on_emitters(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_SET);
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ff6:	480d      	ldr	r0, [pc, #52]	@ (800402c <turn_on_emitters+0x40>)
 8003ff8:	f001 fda6 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_SET);
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004002:	480a      	ldr	r0, [pc, #40]	@ (800402c <turn_on_emitters+0x40>)
 8004004:	f001 fda0 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_SET);
 8004008:	2201      	movs	r2, #1
 800400a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800400e:	4808      	ldr	r0, [pc, #32]	@ (8004030 <turn_on_emitters+0x44>)
 8004010:	f001 fd9a 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_SET);
 8004014:	2201      	movs	r2, #1
 8004016:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800401a:	4805      	ldr	r0, [pc, #20]	@ (8004030 <turn_on_emitters+0x44>)
 800401c:	f001 fd94 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_Delay(2); // Emitter stabilization time
 8004020:	2002      	movs	r0, #2
 8004022:	f000 fe53 	bl	8004ccc <HAL_Delay>
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40020000 	.word	0x40020000
 8004030:	40020400 	.word	0x40020400

08004034 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800403e:	480b      	ldr	r0, [pc, #44]	@ (800406c <turn_off_emitters+0x38>)
 8004040:	f001 fd82 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8004044:	2200      	movs	r2, #0
 8004046:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800404a:	4808      	ldr	r0, [pc, #32]	@ (800406c <turn_off_emitters+0x38>)
 800404c:	f001 fd7c 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004056:	4806      	ldr	r0, [pc, #24]	@ (8004070 <turn_off_emitters+0x3c>)
 8004058:	f001 fd76 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004062:	4803      	ldr	r0, [pc, #12]	@ (8004070 <turn_off_emitters+0x3c>)
 8004064:	f001 fd70 	bl	8005b48 <HAL_GPIO_WritePin>
}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40020000 	.word	0x40020000
 8004070:	40020400 	.word	0x40020400

08004074 <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
    uint16_t adc_value = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	83fb      	strh	r3, [r7, #30]

    // Configure the channel
    sConfig.Channel = channel;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES; // Longer sampling time
 8004096:	2304      	movs	r3, #4
 8004098:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	4619      	mov	r1, r3
 80040a0:	4818      	ldr	r0, [pc, #96]	@ (8004104 <read_adc_channel+0x90>)
 80040a2:	f000 fffb 	bl	800509c <HAL_ADC_ConfigChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <read_adc_channel+0x42>
        send_bluetooth_message("❌ ADC channel config failed\r\n");
 80040ac:	4816      	ldr	r0, [pc, #88]	@ (8004108 <read_adc_channel+0x94>)
 80040ae:	f7fd fc2f 	bl	8001910 <send_bluetooth_message>
        return 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e022      	b.n	80040fc <read_adc_channel+0x88>
    }

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80040b6:	4813      	ldr	r0, [pc, #76]	@ (8004104 <read_adc_channel+0x90>)
 80040b8:	f000 fe70 	bl	8004d9c <HAL_ADC_Start>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <read_adc_channel+0x58>
        send_bluetooth_message("❌ ADC start failed\r\n");
 80040c2:	4812      	ldr	r0, [pc, #72]	@ (800410c <read_adc_channel+0x98>)
 80040c4:	f7fd fc24 	bl	8001910 <send_bluetooth_message>
        return 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e017      	b.n	80040fc <read_adc_channel+0x88>
    }

    // Wait for conversion with longer timeout
    if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 80040cc:	2164      	movs	r1, #100	@ 0x64
 80040ce:	480d      	ldr	r0, [pc, #52]	@ (8004104 <read_adc_channel+0x90>)
 80040d0:	f000 ff4b 	bl	8004f6a <HAL_ADC_PollForConversion>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <read_adc_channel+0x76>
        send_bluetooth_message("❌ ADC conversion timeout\r\n");
 80040da:	480d      	ldr	r0, [pc, #52]	@ (8004110 <read_adc_channel+0x9c>)
 80040dc:	f7fd fc18 	bl	8001910 <send_bluetooth_message>
        HAL_ADC_Stop(&hadc1);
 80040e0:	4808      	ldr	r0, [pc, #32]	@ (8004104 <read_adc_channel+0x90>)
 80040e2:	f000 ff0f 	bl	8004f04 <HAL_ADC_Stop>
        return 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e008      	b.n	80040fc <read_adc_channel+0x88>
    }

    // Get the converted value
    adc_value = HAL_ADC_GetValue(&hadc1);
 80040ea:	4806      	ldr	r0, [pc, #24]	@ (8004104 <read_adc_channel+0x90>)
 80040ec:	f000 ffc8 	bl	8005080 <HAL_ADC_GetValue>
 80040f0:	4603      	mov	r3, r0
 80040f2:	83fb      	strh	r3, [r7, #30]

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 80040f4:	4803      	ldr	r0, [pc, #12]	@ (8004104 <read_adc_channel+0x90>)
 80040f6:	f000 ff05 	bl	8004f04 <HAL_ADC_Stop>

    return adc_value;
 80040fa:	8bfb      	ldrh	r3, [r7, #30]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000210 	.word	0x20000210
 8004108:	0800dc5c 	.word	0x0800dc5c
 800410c:	0800dc7c 	.word	0x0800dc7c
 8004110:	0800dc94 	.word	0x0800dc94

08004114 <update_sensors>:

/**
 * @brief Update all sensor readings
 */
void update_sensors(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
    // Read ambient light levels (emitters off)
    turn_off_emitters();
 800411a:	f7ff ff8b 	bl	8004034 <turn_off_emitters>
    HAL_Delay(1);
 800411e:	2001      	movs	r0, #1
 8004120:	f000 fdd4 	bl	8004ccc <HAL_Delay>

    uint16_t ambient_front_right = read_adc_channel(ADC_CHANNEL_2);
 8004124:	2002      	movs	r0, #2
 8004126:	f7ff ffa5 	bl	8004074 <read_adc_channel>
 800412a:	4603      	mov	r3, r0
 800412c:	81fb      	strh	r3, [r7, #14]
    uint16_t ambient_side_right = read_adc_channel(ADC_CHANNEL_3);
 800412e:	2003      	movs	r0, #3
 8004130:	f7ff ffa0 	bl	8004074 <read_adc_channel>
 8004134:	4603      	mov	r3, r0
 8004136:	81bb      	strh	r3, [r7, #12]
    uint16_t ambient_side_left = read_adc_channel(ADC_CHANNEL_4);
 8004138:	2004      	movs	r0, #4
 800413a:	f7ff ff9b 	bl	8004074 <read_adc_channel>
 800413e:	4603      	mov	r3, r0
 8004140:	817b      	strh	r3, [r7, #10]
    uint16_t ambient_front_left = read_adc_channel(ADC_CHANNEL_5);
 8004142:	2005      	movs	r0, #5
 8004144:	f7ff ff96 	bl	8004074 <read_adc_channel>
 8004148:	4603      	mov	r3, r0
 800414a:	813b      	strh	r3, [r7, #8]

    // Read with emitters on
    turn_on_emitters();
 800414c:	f7ff ff4e 	bl	8003fec <turn_on_emitters>

    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 8004150:	2000      	movs	r0, #0
 8004152:	f7ff ff8f 	bl	8004074 <read_adc_channel>
 8004156:	4603      	mov	r3, r0
 8004158:	461a      	mov	r2, r3
 800415a:	4b4b      	ldr	r3, [pc, #300]	@ (8004288 <update_sensors+0x174>)
 800415c:	801a      	strh	r2, [r3, #0]
    sensors.front_right = read_adc_channel(ADC_CHANNEL_2) - ambient_front_right;
 800415e:	2002      	movs	r0, #2
 8004160:	f7ff ff88 	bl	8004074 <read_adc_channel>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	89fb      	ldrh	r3, [r7, #14]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	b29a      	uxth	r2, r3
 800416e:	4b46      	ldr	r3, [pc, #280]	@ (8004288 <update_sensors+0x174>)
 8004170:	805a      	strh	r2, [r3, #2]
    sensors.side_right = read_adc_channel(ADC_CHANNEL_3) - ambient_side_right;
 8004172:	2003      	movs	r0, #3
 8004174:	f7ff ff7e 	bl	8004074 <read_adc_channel>
 8004178:	4603      	mov	r3, r0
 800417a:	461a      	mov	r2, r3
 800417c:	89bb      	ldrh	r3, [r7, #12]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	b29a      	uxth	r2, r3
 8004182:	4b41      	ldr	r3, [pc, #260]	@ (8004288 <update_sensors+0x174>)
 8004184:	809a      	strh	r2, [r3, #4]
    sensors.side_left = read_adc_channel(ADC_CHANNEL_4) - ambient_side_left;
 8004186:	2004      	movs	r0, #4
 8004188:	f7ff ff74 	bl	8004074 <read_adc_channel>
 800418c:	4603      	mov	r3, r0
 800418e:	461a      	mov	r2, r3
 8004190:	897b      	ldrh	r3, [r7, #10]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	b29a      	uxth	r2, r3
 8004196:	4b3c      	ldr	r3, [pc, #240]	@ (8004288 <update_sensors+0x174>)
 8004198:	80da      	strh	r2, [r3, #6]
    sensors.front_left = read_adc_channel(ADC_CHANNEL_5) - ambient_front_left;
 800419a:	2005      	movs	r0, #5
 800419c:	f7ff ff6a 	bl	8004074 <read_adc_channel>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	4b37      	ldr	r3, [pc, #220]	@ (8004288 <update_sensors+0x174>)
 80041ac:	811a      	strh	r2, [r3, #8]

    // Turn off emitters to save power
    turn_off_emitters();
 80041ae:	f7ff ff41 	bl	8004034 <turn_off_emitters>

    // Process wall detection
    sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 80041b2:	4b35      	ldr	r3, [pc, #212]	@ (8004288 <update_sensors+0x174>)
 80041b4:	891b      	ldrh	r3, [r3, #8]
 80041b6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80041ba:	d804      	bhi.n	80041c6 <update_sensors+0xb2>
                         (sensors.front_right > WALL_THRESHOLD_FRONT);
 80041bc:	4b32      	ldr	r3, [pc, #200]	@ (8004288 <update_sensors+0x174>)
 80041be:	885b      	ldrh	r3, [r3, #2]
    sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 80041c0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80041c4:	d901      	bls.n	80041ca <update_sensors+0xb6>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <update_sensors+0xb8>
 80041ca:	2300      	movs	r3, #0
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <update_sensors+0x174>)
 80041d4:	729a      	strb	r2, [r3, #10]
    sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE);
 80041d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004288 <update_sensors+0x174>)
 80041d8:	88db      	ldrh	r3, [r3, #6]
 80041da:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80041de:	4293      	cmp	r3, r2
 80041e0:	bf8c      	ite	hi
 80041e2:	2301      	movhi	r3, #1
 80041e4:	2300      	movls	r3, #0
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	4b27      	ldr	r3, [pc, #156]	@ (8004288 <update_sensors+0x174>)
 80041ea:	72da      	strb	r2, [r3, #11]
    sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE);
 80041ec:	4b26      	ldr	r3, [pc, #152]	@ (8004288 <update_sensors+0x174>)
 80041ee:	889b      	ldrh	r3, [r3, #4]
 80041f0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bf8c      	ite	hi
 80041f8:	2301      	movhi	r3, #1
 80041fa:	2300      	movls	r3, #0
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4b22      	ldr	r3, [pc, #136]	@ (8004288 <update_sensors+0x174>)
 8004200:	731a      	strb	r2, [r3, #12]


    // Check for sensor health
    bool current_reading_valid = (sensors.battery > 100) && // Reasonable battery reading
 8004202:	4b21      	ldr	r3, [pc, #132]	@ (8004288 <update_sensors+0x174>)
 8004204:	881b      	ldrh	r3, [r3, #0]
                               (sensors.front_left < 4000) && // Not maxed out
                               (sensors.front_right < 4000) &&
                               (sensors.side_left < 4000) &&
 8004206:	2b64      	cmp	r3, #100	@ 0x64
 8004208:	d915      	bls.n	8004236 <update_sensors+0x122>
                               (sensors.front_left < 4000) && // Not maxed out
 800420a:	4b1f      	ldr	r3, [pc, #124]	@ (8004288 <update_sensors+0x174>)
 800420c:	891b      	ldrh	r3, [r3, #8]
    bool current_reading_valid = (sensors.battery > 100) && // Reasonable battery reading
 800420e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8004212:	d210      	bcs.n	8004236 <update_sensors+0x122>
                               (sensors.front_right < 4000) &&
 8004214:	4b1c      	ldr	r3, [pc, #112]	@ (8004288 <update_sensors+0x174>)
 8004216:	885b      	ldrh	r3, [r3, #2]
                               (sensors.front_left < 4000) && // Not maxed out
 8004218:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800421c:	d20b      	bcs.n	8004236 <update_sensors+0x122>
                               (sensors.side_left < 4000) &&
 800421e:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <update_sensors+0x174>)
 8004220:	88db      	ldrh	r3, [r3, #6]
                               (sensors.front_right < 4000) &&
 8004222:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8004226:	d206      	bcs.n	8004236 <update_sensors+0x122>
                               (sensors.side_right < 4000);
 8004228:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <update_sensors+0x174>)
 800422a:	889b      	ldrh	r3, [r3, #4]
                               (sensors.side_left < 4000) &&
 800422c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8004230:	d201      	bcs.n	8004236 <update_sensors+0x122>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <update_sensors+0x124>
 8004236:	2300      	movs	r3, #0
    bool current_reading_valid = (sensors.battery > 100) && // Reasonable battery reading
 8004238:	71fb      	strb	r3, [r7, #7]
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	71fb      	strb	r3, [r7, #7]

    if (!current_reading_valid) {
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	f083 0301 	eor.w	r3, r3, #1
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <update_sensors+0x156>
        sensor_error_count++;
 800424e:	4b0f      	ldr	r3, [pc, #60]	@ (800428c <update_sensors+0x178>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <update_sensors+0x178>)
 8004258:	701a      	strb	r2, [r3, #0]
        if (sensor_error_count > 5) {
 800425a:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <update_sensors+0x178>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d90d      	bls.n	800427e <update_sensors+0x16a>
            sensors_healthy = false;
 8004262:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <update_sensors+0x17c>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
            // Don't halt - allow robot to continue with degraded sensors
        }
    } else {
        if (sensor_error_count > 0) sensor_error_count--; // Recover slowly
    }
}
 8004268:	e009      	b.n	800427e <update_sensors+0x16a>
        if (sensor_error_count > 0) sensor_error_count--; // Recover slowly
 800426a:	4b08      	ldr	r3, [pc, #32]	@ (800428c <update_sensors+0x178>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <update_sensors+0x16a>
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <update_sensors+0x178>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	3b01      	subs	r3, #1
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4b04      	ldr	r3, [pc, #16]	@ (800428c <update_sensors+0x178>)
 800427c:	701a      	strb	r2, [r3, #0]
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	2000142c 	.word	0x2000142c
 800428c:	20001480 	.word	0x20001480
 8004290:	20000004 	.word	0x20000004

08004294 <calibrate_sensors>:

/**
 * @brief Calibrate sensors (placeholder for now)
 */
void calibrate_sensors(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
    send_bluetooth_message("Calibrating sensors...\r\n");
 800429a:	480c      	ldr	r0, [pc, #48]	@ (80042cc <calibrate_sensors+0x38>)
 800429c:	f7fd fb38 	bl	8001910 <send_bluetooth_message>

    // Take baseline readings
    for (int i = 0; i < 10; i++) {
 80042a0:	2300      	movs	r3, #0
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	e007      	b.n	80042b6 <calibrate_sensors+0x22>
        update_sensors();
 80042a6:	f7ff ff35 	bl	8004114 <update_sensors>
        HAL_Delay(50);
 80042aa:	2032      	movs	r0, #50	@ 0x32
 80042ac:	f000 fd0e 	bl	8004ccc <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3301      	adds	r3, #1
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b09      	cmp	r3, #9
 80042ba:	ddf4      	ble.n	80042a6 <calibrate_sensors+0x12>
    }

    send_bluetooth_message("Sensor calibration complete\r\n");
 80042bc:	4804      	ldr	r0, [pc, #16]	@ (80042d0 <calibrate_sensors+0x3c>)
 80042be:	f7fd fb27 	bl	8001910 <send_bluetooth_message>
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	0800dcb4 	.word	0x0800dcb4
 80042d0:	0800dcd0 	.word	0x0800dcd0

080042d4 <adc_system_diagnostics>:


void adc_system_diagnostics(void) {
 80042d4:	b5b0      	push	{r4, r5, r7, lr}
 80042d6:	b08e      	sub	sp, #56	@ 0x38
 80042d8:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 80042da:	484b      	ldr	r0, [pc, #300]	@ (8004408 <adc_system_diagnostics+0x134>)
 80042dc:	f7fd fb18 	bl	8001910 <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 80042e0:	4b4a      	ldr	r3, [pc, #296]	@ (800440c <adc_system_diagnostics+0x138>)
 80042e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 80042ec:	4848      	ldr	r0, [pc, #288]	@ (8004410 <adc_system_diagnostics+0x13c>)
 80042ee:	f7fd fb0f 	bl	8001910 <send_bluetooth_message>
 80042f2:	e002      	b.n	80042fa <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 80042f4:	4847      	ldr	r0, [pc, #284]	@ (8004414 <adc_system_diagnostics+0x140>)
 80042f6:	f7fd fb0b 	bl	8001910 <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 80042fa:	4b44      	ldr	r3, [pc, #272]	@ (800440c <adc_system_diagnostics+0x138>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 8004306:	4844      	ldr	r0, [pc, #272]	@ (8004418 <adc_system_diagnostics+0x144>)
 8004308:	f7fd fb02 	bl	8001910 <send_bluetooth_message>
 800430c:	e002      	b.n	8004314 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 800430e:	4843      	ldr	r0, [pc, #268]	@ (800441c <adc_system_diagnostics+0x148>)
 8004310:	f7fd fafe 	bl	8001910 <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8004314:	4b42      	ldr	r3, [pc, #264]	@ (8004420 <adc_system_diagnostics+0x14c>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	2b01      	cmp	r3, #1
 800431a:	d103      	bne.n	8004324 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 800431c:	4841      	ldr	r0, [pc, #260]	@ (8004424 <adc_system_diagnostics+0x150>)
 800431e:	f7fd faf7 	bl	8001910 <send_bluetooth_message>
 8004322:	e005      	b.n	8004330 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8004324:	4b3e      	ldr	r3, [pc, #248]	@ (8004420 <adc_system_diagnostics+0x14c>)
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	4619      	mov	r1, r3
 800432a:	483f      	ldr	r0, [pc, #252]	@ (8004428 <adc_system_diagnostics+0x154>)
 800432c:	f7fd fb06 	bl	800193c <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8004330:	483e      	ldr	r0, [pc, #248]	@ (800442c <adc_system_diagnostics+0x158>)
 8004332:	f7fd faed 	bl	8001910 <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8004336:	4b3e      	ldr	r3, [pc, #248]	@ (8004430 <adc_system_diagnostics+0x15c>)
 8004338:	f107 0420 	add.w	r4, r7, #32
 800433c:	461d      	mov	r5, r3
 800433e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 8004346:	4b3b      	ldr	r3, [pc, #236]	@ (8004434 <adc_system_diagnostics+0x160>)
 8004348:	f107 040c 	add.w	r4, r7, #12
 800434c:	461d      	mov	r5, r3
 800434e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004352:	682b      	ldr	r3, [r5, #0]
 8004354:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
 800435a:	e04b      	b.n	80043f4 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	3338      	adds	r3, #56	@ 0x38
 8004362:	443b      	add	r3, r7
 8004364:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fe83 	bl	8004074 <read_adc_channel>
 800436e:	4603      	mov	r3, r0
 8004370:	461a      	mov	r2, r3
 8004372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	3338      	adds	r3, #56	@ 0x38
 8004378:	443b      	add	r3, r7
 800437a:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 800437e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	3338      	adds	r3, #56	@ 0x38
 8004384:	443b      	add	r3, r7
 8004386:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 800438a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	3338      	adds	r3, #56	@ 0x38
 8004390:	443b      	add	r3, r7
 8004392:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01f      	beq.n	80043da <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 800439a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	3338      	adds	r3, #56	@ 0x38
 80043a0:	443b      	add	r3, r7
 80043a2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d015      	beq.n	80043d6 <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80043aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	3338      	adds	r3, #56	@ 0x38
 80043b0:	443b      	add	r3, r7
 80043b2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d00b      	beq.n	80043d2 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80043ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	3338      	adds	r3, #56	@ 0x38
 80043c0:	443b      	add	r3, r7
 80043c2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d101      	bne.n	80043ce <adc_system_diagnostics+0xfa>
 80043ca:	2204      	movs	r2, #4
 80043cc:	e006      	b.n	80043dc <adc_system_diagnostics+0x108>
 80043ce:	2205      	movs	r2, #5
 80043d0:	e004      	b.n	80043dc <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80043d2:	2203      	movs	r2, #3
 80043d4:	e002      	b.n	80043dc <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80043d6:	2202      	movs	r2, #2
 80043d8:	e000      	b.n	80043dc <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80043da:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80043dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	3338      	adds	r3, #56	@ 0x38
 80043e2:	443b      	add	r3, r7
 80043e4:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80043e8:	4813      	ldr	r0, [pc, #76]	@ (8004438 <adc_system_diagnostics+0x164>)
 80043ea:	f7fd faa7 	bl	800193c <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 80043ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f0:	3301      	adds	r3, #1
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	ddb0      	ble.n	800435c <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 80043fa:	4810      	ldr	r0, [pc, #64]	@ (800443c <adc_system_diagnostics+0x168>)
 80043fc:	f7fd fa88 	bl	8001910 <send_bluetooth_message>
}
 8004400:	bf00      	nop
 8004402:	3738      	adds	r7, #56	@ 0x38
 8004404:	46bd      	mov	sp, r7
 8004406:	bdb0      	pop	{r4, r5, r7, pc}
 8004408:	0800dcf0 	.word	0x0800dcf0
 800440c:	40023800 	.word	0x40023800
 8004410:	0800dd14 	.word	0x0800dd14
 8004414:	0800dd30 	.word	0x0800dd30
 8004418:	0800dd4c 	.word	0x0800dd4c
 800441c:	0800dd68 	.word	0x0800dd68
 8004420:	20000210 	.word	0x20000210
 8004424:	0800dd84 	.word	0x0800dd84
 8004428:	0800dd9c 	.word	0x0800dd9c
 800442c:	0800ddb4 	.word	0x0800ddb4
 8004430:	0800de08 	.word	0x0800de08
 8004434:	0800de54 	.word	0x0800de54
 8004438:	0800ddd4 	.word	0x0800ddd4
 800443c:	0800dde4 	.word	0x0800dde4

08004440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_MspInit+0x4c>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	4a0f      	ldr	r2, [pc, #60]	@ (800448c <HAL_MspInit+0x4c>)
 8004450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004454:	6453      	str	r3, [r2, #68]	@ 0x44
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <HAL_MspInit+0x4c>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	4b09      	ldr	r3, [pc, #36]	@ (800448c <HAL_MspInit+0x4c>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	4a08      	ldr	r2, [pc, #32]	@ (800448c <HAL_MspInit+0x4c>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	@ 0x40
 8004472:	4b06      	ldr	r3, [pc, #24]	@ (800448c <HAL_MspInit+0x4c>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800

08004490 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a17      	ldr	r2, [pc, #92]	@ (800450c <HAL_ADC_MspInit+0x7c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d127      	bne.n	8004502 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	4b16      	ldr	r3, [pc, #88]	@ (8004510 <HAL_ADC_MspInit+0x80>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	4a15      	ldr	r2, [pc, #84]	@ (8004510 <HAL_ADC_MspInit+0x80>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044c2:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <HAL_ADC_MspInit+0x80>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <HAL_ADC_MspInit+0x80>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004510 <HAL_ADC_MspInit+0x80>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80044de:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <HAL_ADC_MspInit+0x80>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 80044ea:	233d      	movs	r3, #61	@ 0x3d
 80044ec:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044ee:	2303      	movs	r3, #3
 80044f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f6:	f107 0314 	add.w	r3, r7, #20
 80044fa:	4619      	mov	r1, r3
 80044fc:	4805      	ldr	r0, [pc, #20]	@ (8004514 <HAL_ADC_MspInit+0x84>)
 80044fe:	f001 f99f 	bl	8005840 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004502:	bf00      	nop
 8004504:	3728      	adds	r7, #40	@ 0x28
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40012000 	.word	0x40012000
 8004510:	40023800 	.word	0x40023800
 8004514:	40020000 	.word	0x40020000

08004518 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	@ 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a19      	ldr	r2, [pc, #100]	@ (800459c <HAL_SPI_MspInit+0x84>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d12c      	bne.n	8004594 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	4b18      	ldr	r3, [pc, #96]	@ (80045a0 <HAL_SPI_MspInit+0x88>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <HAL_SPI_MspInit+0x88>)
 8004544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004548:	6413      	str	r3, [r2, #64]	@ 0x40
 800454a:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <HAL_SPI_MspInit+0x88>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	4b11      	ldr	r3, [pc, #68]	@ (80045a0 <HAL_SPI_MspInit+0x88>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	4a10      	ldr	r2, [pc, #64]	@ (80045a0 <HAL_SPI_MspInit+0x88>)
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	6313      	str	r3, [r2, #48]	@ 0x30
 8004566:	4b0e      	ldr	r3, [pc, #56]	@ (80045a0 <HAL_SPI_MspInit+0x88>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 8004572:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004580:	2303      	movs	r3, #3
 8004582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004584:	2305      	movs	r3, #5
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	4619      	mov	r1, r3
 800458e:	4805      	ldr	r0, [pc, #20]	@ (80045a4 <HAL_SPI_MspInit+0x8c>)
 8004590:	f001 f956 	bl	8005840 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004594:	bf00      	nop
 8004596:	3728      	adds	r7, #40	@ 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40003800 	.word	0x40003800
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40020400 	.word	0x40020400

080045a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a18      	ldr	r2, [pc, #96]	@ (8004618 <HAL_TIM_Base_MspInit+0x70>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d116      	bne.n	80045e8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	4b17      	ldr	r3, [pc, #92]	@ (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	4a16      	ldr	r2, [pc, #88]	@ (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045ca:	4b14      	ldr	r3, [pc, #80]	@ (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2107      	movs	r1, #7
 80045da:	2019      	movs	r0, #25
 80045dc:	f001 f867 	bl	80056ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045e0:	2019      	movs	r0, #25
 80045e2:	f001 f880 	bl	80056e6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80045e6:	e012      	b.n	800460e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004620 <HAL_TIM_Base_MspInit+0x78>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	4b09      	ldr	r3, [pc, #36]	@ (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	4a08      	ldr	r2, [pc, #32]	@ (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	6413      	str	r3, [r2, #64]	@ 0x40
 8004602:	4b06      	ldr	r3, [pc, #24]	@ (800461c <HAL_TIM_Base_MspInit+0x74>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40023800 	.word	0x40023800
 8004620:	40000400 	.word	0x40000400

08004624 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	@ 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 031c 	add.w	r3, r7, #28
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d14b      	bne.n	80046de <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	4b3f      	ldr	r3, [pc, #252]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	4a3e      	ldr	r2, [pc, #248]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6413      	str	r3, [r2, #64]	@ 0x40
 8004656:	4b3c      	ldr	r3, [pc, #240]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	4b38      	ldr	r3, [pc, #224]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	4a37      	ldr	r2, [pc, #220]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6313      	str	r3, [r2, #48]	@ 0x30
 8004672:	4b35      	ldr	r3, [pc, #212]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	4b31      	ldr	r3, [pc, #196]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	4a30      	ldr	r2, [pc, #192]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	6313      	str	r3, [r2, #48]	@ 0x30
 800468e:	4b2e      	ldr	r3, [pc, #184]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 800469a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046ac:	2301      	movs	r3, #1
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 80046b0:	f107 031c 	add.w	r3, r7, #28
 80046b4:	4619      	mov	r1, r3
 80046b6:	4825      	ldr	r0, [pc, #148]	@ (800474c <HAL_TIM_Encoder_MspInit+0x128>)
 80046b8:	f001 f8c2 	bl	8005840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 80046bc:	2308      	movs	r3, #8
 80046be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046cc:	2301      	movs	r3, #1
 80046ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 80046d0:	f107 031c 	add.w	r3, r7, #28
 80046d4:	4619      	mov	r1, r3
 80046d6:	481e      	ldr	r0, [pc, #120]	@ (8004750 <HAL_TIM_Encoder_MspInit+0x12c>)
 80046d8:	f001 f8b2 	bl	8005840 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80046dc:	e030      	b.n	8004740 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004754 <HAL_TIM_Encoder_MspInit+0x130>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d12b      	bne.n	8004740 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	4b16      	ldr	r3, [pc, #88]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	4a15      	ldr	r2, [pc, #84]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80046f8:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004704:	2300      	movs	r3, #0
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	4b0f      	ldr	r3, [pc, #60]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470c:	4a0e      	ldr	r2, [pc, #56]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 800470e:	f043 0302 	orr.w	r3, r3, #2
 8004712:	6313      	str	r3, [r2, #48]	@ 0x30
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x124>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 8004720:	23c0      	movs	r3, #192	@ 0xc0
 8004722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004724:	2302      	movs	r3, #2
 8004726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472c:	2300      	movs	r3, #0
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004730:	2302      	movs	r3, #2
 8004732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004734:	f107 031c 	add.w	r3, r7, #28
 8004738:	4619      	mov	r1, r3
 800473a:	4805      	ldr	r0, [pc, #20]	@ (8004750 <HAL_TIM_Encoder_MspInit+0x12c>)
 800473c:	f001 f880 	bl	8005840 <HAL_GPIO_Init>
}
 8004740:	bf00      	nop
 8004742:	3730      	adds	r7, #48	@ 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40023800 	.word	0x40023800
 800474c:	40020000 	.word	0x40020000
 8004750:	40020400 	.word	0x40020400
 8004754:	40000800 	.word	0x40000800

08004758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	@ 0x28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004760:	f107 0314 	add.w	r3, r7, #20
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a33      	ldr	r2, [pc, #204]	@ (8004844 <HAL_TIM_MspPostInit+0xec>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d11f      	bne.n	80047ba <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	4b32      	ldr	r3, [pc, #200]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	4a31      	ldr	r2, [pc, #196]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6313      	str	r3, [r2, #48]	@ 0x30
 800478a:	4b2f      	ldr	r3, [pc, #188]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 8004796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800479a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a4:	2300      	movs	r3, #0
 80047a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047a8:	2301      	movs	r3, #1
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 80047ac:	f107 0314 	add.w	r3, r7, #20
 80047b0:	4619      	mov	r1, r3
 80047b2:	4826      	ldr	r0, [pc, #152]	@ (800484c <HAL_TIM_MspPostInit+0xf4>)
 80047b4:	f001 f844 	bl	8005840 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80047b8:	e040      	b.n	800483c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a24      	ldr	r2, [pc, #144]	@ (8004850 <HAL_TIM_MspPostInit+0xf8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d13b      	bne.n	800483c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e0:	2300      	movs	r3, #0
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	4b18      	ldr	r3, [pc, #96]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	4a17      	ldr	r2, [pc, #92]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 80047ea:	f043 0302 	orr.w	r3, r3, #2
 80047ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f0:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <HAL_TIM_MspPostInit+0xf0>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 80047fc:	23c0      	movs	r3, #192	@ 0xc0
 80047fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004808:	2300      	movs	r3, #0
 800480a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800480c:	2302      	movs	r3, #2
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	4619      	mov	r1, r3
 8004816:	480d      	ldr	r0, [pc, #52]	@ (800484c <HAL_TIM_MspPostInit+0xf4>)
 8004818:	f001 f812 	bl	8005840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 800481c:	2303      	movs	r3, #3
 800481e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004820:	2302      	movs	r3, #2
 8004822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004828:	2300      	movs	r3, #0
 800482a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800482c:	2302      	movs	r3, #2
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	4619      	mov	r1, r3
 8004836:	4807      	ldr	r0, [pc, #28]	@ (8004854 <HAL_TIM_MspPostInit+0xfc>)
 8004838:	f001 f802 	bl	8005840 <HAL_GPIO_Init>
}
 800483c:	bf00      	nop
 800483e:	3728      	adds	r7, #40	@ 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40010000 	.word	0x40010000
 8004848:	40023800 	.word	0x40023800
 800484c:	40020000 	.word	0x40020000
 8004850:	40000400 	.word	0x40000400
 8004854:	40020400 	.word	0x40020400

08004858 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	@ 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <HAL_UART_MspInit+0x94>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d134      	bne.n	80048e4 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	4b1c      	ldr	r3, [pc, #112]	@ (80048f0 <HAL_UART_MspInit+0x98>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	4a1b      	ldr	r2, [pc, #108]	@ (80048f0 <HAL_UART_MspInit+0x98>)
 8004884:	f043 0320 	orr.w	r3, r3, #32
 8004888:	6453      	str	r3, [r2, #68]	@ 0x44
 800488a:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <HAL_UART_MspInit+0x98>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <HAL_UART_MspInit+0x98>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	4a14      	ldr	r2, [pc, #80]	@ (80048f0 <HAL_UART_MspInit+0x98>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048a6:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <HAL_UART_MspInit+0x98>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 80048b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80048b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b8:	2302      	movs	r3, #2
 80048ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048c0:	2303      	movs	r3, #3
 80048c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048c4:	2308      	movs	r3, #8
 80048c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4619      	mov	r1, r3
 80048ce:	4809      	ldr	r0, [pc, #36]	@ (80048f4 <HAL_UART_MspInit+0x9c>)
 80048d0:	f000 ffb6 	bl	8005840 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2106      	movs	r1, #6
 80048d8:	2047      	movs	r0, #71	@ 0x47
 80048da:	f000 fee8 	bl	80056ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80048de:	2047      	movs	r0, #71	@ 0x47
 80048e0:	f000 ff01 	bl	80056e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 80048e4:	bf00      	nop
 80048e6:	3728      	adds	r7, #40	@ 0x28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40011400 	.word	0x40011400
 80048f0:	40023800 	.word	0x40023800
 80048f4:	40020000 	.word	0x40020000

080048f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <NMI_Handler+0x4>

08004900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004904:	bf00      	nop
 8004906:	e7fd      	b.n	8004904 <HardFault_Handler+0x4>

08004908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800490c:	bf00      	nop
 800490e:	e7fd      	b.n	800490c <MemManage_Handler+0x4>

08004910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <BusFault_Handler+0x4>

08004918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <UsageFault_Handler+0x4>

08004920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004932:	bf00      	nop
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004940:	bf00      	nop
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800494e:	f000 f99d 	bl	8004c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}

08004956 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 800495a:	2002      	movs	r0, #2
 800495c:	f001 f928 	bl	8005bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004960:	bf00      	nop
 8004962:	bd80      	pop	{r7, pc}

08004964 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004968:	4802      	ldr	r0, [pc, #8]	@ (8004974 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800496a:	f002 fe53 	bl	8007614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800496e:	bf00      	nop
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	200002b0 	.word	0x200002b0

08004978 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 800497c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004980:	f001 f916 	bl	8005bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004984:	bf00      	nop
 8004986:	bd80      	pop	{r7, pc}

08004988 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800498c:	4802      	ldr	r0, [pc, #8]	@ (8004998 <USART6_IRQHandler+0x10>)
 800498e:	f003 fd6f 	bl	8008470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	200003d0 	.word	0x200003d0

0800499c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return 1;
 80049a0:	2301      	movs	r3, #1
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <_kill>:

int _kill(int pid, int sig)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049b6:	f005 fa81 	bl	8009ebc <__errno>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2216      	movs	r2, #22
 80049be:	601a      	str	r2, [r3, #0]
  return -1;
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_exit>:

void _exit (int status)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049d4:	f04f 31ff 	mov.w	r1, #4294967295
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ffe7 	bl	80049ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80049de:	bf00      	nop
 80049e0:	e7fd      	b.n	80049de <_exit+0x12>

080049e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e00a      	b.n	8004a0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049f4:	f3af 8000 	nop.w
 80049f8:	4601      	mov	r1, r0
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	60ba      	str	r2, [r7, #8]
 8004a00:	b2ca      	uxtb	r2, r1
 8004a02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3301      	adds	r3, #1
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	dbf0      	blt.n	80049f4 <_read+0x12>
  }

  return len;
 8004a12:	687b      	ldr	r3, [r7, #4]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	e009      	b.n	8004a42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	60ba      	str	r2, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	dbf1      	blt.n	8004a2e <_write+0x12>
  }
  return len;
 8004a4a:	687b      	ldr	r3, [r7, #4]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <_close>:

int _close(int file)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a7c:	605a      	str	r2, [r3, #4]
  return 0;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <_isatty>:

int _isatty(int file)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a94:	2301      	movs	r3, #1
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ac4:	4a14      	ldr	r2, [pc, #80]	@ (8004b18 <_sbrk+0x5c>)
 8004ac6:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <_sbrk+0x60>)
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ad0:	4b13      	ldr	r3, [pc, #76]	@ (8004b20 <_sbrk+0x64>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	@ (8004b20 <_sbrk+0x64>)
 8004ada:	4a12      	ldr	r2, [pc, #72]	@ (8004b24 <_sbrk+0x68>)
 8004adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ade:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <_sbrk+0x64>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d207      	bcs.n	8004afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004aec:	f005 f9e6 	bl	8009ebc <__errno>
 8004af0:	4603      	mov	r3, r0
 8004af2:	220c      	movs	r2, #12
 8004af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	e009      	b.n	8004b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004afc:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <_sbrk+0x64>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b02:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <_sbrk+0x64>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	4a05      	ldr	r2, [pc, #20]	@ (8004b20 <_sbrk+0x64>)
 8004b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20020000 	.word	0x20020000
 8004b1c:	00000400 	.word	0x00000400
 8004b20:	20001484 	.word	0x20001484
 8004b24:	200015d8 	.word	0x200015d8

08004b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <SystemInit+0x20>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	4a05      	ldr	r2, [pc, #20]	@ (8004b48 <SystemInit+0x20>)
 8004b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	460a      	mov	r2, r1
 8004b56:	71fb      	strb	r3, [r7, #7]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2110      	movs	r1, #16
 8004b6c:	4808      	ldr	r0, [pc, #32]	@ (8004b90 <led_status+0x44>)
 8004b6e:	f000 ffeb 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004b72:	79bb      	ldrb	r3, [r7, #6]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2120      	movs	r1, #32
 8004b82:	4803      	ldr	r0, [pc, #12]	@ (8004b90 <led_status+0x44>)
 8004b84:	f000 ffe0 	bl	8005b48 <HAL_GPIO_WritePin>
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40020400 	.word	0x40020400

08004b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004bcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b98:	f7ff ffc6 	bl	8004b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b9c:	480c      	ldr	r0, [pc, #48]	@ (8004bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b9e:	490d      	ldr	r1, [pc, #52]	@ (8004bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ba4:	e002      	b.n	8004bac <LoopCopyDataInit>

08004ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004baa:	3304      	adds	r3, #4

08004bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bb0:	d3f9      	bcc.n	8004ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8004be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bb8:	e001      	b.n	8004bbe <LoopFillZerobss>

08004bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bbc:	3204      	adds	r2, #4

08004bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bc0:	d3fb      	bcc.n	8004bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bc2:	f005 f981 	bl	8009ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bc6:	f7fd fa79 	bl	80020bc <main>
  bx  lr    
 8004bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bd4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004bd8:	0800e234 	.word	0x0800e234
  ldr r2, =_sbss
 8004bdc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004be0:	200015d8 	.word	0x200015d8

08004be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004be4:	e7fe      	b.n	8004be4 <ADC_IRQHandler>
	...

08004be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bec:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <HAL_Init+0x40>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8004c28 <HAL_Init+0x40>)
 8004bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <HAL_Init+0x40>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8004c28 <HAL_Init+0x40>)
 8004bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c04:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <HAL_Init+0x40>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a07      	ldr	r2, [pc, #28]	@ (8004c28 <HAL_Init+0x40>)
 8004c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c10:	2003      	movs	r0, #3
 8004c12:	f000 fd41 	bl	8005698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c16:	200f      	movs	r0, #15
 8004c18:	f000 f808 	bl	8004c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c1c:	f7ff fc10 	bl	8004440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023c00 	.word	0x40023c00

08004c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c34:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <HAL_InitTick+0x54>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <HAL_InitTick+0x58>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fd59 	bl	8005702 <HAL_SYSTICK_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e00e      	b.n	8004c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b0f      	cmp	r3, #15
 8004c5e:	d80a      	bhi.n	8004c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c60:	2200      	movs	r2, #0
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	f000 fd21 	bl	80056ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c6c:	4a06      	ldr	r2, [pc, #24]	@ (8004c88 <HAL_InitTick+0x5c>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000008 	.word	0x20000008
 8004c84:	20000010 	.word	0x20000010
 8004c88:	2000000c 	.word	0x2000000c

08004c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c90:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_IncTick+0x20>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_IncTick+0x24>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a04      	ldr	r2, [pc, #16]	@ (8004cb0 <HAL_IncTick+0x24>)
 8004c9e:	6013      	str	r3, [r2, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	20001488 	.word	0x20001488

08004cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cb8:	4b03      	ldr	r3, [pc, #12]	@ (8004cc8 <HAL_GetTick+0x14>)
 8004cba:	681b      	ldr	r3, [r3, #0]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20001488 	.word	0x20001488

08004ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cd4:	f7ff ffee 	bl	8004cb4 <HAL_GetTick>
 8004cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d005      	beq.n	8004cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <HAL_Delay+0x44>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cf2:	bf00      	nop
 8004cf4:	f7ff ffde 	bl	8004cb4 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d8f7      	bhi.n	8004cf4 <HAL_Delay+0x28>
  {
  }
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000010 	.word	0x20000010

08004d14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e033      	b.n	8004d92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fbac 	bl	8004490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d118      	bne.n	8004d84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d5a:	f023 0302 	bic.w	r3, r3, #2
 8004d5e:	f043 0202 	orr.w	r2, r3, #2
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 faca 	bl	8005300 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d82:	e001      	b.n	8004d88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_Start+0x1a>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e097      	b.n	8004ee6 <HAL_ADC_Start+0x14a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d018      	beq.n	8004dfe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ddc:	4b45      	ldr	r3, [pc, #276]	@ (8004ef4 <HAL_ADC_Start+0x158>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a45      	ldr	r2, [pc, #276]	@ (8004ef8 <HAL_ADC_Start+0x15c>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	0c9a      	lsrs	r2, r3, #18
 8004de8:	4613      	mov	r3, r2
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4413      	add	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004df0:	e002      	b.n	8004df8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f9      	bne.n	8004df2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d15f      	bne.n	8004ecc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004e14:	f023 0301 	bic.w	r3, r3, #1
 8004e18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004e36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e4a:	d106      	bne.n	8004e5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e50:	f023 0206 	bic.w	r2, r3, #6
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e58:	e002      	b.n	8004e60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e68:	4b24      	ldr	r3, [pc, #144]	@ (8004efc <HAL_ADC_Start+0x160>)
 8004e6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004e74:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10f      	bne.n	8004ea2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d129      	bne.n	8004ee4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	e020      	b.n	8004ee4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <HAL_ADC_Start+0x164>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_ADC_Start+0x148>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d114      	bne.n	8004ee4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ec8:	609a      	str	r2, [r3, #8]
 8004eca:	e00b      	b.n	8004ee4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed0:	f043 0210 	orr.w	r2, r3, #16
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004edc:	f043 0201 	orr.w	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000008 	.word	0x20000008
 8004ef8:	431bde83 	.word	0x431bde83
 8004efc:	40012300 	.word	0x40012300
 8004f00:	40012000 	.word	0x40012000

08004f04 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_ADC_Stop+0x16>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e021      	b.n	8004f5e <HAL_ADC_Stop+0x5a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	f043 0201 	orr.w	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f86:	d113      	bne.n	8004fb0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f96:	d10b      	bne.n	8004fb0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	f043 0220 	orr.w	r2, r3, #32
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e063      	b.n	8005078 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fb0:	f7ff fe80 	bl	8004cb4 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fb6:	e021      	b.n	8004ffc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d01d      	beq.n	8004ffc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_ADC_PollForConversion+0x6c>
 8004fc6:	f7ff fe75 	bl	8004cb4 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d212      	bcs.n	8004ffc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d00b      	beq.n	8004ffc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	f043 0204 	orr.w	r2, r3, #4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03d      	b.n	8005078 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d1d6      	bne.n	8004fb8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f06f 0212 	mvn.w	r2, #18
 8005012:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d123      	bne.n	8005076 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11f      	bne.n	8005076 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800504e:	2b00      	cmp	r3, #0
 8005050:	d111      	bne.n	8005076 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x1c>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e113      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x244>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d925      	bls.n	8005114 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68d9      	ldr	r1, [r3, #12]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	4613      	mov	r3, r2
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	4413      	add	r3, r2
 80050dc:	3b1e      	subs	r3, #30
 80050de:	2207      	movs	r2, #7
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43da      	mvns	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	400a      	ands	r2, r1
 80050ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68d9      	ldr	r1, [r3, #12]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4618      	mov	r0, r3
 8005100:	4603      	mov	r3, r0
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4403      	add	r3, r0
 8005106:	3b1e      	subs	r3, #30
 8005108:	409a      	lsls	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e022      	b.n	800515a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6919      	ldr	r1, [r3, #16]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	4613      	mov	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	4413      	add	r3, r2
 8005128:	2207      	movs	r2, #7
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43da      	mvns	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	400a      	ands	r2, r1
 8005136:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6919      	ldr	r1, [r3, #16]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	4618      	mov	r0, r3
 800514a:	4603      	mov	r3, r0
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4403      	add	r3, r0
 8005150:	409a      	lsls	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b06      	cmp	r3, #6
 8005160:	d824      	bhi.n	80051ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	3b05      	subs	r3, #5
 8005174:	221f      	movs	r2, #31
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43da      	mvns	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	400a      	ands	r2, r1
 8005182:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	4618      	mov	r0, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	3b05      	subs	r3, #5
 800519e:	fa00 f203 	lsl.w	r2, r0, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80051aa:	e04c      	b.n	8005246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	d824      	bhi.n	80051fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	3b23      	subs	r3, #35	@ 0x23
 80051c6:	221f      	movs	r2, #31
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43da      	mvns	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	400a      	ands	r2, r1
 80051d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	4618      	mov	r0, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	3b23      	subs	r3, #35	@ 0x23
 80051f0:	fa00 f203 	lsl.w	r2, r0, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80051fc:	e023      	b.n	8005246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	3b41      	subs	r3, #65	@ 0x41
 8005210:	221f      	movs	r2, #31
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43da      	mvns	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	400a      	ands	r2, r1
 800521e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	4618      	mov	r0, r3
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	3b41      	subs	r3, #65	@ 0x41
 800523a:	fa00 f203 	lsl.w	r2, r0, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005246:	4b29      	ldr	r3, [pc, #164]	@ (80052ec <HAL_ADC_ConfigChannel+0x250>)
 8005248:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a28      	ldr	r2, [pc, #160]	@ (80052f0 <HAL_ADC_ConfigChannel+0x254>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10f      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x1d8>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b12      	cmp	r3, #18
 800525a:	d10b      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <HAL_ADC_ConfigChannel+0x254>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d12b      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x23a>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1c      	ldr	r2, [pc, #112]	@ (80052f4 <HAL_ADC_ConfigChannel+0x258>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <HAL_ADC_ConfigChannel+0x1f4>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b11      	cmp	r3, #17
 800528e:	d122      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a11      	ldr	r2, [pc, #68]	@ (80052f4 <HAL_ADC_ConfigChannel+0x258>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d111      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052b2:	4b11      	ldr	r3, [pc, #68]	@ (80052f8 <HAL_ADC_ConfigChannel+0x25c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a11      	ldr	r2, [pc, #68]	@ (80052fc <HAL_ADC_ConfigChannel+0x260>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	0c9a      	lsrs	r2, r3, #18
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80052c8:	e002      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f9      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40012300 	.word	0x40012300
 80052f0:	40012000 	.word	0x40012000
 80052f4:	10000012 	.word	0x10000012
 80052f8:	20000008 	.word	0x20000008
 80052fc:	431bde83 	.word	0x431bde83

08005300 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005308:	4b79      	ldr	r3, [pc, #484]	@ (80054f0 <ADC_Init+0x1f0>)
 800530a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	431a      	orrs	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	021a      	lsls	r2, r3, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800537a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6899      	ldr	r1, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005392:	4a58      	ldr	r2, [pc, #352]	@ (80054f4 <ADC_Init+0x1f4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d022      	beq.n	80053de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6899      	ldr	r1, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80053c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6899      	ldr	r1, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	e00f      	b.n	80053fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80053fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0202 	bic.w	r2, r2, #2
 800540c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	7e1b      	ldrb	r3, [r3, #24]
 8005418:	005a      	lsls	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800543a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800544a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	3b01      	subs	r3, #1
 8005458:	035a      	lsls	r2, r3, #13
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	e007      	b.n	8005474 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	3b01      	subs	r3, #1
 8005490:	051a      	lsls	r2, r3, #20
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80054a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6899      	ldr	r1, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054b6:	025a      	lsls	r2, r3, #9
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	029a      	lsls	r2, r3, #10
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40012300 	.word	0x40012300
 80054f4:	0f000001 	.word	0x0f000001

080054f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005508:	4b0c      	ldr	r3, [pc, #48]	@ (800553c <__NVIC_SetPriorityGrouping+0x44>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005514:	4013      	ands	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800552a:	4a04      	ldr	r2, [pc, #16]	@ (800553c <__NVIC_SetPriorityGrouping+0x44>)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	60d3      	str	r3, [r2, #12]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005544:	4b04      	ldr	r3, [pc, #16]	@ (8005558 <__NVIC_GetPriorityGrouping+0x18>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	f003 0307 	and.w	r3, r3, #7
}
 800554e:	4618      	mov	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000ed00 	.word	0xe000ed00

0800555c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	2b00      	cmp	r3, #0
 800556c:	db0b      	blt.n	8005586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	f003 021f 	and.w	r2, r3, #31
 8005574:	4907      	ldr	r1, [pc, #28]	@ (8005594 <__NVIC_EnableIRQ+0x38>)
 8005576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	2001      	movs	r0, #1
 800557e:	fa00 f202 	lsl.w	r2, r0, r2
 8005582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	e000e100 	.word	0xe000e100

08005598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	db0a      	blt.n	80055c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	490c      	ldr	r1, [pc, #48]	@ (80055e4 <__NVIC_SetPriority+0x4c>)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	0112      	lsls	r2, r2, #4
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	440b      	add	r3, r1
 80055bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055c0:	e00a      	b.n	80055d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	4908      	ldr	r1, [pc, #32]	@ (80055e8 <__NVIC_SetPriority+0x50>)
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	3b04      	subs	r3, #4
 80055d0:	0112      	lsls	r2, r2, #4
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	440b      	add	r3, r1
 80055d6:	761a      	strb	r2, [r3, #24]
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000e100 	.word	0xe000e100
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b089      	sub	sp, #36	@ 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f1c3 0307 	rsb	r3, r3, #7
 8005606:	2b04      	cmp	r3, #4
 8005608:	bf28      	it	cs
 800560a:	2304      	movcs	r3, #4
 800560c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3304      	adds	r3, #4
 8005612:	2b06      	cmp	r3, #6
 8005614:	d902      	bls.n	800561c <NVIC_EncodePriority+0x30>
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3b03      	subs	r3, #3
 800561a:	e000      	b.n	800561e <NVIC_EncodePriority+0x32>
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005620:	f04f 32ff 	mov.w	r2, #4294967295
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	401a      	ands	r2, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005634:	f04f 31ff 	mov.w	r1, #4294967295
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	43d9      	mvns	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005644:	4313      	orrs	r3, r2
         );
}
 8005646:	4618      	mov	r0, r3
 8005648:	3724      	adds	r7, #36	@ 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3b01      	subs	r3, #1
 8005660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005664:	d301      	bcc.n	800566a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005666:	2301      	movs	r3, #1
 8005668:	e00f      	b.n	800568a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800566a:	4a0a      	ldr	r2, [pc, #40]	@ (8005694 <SysTick_Config+0x40>)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3b01      	subs	r3, #1
 8005670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005672:	210f      	movs	r1, #15
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	f7ff ff8e 	bl	8005598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800567c:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <SysTick_Config+0x40>)
 800567e:	2200      	movs	r2, #0
 8005680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005682:	4b04      	ldr	r3, [pc, #16]	@ (8005694 <SysTick_Config+0x40>)
 8005684:	2207      	movs	r2, #7
 8005686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	e000e010 	.word	0xe000e010

08005698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ff29 	bl	80054f8 <__NVIC_SetPriorityGrouping>
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	4603      	mov	r3, r0
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056c0:	f7ff ff3e 	bl	8005540 <__NVIC_GetPriorityGrouping>
 80056c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	6978      	ldr	r0, [r7, #20]
 80056cc:	f7ff ff8e 	bl	80055ec <NVIC_EncodePriority>
 80056d0:	4602      	mov	r2, r0
 80056d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff ff5d 	bl	8005598 <__NVIC_SetPriority>
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	4603      	mov	r3, r0
 80056ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff ff31 	bl	800555c <__NVIC_EnableIRQ>
}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff ffa2 	bl	8005654 <SysTick_Config>
 8005710:	4603      	mov	r3, r0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005728:	f7ff fac4 	bl	8004cb4 <HAL_GetTick>
 800572c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d008      	beq.n	800574c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2280      	movs	r2, #128	@ 0x80
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e052      	b.n	80057f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0216 	bic.w	r2, r2, #22
 800575a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800576a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <HAL_DMA_Abort+0x62>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0208 	bic.w	r2, r2, #8
 800578a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800579c:	e013      	b.n	80057c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800579e:	f7ff fa89 	bl	8004cb4 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d90c      	bls.n	80057c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2203      	movs	r2, #3
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e015      	b.n	80057f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e4      	bne.n	800579e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d8:	223f      	movs	r2, #63	@ 0x3f
 80057da:	409a      	lsls	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d004      	beq.n	8005818 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2280      	movs	r2, #128	@ 0x80
 8005812:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e00c      	b.n	8005832 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2205      	movs	r2, #5
 800581c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	@ 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	e159      	b.n	8005b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800585c:	2201      	movs	r2, #1
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4013      	ands	r3, r2
 800586e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	429a      	cmp	r2, r3
 8005876:	f040 8148 	bne.w	8005b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b01      	cmp	r3, #1
 8005884:	d005      	beq.n	8005892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800588e:	2b02      	cmp	r3, #2
 8005890:	d130      	bne.n	80058f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	2203      	movs	r2, #3
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058c8:	2201      	movs	r2, #1
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 0201 	and.w	r2, r3, #1
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d017      	beq.n	8005930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	2203      	movs	r2, #3
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	43db      	mvns	r3, r3
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4013      	ands	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4313      	orrs	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d123      	bne.n	8005984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	08da      	lsrs	r2, r3, #3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3208      	adds	r2, #8
 8005944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	220f      	movs	r2, #15
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4013      	ands	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4313      	orrs	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	08da      	lsrs	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3208      	adds	r2, #8
 800597e:	69b9      	ldr	r1, [r7, #24]
 8005980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	2203      	movs	r2, #3
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	43db      	mvns	r3, r3
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4013      	ands	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0203 	and.w	r2, r3, #3
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80a2 	beq.w	8005b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	4b57      	ldr	r3, [pc, #348]	@ (8005b28 <HAL_GPIO_Init+0x2e8>)
 80059cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ce:	4a56      	ldr	r2, [pc, #344]	@ (8005b28 <HAL_GPIO_Init+0x2e8>)
 80059d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80059d6:	4b54      	ldr	r3, [pc, #336]	@ (8005b28 <HAL_GPIO_Init+0x2e8>)
 80059d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059e2:	4a52      	ldr	r2, [pc, #328]	@ (8005b2c <HAL_GPIO_Init+0x2ec>)
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	089b      	lsrs	r3, r3, #2
 80059e8:	3302      	adds	r3, #2
 80059ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	220f      	movs	r2, #15
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4013      	ands	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a49      	ldr	r2, [pc, #292]	@ (8005b30 <HAL_GPIO_Init+0x2f0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d019      	beq.n	8005a42 <HAL_GPIO_Init+0x202>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a48      	ldr	r2, [pc, #288]	@ (8005b34 <HAL_GPIO_Init+0x2f4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_GPIO_Init+0x1fe>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a47      	ldr	r2, [pc, #284]	@ (8005b38 <HAL_GPIO_Init+0x2f8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00d      	beq.n	8005a3a <HAL_GPIO_Init+0x1fa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a46      	ldr	r2, [pc, #280]	@ (8005b3c <HAL_GPIO_Init+0x2fc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <HAL_GPIO_Init+0x1f6>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a45      	ldr	r2, [pc, #276]	@ (8005b40 <HAL_GPIO_Init+0x300>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_GPIO_Init+0x1f2>
 8005a2e:	2304      	movs	r3, #4
 8005a30:	e008      	b.n	8005a44 <HAL_GPIO_Init+0x204>
 8005a32:	2307      	movs	r3, #7
 8005a34:	e006      	b.n	8005a44 <HAL_GPIO_Init+0x204>
 8005a36:	2303      	movs	r3, #3
 8005a38:	e004      	b.n	8005a44 <HAL_GPIO_Init+0x204>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e002      	b.n	8005a44 <HAL_GPIO_Init+0x204>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <HAL_GPIO_Init+0x204>
 8005a42:	2300      	movs	r3, #0
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	f002 0203 	and.w	r2, r2, #3
 8005a4a:	0092      	lsls	r2, r2, #2
 8005a4c:	4093      	lsls	r3, r2
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a54:	4935      	ldr	r1, [pc, #212]	@ (8005b2c <HAL_GPIO_Init+0x2ec>)
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	089b      	lsrs	r3, r3, #2
 8005a5a:	3302      	adds	r3, #2
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a62:	4b38      	ldr	r3, [pc, #224]	@ (8005b44 <HAL_GPIO_Init+0x304>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a86:	4a2f      	ldr	r2, [pc, #188]	@ (8005b44 <HAL_GPIO_Init+0x304>)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8005b44 <HAL_GPIO_Init+0x304>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ab0:	4a24      	ldr	r2, [pc, #144]	@ (8005b44 <HAL_GPIO_Init+0x304>)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ab6:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <HAL_GPIO_Init+0x304>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ada:	4a1a      	ldr	r2, [pc, #104]	@ (8005b44 <HAL_GPIO_Init+0x304>)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ae0:	4b18      	ldr	r3, [pc, #96]	@ (8005b44 <HAL_GPIO_Init+0x304>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b04:	4a0f      	ldr	r2, [pc, #60]	@ (8005b44 <HAL_GPIO_Init+0x304>)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b0f      	cmp	r3, #15
 8005b14:	f67f aea2 	bls.w	800585c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	3724      	adds	r7, #36	@ 0x24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40013800 	.word	0x40013800
 8005b30:	40020000 	.word	0x40020000
 8005b34:	40020400 	.word	0x40020400
 8005b38:	40020800 	.word	0x40020800
 8005b3c:	40020c00 	.word	0x40020c00
 8005b40:	40021000 	.word	0x40021000
 8005b44:	40013c00 	.word	0x40013c00

08005b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
 8005b54:	4613      	mov	r3, r2
 8005b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b58:	787b      	ldrb	r3, [r7, #1]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b5e:	887a      	ldrh	r2, [r7, #2]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b64:	e003      	b.n	8005b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b66:	887b      	ldrh	r3, [r7, #2]
 8005b68:	041a      	lsls	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	619a      	str	r2, [r3, #24]
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b8c:	887a      	ldrh	r2, [r7, #2]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4013      	ands	r3, r2
 8005b92:	041a      	lsls	r2, r3, #16
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	43d9      	mvns	r1, r3
 8005b98:	887b      	ldrh	r3, [r7, #2]
 8005b9a:	400b      	ands	r3, r1
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	619a      	str	r2, [r3, #24]
}
 8005ba2:	bf00      	nop
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bba:	4b08      	ldr	r3, [pc, #32]	@ (8005bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d006      	beq.n	8005bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bc6:	4a05      	ldr	r2, [pc, #20]	@ (8005bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fc ff84 	bl	8002adc <HAL_GPIO_EXTI_Callback>
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40013c00 	.word	0x40013c00

08005be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e267      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d075      	beq.n	8005cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bfe:	4b88      	ldr	r3, [pc, #544]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 030c 	and.w	r3, r3, #12
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d00c      	beq.n	8005c24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0a:	4b85      	ldr	r3, [pc, #532]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d112      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c16:	4b82      	ldr	r3, [pc, #520]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c22:	d10b      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c24:	4b7e      	ldr	r3, [pc, #504]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d05b      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x108>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d157      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e242      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c44:	d106      	bne.n	8005c54 <HAL_RCC_OscConfig+0x74>
 8005c46:	4b76      	ldr	r3, [pc, #472]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a75      	ldr	r2, [pc, #468]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	e01d      	b.n	8005c90 <HAL_RCC_OscConfig+0xb0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c5c:	d10c      	bne.n	8005c78 <HAL_RCC_OscConfig+0x98>
 8005c5e:	4b70      	ldr	r3, [pc, #448]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6f      	ldr	r2, [pc, #444]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e00b      	b.n	8005c90 <HAL_RCC_OscConfig+0xb0>
 8005c78:	4b69      	ldr	r3, [pc, #420]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a68      	ldr	r2, [pc, #416]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	4b66      	ldr	r3, [pc, #408]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a65      	ldr	r2, [pc, #404]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7ff f80c 	bl	8004cb4 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7ff f808 	bl	8004cb4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	@ 0x64
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e207      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0xc0>
 8005cbe:	e014      	b.n	8005cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc0:	f7fe fff8 	bl	8004cb4 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc8:	f7fe fff4 	bl	8004cb4 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b64      	cmp	r3, #100	@ 0x64
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e1f3      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cda:	4b51      	ldr	r3, [pc, #324]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0xe8>
 8005ce6:	e000      	b.n	8005cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d063      	beq.n	8005dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d02:	4b47      	ldr	r3, [pc, #284]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d11c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d0e:	4b44      	ldr	r3, [pc, #272]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1a:	4b41      	ldr	r3, [pc, #260]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_RCC_OscConfig+0x152>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d001      	beq.n	8005d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e1c7      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d32:	4b3b      	ldr	r3, [pc, #236]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4937      	ldr	r1, [pc, #220]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d46:	e03a      	b.n	8005dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d020      	beq.n	8005d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d50:	4b34      	ldr	r3, [pc, #208]	@ (8005e24 <HAL_RCC_OscConfig+0x244>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d56:	f7fe ffad 	bl	8004cb4 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d5e:	f7fe ffa9 	bl	8004cb4 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e1a8      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d70:	4b2b      	ldr	r3, [pc, #172]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7c:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4925      	ldr	r1, [pc, #148]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	e015      	b.n	8005dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d92:	4b24      	ldr	r3, [pc, #144]	@ (8005e24 <HAL_RCC_OscConfig+0x244>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fe ff8c 	bl	8004cb4 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da0:	f7fe ff88 	bl	8004cb4 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e187      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005db2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d036      	beq.n	8005e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dd2:	4b15      	ldr	r3, [pc, #84]	@ (8005e28 <HAL_RCC_OscConfig+0x248>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd8:	f7fe ff6c 	bl	8004cb4 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de0:	f7fe ff68 	bl	8004cb4 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e167      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0x200>
 8005dfe:	e01b      	b.n	8005e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e00:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <HAL_RCC_OscConfig+0x248>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e06:	f7fe ff55 	bl	8004cb4 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e0c:	e00e      	b.n	8005e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e0e:	f7fe ff51 	bl	8004cb4 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d907      	bls.n	8005e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e150      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
 8005e20:	40023800 	.word	0x40023800
 8005e24:	42470000 	.word	0x42470000
 8005e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e2c:	4b88      	ldr	r3, [pc, #544]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1ea      	bne.n	8005e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8097 	beq.w	8005f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e4a:	4b81      	ldr	r3, [pc, #516]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e66:	4b7a      	ldr	r3, [pc, #488]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e76:	4b77      	ldr	r3, [pc, #476]	@ (8006054 <HAL_RCC_OscConfig+0x474>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d118      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e82:	4b74      	ldr	r3, [pc, #464]	@ (8006054 <HAL_RCC_OscConfig+0x474>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a73      	ldr	r2, [pc, #460]	@ (8006054 <HAL_RCC_OscConfig+0x474>)
 8005e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e8e:	f7fe ff11 	bl	8004cb4 <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e96:	f7fe ff0d 	bl	8004cb4 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e10c      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8006054 <HAL_RCC_OscConfig+0x474>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d106      	bne.n	8005eca <HAL_RCC_OscConfig+0x2ea>
 8005ebc:	4b64      	ldr	r3, [pc, #400]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec0:	4a63      	ldr	r2, [pc, #396]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec8:	e01c      	b.n	8005f04 <HAL_RCC_OscConfig+0x324>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d10c      	bne.n	8005eec <HAL_RCC_OscConfig+0x30c>
 8005ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ede:	4b5c      	ldr	r3, [pc, #368]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eea:	e00b      	b.n	8005f04 <HAL_RCC_OscConfig+0x324>
 8005eec:	4b58      	ldr	r3, [pc, #352]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef0:	4a57      	ldr	r2, [pc, #348]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef8:	4b55      	ldr	r3, [pc, #340]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efc:	4a54      	ldr	r2, [pc, #336]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005efe:	f023 0304 	bic.w	r3, r3, #4
 8005f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d015      	beq.n	8005f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fe fed2 	bl	8004cb4 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f12:	e00a      	b.n	8005f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f14:	f7fe fece 	bl	8004cb4 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e0cb      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2a:	4b49      	ldr	r3, [pc, #292]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0ee      	beq.n	8005f14 <HAL_RCC_OscConfig+0x334>
 8005f36:	e014      	b.n	8005f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f38:	f7fe febc 	bl	8004cb4 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f40:	f7fe feb8 	bl	8004cb4 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0b5      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f56:	4b3e      	ldr	r3, [pc, #248]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ee      	bne.n	8005f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d105      	bne.n	8005f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f68:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6c:	4a38      	ldr	r2, [pc, #224]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80a1 	beq.w	80060c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f7e:	4b34      	ldr	r3, [pc, #208]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d05c      	beq.n	8006044 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d141      	bne.n	8006016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f92:	4b31      	ldr	r3, [pc, #196]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f98:	f7fe fe8c 	bl	8004cb4 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa0:	f7fe fe88 	bl	8004cb4 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e087      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb2:	4b27      	ldr	r3, [pc, #156]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69da      	ldr	r2, [r3, #28]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	019b      	lsls	r3, r3, #6
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	491b      	ldr	r1, [pc, #108]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fee:	f7fe fe61 	bl	8004cb4 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff6:	f7fe fe5d 	bl	8004cb4 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e05c      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006008:	4b11      	ldr	r3, [pc, #68]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x416>
 8006014:	e054      	b.n	80060c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006016:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601c:	f7fe fe4a 	bl	8004cb4 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006024:	f7fe fe46 	bl	8004cb4 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e045      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x444>
 8006042:	e03d      	b.n	80060c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d107      	bne.n	800605c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e038      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
 8006050:	40023800 	.word	0x40023800
 8006054:	40007000 	.word	0x40007000
 8006058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800605c:	4b1b      	ldr	r3, [pc, #108]	@ (80060cc <HAL_RCC_OscConfig+0x4ec>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d028      	beq.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006074:	429a      	cmp	r2, r3
 8006076:	d121      	bne.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d11a      	bne.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800608c:	4013      	ands	r3, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006094:	4293      	cmp	r3, r2
 8006096:	d111      	bne.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	3b01      	subs	r3, #1
 80060a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d107      	bne.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800

080060d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0cc      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060e4:	4b68      	ldr	r3, [pc, #416]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d90c      	bls.n	800610c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f2:	4b65      	ldr	r3, [pc, #404]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fa:	4b63      	ldr	r3, [pc, #396]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d001      	beq.n	800610c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e0b8      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d020      	beq.n	800615a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006124:	4b59      	ldr	r3, [pc, #356]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a58      	ldr	r2, [pc, #352]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800612e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800613c:	4b53      	ldr	r3, [pc, #332]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4a52      	ldr	r2, [pc, #328]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006148:	4b50      	ldr	r3, [pc, #320]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	494d      	ldr	r1, [pc, #308]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d044      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d107      	bne.n	800617e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616e:	4b47      	ldr	r3, [pc, #284]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d119      	bne.n	80061ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e07f      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d003      	beq.n	800618e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800618a:	2b03      	cmp	r3, #3
 800618c:	d107      	bne.n	800619e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800618e:	4b3f      	ldr	r3, [pc, #252]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e06f      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619e:	4b3b      	ldr	r3, [pc, #236]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e067      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ae:	4b37      	ldr	r3, [pc, #220]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f023 0203 	bic.w	r2, r3, #3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4934      	ldr	r1, [pc, #208]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061c0:	f7fe fd78 	bl	8004cb4 <HAL_GetTick>
 80061c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c6:	e00a      	b.n	80061de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c8:	f7fe fd74 	bl	8004cb4 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e04f      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061de:	4b2b      	ldr	r3, [pc, #172]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 020c 	and.w	r2, r3, #12
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d1eb      	bne.n	80061c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061f0:	4b25      	ldr	r3, [pc, #148]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d20c      	bcs.n	8006218 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fe:	4b22      	ldr	r3, [pc, #136]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006206:	4b20      	ldr	r3, [pc, #128]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d001      	beq.n	8006218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e032      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006224:	4b19      	ldr	r3, [pc, #100]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4916      	ldr	r1, [pc, #88]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	4313      	orrs	r3, r2
 8006234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006242:	4b12      	ldr	r3, [pc, #72]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	490e      	ldr	r1, [pc, #56]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	4313      	orrs	r3, r2
 8006254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006256:	f000 f821 	bl	800629c <HAL_RCC_GetSysClockFreq>
 800625a:	4602      	mov	r2, r0
 800625c:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	490a      	ldr	r1, [pc, #40]	@ (8006290 <HAL_RCC_ClockConfig+0x1c0>)
 8006268:	5ccb      	ldrb	r3, [r1, r3]
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	4a09      	ldr	r2, [pc, #36]	@ (8006294 <HAL_RCC_ClockConfig+0x1c4>)
 8006270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006272:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <HAL_RCC_ClockConfig+0x1c8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fcd8 	bl	8004c2c <HAL_InitTick>

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40023c00 	.word	0x40023c00
 800628c:	40023800 	.word	0x40023800
 8006290:	0800de98 	.word	0x0800de98
 8006294:	20000008 	.word	0x20000008
 8006298:	2000000c 	.word	0x2000000c

0800629c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800629c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a0:	b090      	sub	sp, #64	@ 0x40
 80062a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062b4:	4b59      	ldr	r3, [pc, #356]	@ (800641c <HAL_RCC_GetSysClockFreq+0x180>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 030c 	and.w	r3, r3, #12
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d00d      	beq.n	80062dc <HAL_RCC_GetSysClockFreq+0x40>
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	f200 80a1 	bhi.w	8006408 <HAL_RCC_GetSysClockFreq+0x16c>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0x34>
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d003      	beq.n	80062d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80062ce:	e09b      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062d0:	4b53      	ldr	r3, [pc, #332]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x184>)
 80062d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062d4:	e09b      	b.n	800640e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062d6:	4b53      	ldr	r3, [pc, #332]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x188>)
 80062d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062da:	e098      	b.n	800640e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062dc:	4b4f      	ldr	r3, [pc, #316]	@ (800641c <HAL_RCC_GetSysClockFreq+0x180>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062e6:	4b4d      	ldr	r3, [pc, #308]	@ (800641c <HAL_RCC_GetSysClockFreq+0x180>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d028      	beq.n	8006344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062f2:	4b4a      	ldr	r3, [pc, #296]	@ (800641c <HAL_RCC_GetSysClockFreq+0x180>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	2200      	movs	r2, #0
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006304:	2100      	movs	r1, #0
 8006306:	4b47      	ldr	r3, [pc, #284]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x188>)
 8006308:	fb03 f201 	mul.w	r2, r3, r1
 800630c:	2300      	movs	r3, #0
 800630e:	fb00 f303 	mul.w	r3, r0, r3
 8006312:	4413      	add	r3, r2
 8006314:	4a43      	ldr	r2, [pc, #268]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x188>)
 8006316:	fba0 1202 	umull	r1, r2, r0, r2
 800631a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800631c:	460a      	mov	r2, r1
 800631e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006322:	4413      	add	r3, r2
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	2200      	movs	r2, #0
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	61fa      	str	r2, [r7, #28]
 800632e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006336:	f7fa fc3f 	bl	8000bb8 <__aeabi_uldivmod>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4613      	mov	r3, r2
 8006340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006342:	e053      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006344:	4b35      	ldr	r3, [pc, #212]	@ (800641c <HAL_RCC_GetSysClockFreq+0x180>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	099b      	lsrs	r3, r3, #6
 800634a:	2200      	movs	r2, #0
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	617a      	str	r2, [r7, #20]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006356:	f04f 0b00 	mov.w	fp, #0
 800635a:	4652      	mov	r2, sl
 800635c:	465b      	mov	r3, fp
 800635e:	f04f 0000 	mov.w	r0, #0
 8006362:	f04f 0100 	mov.w	r1, #0
 8006366:	0159      	lsls	r1, r3, #5
 8006368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800636c:	0150      	lsls	r0, r2, #5
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	ebb2 080a 	subs.w	r8, r2, sl
 8006376:	eb63 090b 	sbc.w	r9, r3, fp
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800638a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800638e:	ebb2 0408 	subs.w	r4, r2, r8
 8006392:	eb63 0509 	sbc.w	r5, r3, r9
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	00eb      	lsls	r3, r5, #3
 80063a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063a4:	00e2      	lsls	r2, r4, #3
 80063a6:	4614      	mov	r4, r2
 80063a8:	461d      	mov	r5, r3
 80063aa:	eb14 030a 	adds.w	r3, r4, sl
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	eb45 030b 	adc.w	r3, r5, fp
 80063b4:	607b      	str	r3, [r7, #4]
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063c2:	4629      	mov	r1, r5
 80063c4:	028b      	lsls	r3, r1, #10
 80063c6:	4621      	mov	r1, r4
 80063c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063cc:	4621      	mov	r1, r4
 80063ce:	028a      	lsls	r2, r1, #10
 80063d0:	4610      	mov	r0, r2
 80063d2:	4619      	mov	r1, r3
 80063d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d6:	2200      	movs	r2, #0
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	60fa      	str	r2, [r7, #12]
 80063dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063e0:	f7fa fbea 	bl	8000bb8 <__aeabi_uldivmod>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4613      	mov	r3, r2
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063ec:	4b0b      	ldr	r3, [pc, #44]	@ (800641c <HAL_RCC_GetSysClockFreq+0x180>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	0c1b      	lsrs	r3, r3, #16
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	3301      	adds	r3, #1
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80063fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006406:	e002      	b.n	800640e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006408:	4b05      	ldr	r3, [pc, #20]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x184>)
 800640a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800640c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006410:	4618      	mov	r0, r3
 8006412:	3740      	adds	r7, #64	@ 0x40
 8006414:	46bd      	mov	sp, r7
 8006416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800641a:	bf00      	nop
 800641c:	40023800 	.word	0x40023800
 8006420:	00f42400 	.word	0x00f42400
 8006424:	017d7840 	.word	0x017d7840

08006428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800642c:	4b03      	ldr	r3, [pc, #12]	@ (800643c <HAL_RCC_GetHCLKFreq+0x14>)
 800642e:	681b      	ldr	r3, [r3, #0]
}
 8006430:	4618      	mov	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000008 	.word	0x20000008

08006440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006444:	f7ff fff0 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 8006448:	4602      	mov	r2, r0
 800644a:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	0a9b      	lsrs	r3, r3, #10
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	4903      	ldr	r1, [pc, #12]	@ (8006464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006456:	5ccb      	ldrb	r3, [r1, r3]
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40023800 	.word	0x40023800
 8006464:	0800dea8 	.word	0x0800dea8

08006468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800646c:	f7ff ffdc 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 8006470:	4602      	mov	r2, r0
 8006472:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	0b5b      	lsrs	r3, r3, #13
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	4903      	ldr	r1, [pc, #12]	@ (800648c <HAL_RCC_GetPCLK2Freq+0x24>)
 800647e:	5ccb      	ldrb	r3, [r1, r3]
 8006480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40023800 	.word	0x40023800
 800648c:	0800dea8 	.word	0x0800dea8

08006490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e07b      	b.n	800659a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d108      	bne.n	80064bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064b2:	d009      	beq.n	80064c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	61da      	str	r2, [r3, #28]
 80064ba:	e005      	b.n	80064c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fe f818 	bl	8004518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654c:	ea42 0103 	orr.w	r1, r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	f003 0104 	and.w	r1, r3, #4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656e:	f003 0210 	and.w	r2, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006588:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b088      	sub	sp, #32
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	603b      	str	r3, [r7, #0]
 80065ae:	4613      	mov	r3, r2
 80065b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b2:	f7fe fb7f 	bl	8004cb4 <HAL_GetTick>
 80065b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
 80065ca:	e12a      	b.n	8006822 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_SPI_Transmit+0x36>
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e122      	b.n	8006822 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_SPI_Transmit+0x48>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e11b      	b.n	8006822 <HAL_SPI_Transmit+0x280>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2203      	movs	r2, #3
 80065f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006638:	d10f      	bne.n	800665a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d007      	beq.n	8006678 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006680:	d152      	bne.n	8006728 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <HAL_SPI_Transmit+0xee>
 800668a:	8b7b      	ldrh	r3, [r7, #26]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d145      	bne.n	800671c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006694:	881a      	ldrh	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a0:	1c9a      	adds	r2, r3, #2
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066b4:	e032      	b.n	800671c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d112      	bne.n	80066ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d4:	1c9a      	adds	r2, r3, #2
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066e8:	e018      	b.n	800671c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ea:	f7fe fae3 	bl	8004cb4 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d803      	bhi.n	8006702 <HAL_SPI_Transmit+0x160>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006700:	d102      	bne.n	8006708 <HAL_SPI_Transmit+0x166>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d109      	bne.n	800671c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e082      	b.n	8006822 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1c7      	bne.n	80066b6 <HAL_SPI_Transmit+0x114>
 8006726:	e053      	b.n	80067d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_SPI_Transmit+0x194>
 8006730:	8b7b      	ldrh	r3, [r7, #26]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d147      	bne.n	80067c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800675c:	e033      	b.n	80067c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b02      	cmp	r3, #2
 800676a:	d113      	bne.n	8006794 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	7812      	ldrb	r2, [r2, #0]
 8006778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006792:	e018      	b.n	80067c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006794:	f7fe fa8e 	bl	8004cb4 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d803      	bhi.n	80067ac <HAL_SPI_Transmit+0x20a>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d102      	bne.n	80067b2 <HAL_SPI_Transmit+0x210>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e02d      	b.n	8006822 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1c6      	bne.n	800675e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fbd9 	bl	8006f8c <SPI_EndRxTxTransaction>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006820:	2300      	movs	r3, #0
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b088      	sub	sp, #32
 800682e:	af02      	add	r7, sp, #8
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	d001      	beq.n	800684a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006846:	2302      	movs	r3, #2
 8006848:	e104      	b.n	8006a54 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_SPI_Receive+0x2c>
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e0fc      	b.n	8006a54 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006862:	d112      	bne.n	800688a <HAL_SPI_Receive+0x60>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10e      	bne.n	800688a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2204      	movs	r2, #4
 8006870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f8eb 	bl	8006a5c <HAL_SPI_TransmitReceive>
 8006886:	4603      	mov	r3, r0
 8006888:	e0e4      	b.n	8006a54 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800688a:	f7fe fa13 	bl	8004cb4 <HAL_GetTick>
 800688e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <HAL_SPI_Receive+0x74>
 800689a:	2302      	movs	r3, #2
 800689c:	e0da      	b.n	8006a54 <HAL_SPI_Receive+0x22a>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2204      	movs	r2, #4
 80068aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	88fa      	ldrh	r2, [r7, #6]
 80068be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068ec:	d10f      	bne.n	800690e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800690c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006918:	2b40      	cmp	r3, #64	@ 0x40
 800691a:	d007      	beq.n	800692c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800692a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d170      	bne.n	8006a16 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006934:	e035      	b.n	80069a2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d115      	bne.n	8006970 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f103 020c 	add.w	r2, r3, #12
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006950:	7812      	ldrb	r2, [r2, #0]
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800696e:	e018      	b.n	80069a2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006970:	f7fe f9a0 	bl	8004cb4 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d803      	bhi.n	8006988 <HAL_SPI_Receive+0x15e>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006986:	d102      	bne.n	800698e <HAL_SPI_Receive+0x164>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e058      	b.n	8006a54 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1c4      	bne.n	8006936 <HAL_SPI_Receive+0x10c>
 80069ac:	e038      	b.n	8006a20 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d113      	bne.n	80069e4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c6:	b292      	uxth	r2, r2
 80069c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ce:	1c9a      	adds	r2, r3, #2
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069e2:	e018      	b.n	8006a16 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e4:	f7fe f966 	bl	8004cb4 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d803      	bhi.n	80069fc <HAL_SPI_Receive+0x1d2>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d102      	bne.n	8006a02 <HAL_SPI_Receive+0x1d8>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e01e      	b.n	8006a54 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1c6      	bne.n	80069ae <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fa4b 	bl	8006ec0 <SPI_EndRxTransaction>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006a52:	2300      	movs	r3, #0
  }
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	@ 0x28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a6e:	f7fe f921 	bl	8004cb4 <HAL_GetTick>
 8006a72:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a7a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006a82:	887b      	ldrh	r3, [r7, #2]
 8006a84:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a86:	7ffb      	ldrb	r3, [r7, #31]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d00c      	beq.n	8006aa6 <HAL_SPI_TransmitReceive+0x4a>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a92:	d106      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d102      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x46>
 8006a9c:	7ffb      	ldrb	r3, [r7, #31]
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d001      	beq.n	8006aa6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e17f      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x5c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x5c>
 8006ab2:	887b      	ldrh	r3, [r7, #2]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e174      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x6e>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e16d      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x34a>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d003      	beq.n	8006ae6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	887a      	ldrh	r2, [r7, #2]
 8006afc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	887a      	ldrh	r2, [r7, #2]
 8006b08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	887a      	ldrh	r2, [r7, #2]
 8006b0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b26:	2b40      	cmp	r3, #64	@ 0x40
 8006b28:	d007      	beq.n	8006b3a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b42:	d17e      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0xf6>
 8006b4c:	8afb      	ldrh	r3, [r7, #22]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d16c      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	881a      	ldrh	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b62:	1c9a      	adds	r2, r3, #2
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b76:	e059      	b.n	8006c2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d11b      	bne.n	8006bbe <HAL_SPI_TransmitReceive+0x162>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d016      	beq.n	8006bbe <HAL_SPI_TransmitReceive+0x162>
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d113      	bne.n	8006bbe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba6:	1c9a      	adds	r2, r3, #2
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d119      	bne.n	8006c00 <HAL_SPI_TransmitReceive+0x1a4>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d014      	beq.n	8006c00 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	b292      	uxth	r2, r2
 8006be2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	1c9a      	adds	r2, r3, #2
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c00:	f7fe f858 	bl	8004cb4 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d80d      	bhi.n	8006c2c <HAL_SPI_TransmitReceive+0x1d0>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c16:	d009      	beq.n	8006c2c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e0bc      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1a0      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x11c>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d19b      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x11c>
 8006c40:	e082      	b.n	8006d48 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_SPI_TransmitReceive+0x1f4>
 8006c4a:	8afb      	ldrh	r3, [r7, #22]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d171      	bne.n	8006d34 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c76:	e05d      	b.n	8006d34 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d11c      	bne.n	8006cc0 <HAL_SPI_TransmitReceive+0x264>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d017      	beq.n	8006cc0 <HAL_SPI_TransmitReceive+0x264>
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d114      	bne.n	8006cc0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	330c      	adds	r3, #12
 8006ca0:	7812      	ldrb	r2, [r2, #0]
 8006ca2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d119      	bne.n	8006d02 <HAL_SPI_TransmitReceive+0x2a6>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d014      	beq.n	8006d02 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d02:	f7fd ffd7 	bl	8004cb4 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d803      	bhi.n	8006d1a <HAL_SPI_TransmitReceive+0x2be>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d102      	bne.n	8006d20 <HAL_SPI_TransmitReceive+0x2c4>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e038      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d19c      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x21c>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d197      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d48:	6a3a      	ldr	r2, [r7, #32]
 8006d4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 f91d 	bl	8006f8c <SPI_EndRxTxTransaction>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e01d      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006da4:	2300      	movs	r3, #0
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3728      	adds	r7, #40	@ 0x28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dc0:	f7fd ff78 	bl	8004cb4 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	4413      	add	r3, r2
 8006dce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006dd0:	f7fd ff70 	bl	8004cb4 <HAL_GetTick>
 8006dd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dd6:	4b39      	ldr	r3, [pc, #228]	@ (8006ebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	015b      	lsls	r3, r3, #5
 8006ddc:	0d1b      	lsrs	r3, r3, #20
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	fb02 f303 	mul.w	r3, r2, r3
 8006de4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006de6:	e055      	b.n	8006e94 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d051      	beq.n	8006e94 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006df0:	f7fd ff60 	bl	8004cb4 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d902      	bls.n	8006e06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d13d      	bne.n	8006e82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e1e:	d111      	bne.n	8006e44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e28:	d004      	beq.n	8006e34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e32:	d107      	bne.n	8006e44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e4c:	d10f      	bne.n	8006e6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e018      	b.n	8006eb4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d102      	bne.n	8006e8e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
 8006e8c:	e002      	b.n	8006e94 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2301      	moveq	r3, #1
 8006ea6:	2300      	movne	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d19a      	bne.n	8006de8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000008 	.word	0x20000008

08006ec0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ed4:	d111      	bne.n	8006efa <SPI_EndRxTransaction+0x3a>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ede:	d004      	beq.n	8006eea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee8:	d107      	bne.n	8006efa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ef8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f02:	d12a      	bne.n	8006f5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f0c:	d012      	beq.n	8006f34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2200      	movs	r2, #0
 8006f16:	2180      	movs	r1, #128	@ 0x80
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff ff49 	bl	8006db0 <SPI_WaitFlagStateUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d02d      	beq.n	8006f80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e026      	b.n	8006f82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff ff36 	bl	8006db0 <SPI_WaitFlagStateUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01a      	beq.n	8006f80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e013      	b.n	8006f82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2101      	movs	r1, #1
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff ff23 	bl	8006db0 <SPI_WaitFlagStateUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f74:	f043 0220 	orr.w	r2, r3, #32
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e000      	b.n	8006f82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	2102      	movs	r1, #2
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff ff04 	bl	8006db0 <SPI_WaitFlagStateUntilTimeout>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb2:	f043 0220 	orr.w	r2, r3, #32
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e032      	b.n	8007024 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800702c <SPI_EndRxTxTransaction+0xa0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8007030 <SPI_EndRxTxTransaction+0xa4>)
 8006fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc8:	0d5b      	lsrs	r3, r3, #21
 8006fca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fce:	fb02 f303 	mul.w	r3, r2, r3
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fdc:	d112      	bne.n	8007004 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2180      	movs	r1, #128	@ 0x80
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff fee1 	bl	8006db0 <SPI_WaitFlagStateUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d016      	beq.n	8007022 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff8:	f043 0220 	orr.w	r2, r3, #32
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e00f      	b.n	8007024 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	3b01      	subs	r3, #1
 800700e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701a:	2b80      	cmp	r3, #128	@ 0x80
 800701c:	d0f2      	beq.n	8007004 <SPI_EndRxTxTransaction+0x78>
 800701e:	e000      	b.n	8007022 <SPI_EndRxTxTransaction+0x96>
        break;
 8007020:	bf00      	nop
  }

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000008 	.word	0x20000008
 8007030:	165e9f81 	.word	0x165e9f81

08007034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e041      	b.n	80070ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fd faa4 	bl	80045a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f000 fd7a 	bl	8007b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e041      	b.n	8007168 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f839 	bl	8007170 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3304      	adds	r3, #4
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f000 fd2b 	bl	8007b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <HAL_TIM_PWM_Start+0x24>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e022      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d109      	bne.n	80071c2 <HAL_TIM_PWM_Start+0x3e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	e015      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d109      	bne.n	80071dc <HAL_TIM_PWM_Start+0x58>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	bf14      	ite	ne
 80071d4:	2301      	movne	r3, #1
 80071d6:	2300      	moveq	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	e008      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	bf14      	ite	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	2300      	moveq	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e068      	b.n	80072c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Start+0x82>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007204:	e013      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Start+0x92>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007214:	e00b      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Start+0xa2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007224:	e003      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 ff44 	bl	80080c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a23      	ldr	r2, [pc, #140]	@ (80072d0 <HAL_TIM_PWM_Start+0x14c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d107      	bne.n	8007256 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007254:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1d      	ldr	r2, [pc, #116]	@ (80072d0 <HAL_TIM_PWM_Start+0x14c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d018      	beq.n	8007292 <HAL_TIM_PWM_Start+0x10e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007268:	d013      	beq.n	8007292 <HAL_TIM_PWM_Start+0x10e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a19      	ldr	r2, [pc, #100]	@ (80072d4 <HAL_TIM_PWM_Start+0x150>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00e      	beq.n	8007292 <HAL_TIM_PWM_Start+0x10e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a17      	ldr	r2, [pc, #92]	@ (80072d8 <HAL_TIM_PWM_Start+0x154>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_TIM_PWM_Start+0x10e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a16      	ldr	r2, [pc, #88]	@ (80072dc <HAL_TIM_PWM_Start+0x158>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d004      	beq.n	8007292 <HAL_TIM_PWM_Start+0x10e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a14      	ldr	r2, [pc, #80]	@ (80072e0 <HAL_TIM_PWM_Start+0x15c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d111      	bne.n	80072b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b06      	cmp	r3, #6
 80072a2:	d010      	beq.n	80072c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b4:	e007      	b.n	80072c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0201 	orr.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40010000 	.word	0x40010000
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800
 80072dc:	40000c00 	.word	0x40000c00
 80072e0:	40014000 	.word	0x40014000

080072e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fee4 	bl	80080c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a29      	ldr	r2, [pc, #164]	@ (80073a8 <HAL_TIM_PWM_Stop+0xc4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d117      	bne.n	8007336 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10f      	bne.n	8007336 <HAL_TIM_PWM_Stop+0x52>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a1a      	ldr	r2, [r3, #32]
 800731c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007320:	4013      	ands	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <HAL_TIM_PWM_Stop+0x52>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007334:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a1a      	ldr	r2, [r3, #32]
 800733c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007340:	4013      	ands	r3, r2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10f      	bne.n	8007366 <HAL_TIM_PWM_Stop+0x82>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007350:	4013      	ands	r3, r2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d107      	bne.n	8007366 <HAL_TIM_PWM_Stop+0x82>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0201 	bic.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <HAL_TIM_PWM_Stop+0x92>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007374:	e013      	b.n	800739e <HAL_TIM_PWM_Stop+0xba>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b04      	cmp	r3, #4
 800737a:	d104      	bne.n	8007386 <HAL_TIM_PWM_Stop+0xa2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007384:	e00b      	b.n	800739e <HAL_TIM_PWM_Stop+0xba>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d104      	bne.n	8007396 <HAL_TIM_PWM_Stop+0xb2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007394:	e003      	b.n	800739e <HAL_TIM_PWM_Stop+0xba>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40010000 	.word	0x40010000

080073ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e097      	b.n	80074f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d106      	bne.n	80073da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7fd f925 	bl	8004624 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2202      	movs	r2, #2
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073f0:	f023 0307 	bic.w	r3, r3, #7
 80073f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3304      	adds	r3, #4
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f000 fbb3 	bl	8007b6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	4313      	orrs	r3, r2
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800744c:	f023 030c 	bic.w	r3, r3, #12
 8007450:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007458:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800745c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	4313      	orrs	r3, r2
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	011a      	lsls	r2, r3, #4
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	031b      	lsls	r3, r3, #12
 800747c:	4313      	orrs	r3, r2
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800748a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	4313      	orrs	r3, r2
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007508:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007510:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007518:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007520:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d110      	bne.n	800754a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d102      	bne.n	8007534 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800752e:	7b7b      	ldrb	r3, [r7, #13]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d001      	beq.n	8007538 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e069      	b.n	800760c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007548:	e031      	b.n	80075ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b04      	cmp	r3, #4
 800754e:	d110      	bne.n	8007572 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d102      	bne.n	800755c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007556:	7b3b      	ldrb	r3, [r7, #12]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d001      	beq.n	8007560 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e055      	b.n	800760c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007570:	e01d      	b.n	80075ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d108      	bne.n	800758a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d105      	bne.n	800758a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800757e:	7b7b      	ldrb	r3, [r7, #13]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d102      	bne.n	800758a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007584:	7b3b      	ldrb	r3, [r7, #12]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d001      	beq.n	800758e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e03e      	b.n	800760c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2202      	movs	r2, #2
 800759a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_TIM_Encoder_Start+0xc4>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d008      	beq.n	80075cc <HAL_TIM_Encoder_Start+0xd4>
 80075ba:	e00f      	b.n	80075dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2201      	movs	r2, #1
 80075c2:	2100      	movs	r1, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fd7d 	bl	80080c4 <TIM_CCxChannelCmd>
      break;
 80075ca:	e016      	b.n	80075fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2201      	movs	r2, #1
 80075d2:	2104      	movs	r1, #4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fd75 	bl	80080c4 <TIM_CCxChannelCmd>
      break;
 80075da:	e00e      	b.n	80075fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2201      	movs	r2, #1
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fd6d 	bl	80080c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2201      	movs	r2, #1
 80075f0:	2104      	movs	r1, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fd66 	bl	80080c4 <TIM_CCxChannelCmd>
      break;
 80075f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0201 	orr.w	r2, r2, #1
 8007608:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d020      	beq.n	8007678 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01b      	beq.n	8007678 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0202 	mvn.w	r2, #2
 8007648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa65 	bl	8007b2e <HAL_TIM_IC_CaptureCallback>
 8007664:	e005      	b.n	8007672 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa57 	bl	8007b1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fa68 	bl	8007b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d020      	beq.n	80076c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01b      	beq.n	80076c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0204 	mvn.w	r2, #4
 8007694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2202      	movs	r2, #2
 800769a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa3f 	bl	8007b2e <HAL_TIM_IC_CaptureCallback>
 80076b0:	e005      	b.n	80076be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa31 	bl	8007b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fa42 	bl	8007b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d020      	beq.n	8007710 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01b      	beq.n	8007710 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0208 	mvn.w	r2, #8
 80076e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2204      	movs	r2, #4
 80076e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa19 	bl	8007b2e <HAL_TIM_IC_CaptureCallback>
 80076fc:	e005      	b.n	800770a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa0b 	bl	8007b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa1c 	bl	8007b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f003 0310 	and.w	r3, r3, #16
 8007716:	2b00      	cmp	r3, #0
 8007718:	d020      	beq.n	800775c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01b      	beq.n	800775c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0210 	mvn.w	r2, #16
 800772c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2208      	movs	r2, #8
 8007732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f9f3 	bl	8007b2e <HAL_TIM_IC_CaptureCallback>
 8007748:	e005      	b.n	8007756 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9e5 	bl	8007b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9f6 	bl	8007b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00c      	beq.n	8007780 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0201 	mvn.w	r2, #1
 8007778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9c3 	bl	8007b06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00c      	beq.n	80077a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800779c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fd80 	bl	80082a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00c      	beq.n	80077c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9c7 	bl	8007b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00c      	beq.n	80077ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d007      	beq.n	80077ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0220 	mvn.w	r2, #32
 80077e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fd52 	bl	8008290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800780e:	2302      	movs	r3, #2
 8007810:	e0ae      	b.n	8007970 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b0c      	cmp	r3, #12
 800781e:	f200 809f 	bhi.w	8007960 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007822:	a201      	add	r2, pc, #4	@ (adr r2, 8007828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	0800785d 	.word	0x0800785d
 800782c:	08007961 	.word	0x08007961
 8007830:	08007961 	.word	0x08007961
 8007834:	08007961 	.word	0x08007961
 8007838:	0800789d 	.word	0x0800789d
 800783c:	08007961 	.word	0x08007961
 8007840:	08007961 	.word	0x08007961
 8007844:	08007961 	.word	0x08007961
 8007848:	080078df 	.word	0x080078df
 800784c:	08007961 	.word	0x08007961
 8007850:	08007961 	.word	0x08007961
 8007854:	08007961 	.word	0x08007961
 8007858:	0800791f 	.word	0x0800791f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fa08 	bl	8007c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0208 	orr.w	r2, r2, #8
 8007876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0204 	bic.w	r2, r2, #4
 8007886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6999      	ldr	r1, [r3, #24]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	619a      	str	r2, [r3, #24]
      break;
 800789a:	e064      	b.n	8007966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fa4e 	bl	8007d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6999      	ldr	r1, [r3, #24]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	021a      	lsls	r2, r3, #8
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	619a      	str	r2, [r3, #24]
      break;
 80078dc:	e043      	b.n	8007966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68b9      	ldr	r1, [r7, #8]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fa99 	bl	8007e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0208 	orr.w	r2, r2, #8
 80078f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0204 	bic.w	r2, r2, #4
 8007908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69d9      	ldr	r1, [r3, #28]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	691a      	ldr	r2, [r3, #16]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	61da      	str	r2, [r3, #28]
      break;
 800791c:	e023      	b.n	8007966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fae3 	bl	8007ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69da      	ldr	r2, [r3, #28]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69d9      	ldr	r1, [r3, #28]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	021a      	lsls	r2, r3, #8
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	61da      	str	r2, [r3, #28]
      break;
 800795e:	e002      	b.n	8007966 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	75fb      	strb	r3, [r7, #23]
      break;
 8007964:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_TIM_ConfigClockSource+0x1c>
 8007990:	2302      	movs	r3, #2
 8007992:	e0b4      	b.n	8007afe <HAL_TIM_ConfigClockSource+0x186>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80079b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079cc:	d03e      	beq.n	8007a4c <HAL_TIM_ConfigClockSource+0xd4>
 80079ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079d2:	f200 8087 	bhi.w	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079da:	f000 8086 	beq.w	8007aea <HAL_TIM_ConfigClockSource+0x172>
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e2:	d87f      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80079e4:	2b70      	cmp	r3, #112	@ 0x70
 80079e6:	d01a      	beq.n	8007a1e <HAL_TIM_ConfigClockSource+0xa6>
 80079e8:	2b70      	cmp	r3, #112	@ 0x70
 80079ea:	d87b      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80079ec:	2b60      	cmp	r3, #96	@ 0x60
 80079ee:	d050      	beq.n	8007a92 <HAL_TIM_ConfigClockSource+0x11a>
 80079f0:	2b60      	cmp	r3, #96	@ 0x60
 80079f2:	d877      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80079f4:	2b50      	cmp	r3, #80	@ 0x50
 80079f6:	d03c      	beq.n	8007a72 <HAL_TIM_ConfigClockSource+0xfa>
 80079f8:	2b50      	cmp	r3, #80	@ 0x50
 80079fa:	d873      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80079fc:	2b40      	cmp	r3, #64	@ 0x40
 80079fe:	d058      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8007a00:	2b40      	cmp	r3, #64	@ 0x40
 8007a02:	d86f      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8007a04:	2b30      	cmp	r3, #48	@ 0x30
 8007a06:	d064      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a08:	2b30      	cmp	r3, #48	@ 0x30
 8007a0a:	d86b      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d060      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d867      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d05c      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a18:	2b10      	cmp	r3, #16
 8007a1a:	d05a      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a1c:	e062      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a2e:	f000 fb29 	bl	8008084 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	609a      	str	r2, [r3, #8]
      break;
 8007a4a:	e04f      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a5c:	f000 fb12 	bl	8008084 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a6e:	609a      	str	r2, [r3, #8]
      break;
 8007a70:	e03c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f000 fa86 	bl	8007f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2150      	movs	r1, #80	@ 0x50
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fadf 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007a90:	e02c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f000 faa5 	bl	8007fee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2160      	movs	r1, #96	@ 0x60
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 facf 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007ab0:	e01c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f000 fa66 	bl	8007f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2140      	movs	r1, #64	@ 0x40
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fabf 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007ad0:	e00c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f000 fab6 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007ae2:	e003      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae8:	e000      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a37      	ldr	r2, [pc, #220]	@ (8007c5c <TIM_Base_SetConfig+0xf0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0x38>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0x38>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a34      	ldr	r2, [pc, #208]	@ (8007c60 <TIM_Base_SetConfig+0xf4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0x38>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a33      	ldr	r2, [pc, #204]	@ (8007c64 <TIM_Base_SetConfig+0xf8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0x38>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a32      	ldr	r2, [pc, #200]	@ (8007c68 <TIM_Base_SetConfig+0xfc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d108      	bne.n	8007bb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a28      	ldr	r2, [pc, #160]	@ (8007c5c <TIM_Base_SetConfig+0xf0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d01b      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc4:	d017      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a25      	ldr	r2, [pc, #148]	@ (8007c60 <TIM_Base_SetConfig+0xf4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d013      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a24      	ldr	r2, [pc, #144]	@ (8007c64 <TIM_Base_SetConfig+0xf8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00f      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a23      	ldr	r2, [pc, #140]	@ (8007c68 <TIM_Base_SetConfig+0xfc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00b      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a22      	ldr	r2, [pc, #136]	@ (8007c6c <TIM_Base_SetConfig+0x100>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d007      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a21      	ldr	r2, [pc, #132]	@ (8007c70 <TIM_Base_SetConfig+0x104>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d003      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a20      	ldr	r2, [pc, #128]	@ (8007c74 <TIM_Base_SetConfig+0x108>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d108      	bne.n	8007c08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a0c      	ldr	r2, [pc, #48]	@ (8007c5c <TIM_Base_SetConfig+0xf0>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d103      	bne.n	8007c36 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	691a      	ldr	r2, [r3, #16]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f043 0204 	orr.w	r2, r3, #4
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40010000 	.word	0x40010000
 8007c60:	40000400 	.word	0x40000400
 8007c64:	40000800 	.word	0x40000800
 8007c68:	40000c00 	.word	0x40000c00
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40014400 	.word	0x40014400
 8007c74:	40014800 	.word	0x40014800

08007c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	f023 0201 	bic.w	r2, r3, #1
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f023 0302 	bic.w	r3, r3, #2
 8007cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a1c      	ldr	r2, [pc, #112]	@ (8007d40 <TIM_OC1_SetConfig+0xc8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d10c      	bne.n	8007cee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 0308 	bic.w	r3, r3, #8
 8007cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f023 0304 	bic.w	r3, r3, #4
 8007cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a13      	ldr	r2, [pc, #76]	@ (8007d40 <TIM_OC1_SetConfig+0xc8>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d111      	bne.n	8007d1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	621a      	str	r2, [r3, #32]
}
 8007d34:	bf00      	nop
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	40010000 	.word	0x40010000

08007d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	f023 0210 	bic.w	r2, r3, #16
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	021b      	lsls	r3, r3, #8
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f023 0320 	bic.w	r3, r3, #32
 8007d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e18 <TIM_OC2_SetConfig+0xd4>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d10d      	bne.n	8007dc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a15      	ldr	r2, [pc, #84]	@ (8007e18 <TIM_OC2_SetConfig+0xd4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d113      	bne.n	8007df0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	621a      	str	r2, [r3, #32]
}
 8007e0a:	bf00      	nop
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40010000 	.word	0x40010000

08007e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a1d      	ldr	r2, [pc, #116]	@ (8007eec <TIM_OC3_SetConfig+0xd0>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d10d      	bne.n	8007e96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a14      	ldr	r2, [pc, #80]	@ (8007eec <TIM_OC3_SetConfig+0xd0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d113      	bne.n	8007ec6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	621a      	str	r2, [r3, #32]
}
 8007ee0:	bf00      	nop
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	40010000 	.word	0x40010000

08007ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	031b      	lsls	r3, r3, #12
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a10      	ldr	r2, [pc, #64]	@ (8007f8c <TIM_OC4_SetConfig+0x9c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d109      	bne.n	8007f64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	019b      	lsls	r3, r3, #6
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	621a      	str	r2, [r3, #32]
}
 8007f7e:	bf00      	nop
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	40010000 	.word	0x40010000

08007f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f023 0201 	bic.w	r2, r3, #1
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f023 030a 	bic.w	r3, r3, #10
 8007fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b087      	sub	sp, #28
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	f023 0210 	bic.w	r2, r3, #16
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	031b      	lsls	r3, r3, #12
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800802a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	621a      	str	r2, [r3, #32]
}
 8008042:	bf00      	nop
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	f043 0307 	orr.w	r3, r3, #7
 8008070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	609a      	str	r2, [r3, #8]
}
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800809e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	021a      	lsls	r2, r3, #8
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	609a      	str	r2, [r3, #8]
}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	2201      	movs	r2, #1
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	43db      	mvns	r3, r3
 80080e6:	401a      	ands	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a1a      	ldr	r2, [r3, #32]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	fa01 f303 	lsl.w	r3, r1, r3
 80080fc:	431a      	orrs	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	621a      	str	r2, [r3, #32]
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008124:	2302      	movs	r3, #2
 8008126:	e050      	b.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800814e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a1c      	ldr	r2, [pc, #112]	@ (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d018      	beq.n	800819e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008174:	d013      	beq.n	800819e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a18      	ldr	r2, [pc, #96]	@ (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00e      	beq.n	800819e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a16      	ldr	r2, [pc, #88]	@ (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a15      	ldr	r2, [pc, #84]	@ (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a13      	ldr	r2, [pc, #76]	@ (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d10c      	bne.n	80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40000400 	.word	0x40000400
 80081e0:	40000800 	.word	0x40000800
 80081e4:	40000c00 	.word	0x40000c00
 80081e8:	40014000 	.word	0x40014000

080081ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008204:	2302      	movs	r3, #2
 8008206:	e03d      	b.n	8008284 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4313      	orrs	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e042      	b.n	8008350 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fc faba 	bl	8004858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2224      	movs	r2, #36	@ 0x24
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fd7f 	bl	8008e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	691a      	ldr	r2, [r3, #16]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695a      	ldr	r2, [r3, #20]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	@ 0x28
 800835c:	af02      	add	r7, sp, #8
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b20      	cmp	r3, #32
 8008376:	d175      	bne.n	8008464 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_UART_Transmit+0x2c>
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e06e      	b.n	8008466 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2221      	movs	r2, #33	@ 0x21
 8008392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008396:	f7fc fc8d 	bl	8004cb4 <HAL_GetTick>
 800839a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	88fa      	ldrh	r2, [r7, #6]
 80083a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	88fa      	ldrh	r2, [r7, #6]
 80083a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b0:	d108      	bne.n	80083c4 <HAL_UART_Transmit+0x6c>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d104      	bne.n	80083c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	61bb      	str	r3, [r7, #24]
 80083c2:	e003      	b.n	80083cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083cc:	e02e      	b.n	800842c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	2180      	movs	r1, #128	@ 0x80
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fb1d 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e03a      	b.n	8008466 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	3302      	adds	r3, #2
 800840a:	61bb      	str	r3, [r7, #24]
 800840c:	e007      	b.n	800841e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	3301      	adds	r3, #1
 800841c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008430:	b29b      	uxth	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1cb      	bne.n	80083ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2200      	movs	r2, #0
 800843e:	2140      	movs	r1, #64	@ 0x40
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fae9 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e006      	b.n	8008466 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	e000      	b.n	8008466 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008464:	2302      	movs	r3, #2
  }
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b0ba      	sub	sp, #232	@ 0xe8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008496:	2300      	movs	r3, #0
 8008498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800849c:	2300      	movs	r3, #0
 800849e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80084ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10f      	bne.n	80084d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d009      	beq.n	80084d6 <HAL_UART_IRQHandler+0x66>
 80084c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fbd7 	bl	8008c82 <UART_Receive_IT>
      return;
 80084d4:	e273      	b.n	80089be <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 80de 	beq.w	800869c <HAL_UART_IRQHandler+0x22c>
 80084e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d106      	bne.n	80084fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80d1 	beq.w	800869c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00b      	beq.n	800851e <HAL_UART_IRQHandler+0xae>
 8008506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800850a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	f043 0201 	orr.w	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800851e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008522:	f003 0304 	and.w	r3, r3, #4
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00b      	beq.n	8008542 <HAL_UART_IRQHandler+0xd2>
 800852a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853a:	f043 0202 	orr.w	r2, r3, #2
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <HAL_UART_IRQHandler+0xf6>
 800854e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855e:	f043 0204 	orr.w	r2, r3, #4
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d011      	beq.n	8008596 <HAL_UART_IRQHandler+0x126>
 8008572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d105      	bne.n	800858a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800857e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800858e:	f043 0208 	orr.w	r2, r3, #8
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 820a 	beq.w	80089b4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <HAL_UART_IRQHandler+0x14e>
 80085ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fb62 	bl	8008c82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c8:	2b40      	cmp	r3, #64	@ 0x40
 80085ca:	bf0c      	ite	eq
 80085cc:	2301      	moveq	r3, #1
 80085ce:	2300      	movne	r3, #0
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <HAL_UART_IRQHandler+0x17a>
 80085e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d04f      	beq.n	800868a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa6d 	bl	8008aca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fa:	2b40      	cmp	r3, #64	@ 0x40
 80085fc:	d141      	bne.n	8008682 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3314      	adds	r3, #20
 8008604:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008614:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800861c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3314      	adds	r3, #20
 8008626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800862a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800862e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1d9      	bne.n	80085fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d013      	beq.n	800867a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008656:	4a8a      	ldr	r2, [pc, #552]	@ (8008880 <HAL_UART_IRQHandler+0x410>)
 8008658:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865e:	4618      	mov	r0, r3
 8008660:	f7fd f8cb 	bl	80057fa <HAL_DMA_Abort_IT>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008678:	e00e      	b.n	8008698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f9b6 	bl	80089ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008680:	e00a      	b.n	8008698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9b2 	bl	80089ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008688:	e006      	b.n	8008698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f9ae 	bl	80089ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008696:	e18d      	b.n	80089b4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008698:	bf00      	nop
    return;
 800869a:	e18b      	b.n	80089b4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	f040 8167 	bne.w	8008974 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 8160 	beq.w	8008974 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80086b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8159 	beq.w	8008974 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086c2:	2300      	movs	r3, #0
 80086c4:	60bb      	str	r3, [r7, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	60bb      	str	r3, [r7, #8]
 80086d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e2:	2b40      	cmp	r3, #64	@ 0x40
 80086e4:	f040 80ce 	bne.w	8008884 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 80a9 	beq.w	8008850 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008706:	429a      	cmp	r2, r3
 8008708:	f080 80a2 	bcs.w	8008850 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008712:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800871e:	f000 8088 	beq.w	8008832 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	330c      	adds	r3, #12
 8008728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008738:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800873c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008740:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	330c      	adds	r3, #12
 800874a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800874e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800875a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008766:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1d9      	bne.n	8008722 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800877e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3314      	adds	r3, #20
 800878e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008792:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008796:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800879a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e1      	bne.n	800876e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3314      	adds	r3, #20
 80087b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3314      	adds	r3, #20
 80087ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80087ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e3      	bne.n	80087aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	330c      	adds	r3, #12
 80087f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008802:	f023 0310 	bic.w	r3, r3, #16
 8008806:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	330c      	adds	r3, #12
 8008810:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008814:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008816:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800881a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e3      	bne.n	80087f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882c:	4618      	mov	r0, r3
 800882e:	f7fc ff74 	bl	800571a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2202      	movs	r2, #2
 8008836:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008840:	b29b      	uxth	r3, r3
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	b29b      	uxth	r3, r3
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f8d9 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800884e:	e0b3      	b.n	80089b8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008854:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008858:	429a      	cmp	r2, r3
 800885a:	f040 80ad 	bne.w	80089b8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008868:	f040 80a6 	bne.w	80089b8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f8c1 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
      return;
 800887e:	e09b      	b.n	80089b8 <HAL_UART_IRQHandler+0x548>
 8008880:	08008b91 	.word	0x08008b91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800888c:	b29b      	uxth	r3, r3
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 808e 	beq.w	80089bc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80088a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8089 	beq.w	80089bc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	330c      	adds	r3, #12
 80088b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	330c      	adds	r3, #12
 80088ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80088ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80088d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e3      	bne.n	80088aa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3314      	adds	r3, #20
 80088e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	623b      	str	r3, [r7, #32]
   return(result);
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3314      	adds	r3, #20
 8008902:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008906:	633a      	str	r2, [r7, #48]	@ 0x30
 8008908:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800890c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e3      	bne.n	80088e2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2220      	movs	r2, #32
 800891e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	330c      	adds	r3, #12
 800892e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	60fb      	str	r3, [r7, #12]
   return(result);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0310 	bic.w	r3, r3, #16
 800893e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	330c      	adds	r3, #12
 8008948:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800894c:	61fa      	str	r2, [r7, #28]
 800894e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	617b      	str	r3, [r7, #20]
   return(result);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e3      	bne.n	8008928 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008966:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f847 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008972:	e023      	b.n	80089bc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <HAL_UART_IRQHandler+0x524>
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f910 	bl	8008bb2 <UART_Transmit_IT>
    return;
 8008992:	e014      	b.n	80089be <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00e      	beq.n	80089be <HAL_UART_IRQHandler+0x54e>
 80089a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f950 	bl	8008c52 <UART_EndTransmit_IT>
    return;
 80089b2:	e004      	b.n	80089be <HAL_UART_IRQHandler+0x54e>
    return;
 80089b4:	bf00      	nop
 80089b6:	e002      	b.n	80089be <HAL_UART_IRQHandler+0x54e>
      return;
 80089b8:	bf00      	nop
 80089ba:	e000      	b.n	80089be <HAL_UART_IRQHandler+0x54e>
      return;
 80089bc:	bf00      	nop
  }
}
 80089be:	37e8      	adds	r7, #232	@ 0xe8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	4613      	mov	r3, r2
 8008a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a28:	e03b      	b.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d037      	beq.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a32:	f7fc f93f 	bl	8004cb4 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	6a3a      	ldr	r2, [r7, #32]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d302      	bcc.n	8008a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e03a      	b.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d023      	beq.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b80      	cmp	r3, #128	@ 0x80
 8008a5e:	d020      	beq.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b40      	cmp	r3, #64	@ 0x40
 8008a64:	d01d      	beq.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0308 	and.w	r3, r3, #8
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d116      	bne.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f81d 	bl	8008aca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2208      	movs	r2, #8
 8008a94:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e00f      	b.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	bf0c      	ite	eq
 8008ab2:	2301      	moveq	r3, #1
 8008ab4:	2300      	movne	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d0b4      	beq.n	8008a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b095      	sub	sp, #84	@ 0x54
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	330c      	adds	r3, #12
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	330c      	adds	r3, #12
 8008af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008af2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008af8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e5      	bne.n	8008ad2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3314      	adds	r3, #20
 8008b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	f023 0301 	bic.w	r3, r3, #1
 8008b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3314      	adds	r3, #20
 8008b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e5      	bne.n	8008b06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d119      	bne.n	8008b76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	330c      	adds	r3, #12
 8008b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f023 0310 	bic.w	r3, r3, #16
 8008b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	330c      	adds	r3, #12
 8008b60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b62:	61ba      	str	r2, [r7, #24]
 8008b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6979      	ldr	r1, [r7, #20]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e5      	bne.n	8008b42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008b84:	bf00      	nop
 8008b86:	3754      	adds	r7, #84	@ 0x54
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff ff21 	bl	80089ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b085      	sub	sp, #20
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b21      	cmp	r3, #33	@ 0x21
 8008bc4:	d13e      	bne.n	8008c44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bce:	d114      	bne.n	8008bfa <UART_Transmit_IT+0x48>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d110      	bne.n	8008bfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	881b      	ldrh	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	1c9a      	adds	r2, r3, #2
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	621a      	str	r2, [r3, #32]
 8008bf8:	e008      	b.n	8008c0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	1c59      	adds	r1, r3, #1
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	6211      	str	r1, [r2, #32]
 8008c04:	781a      	ldrb	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	3b01      	subs	r3, #1
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10f      	bne.n	8008c40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	e000      	b.n	8008c46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c44:	2302      	movs	r3, #2
  }
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff fea6 	bl	80089c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b08c      	sub	sp, #48	@ 0x30
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b22      	cmp	r3, #34	@ 0x22
 8008c9c:	f040 80aa 	bne.w	8008df4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ca8:	d115      	bne.n	8008cd6 <UART_Receive_IT+0x54>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d111      	bne.n	8008cd6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cce:	1c9a      	adds	r2, r3, #2
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8008cd4:	e024      	b.n	8008d20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce4:	d007      	beq.n	8008cf6 <UART_Receive_IT+0x74>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <UART_Receive_IT+0x82>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e008      	b.n	8008d16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d15d      	bne.n	8008df0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68da      	ldr	r2, [r3, #12]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 0220 	bic.w	r2, r2, #32
 8008d42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695a      	ldr	r2, [r3, #20]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0201 	bic.w	r2, r2, #1
 8008d62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d135      	bne.n	8008de6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	330c      	adds	r3, #12
 8008d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f023 0310 	bic.w	r3, r3, #16
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	330c      	adds	r3, #12
 8008d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008da0:	623a      	str	r2, [r7, #32]
 8008da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	69f9      	ldr	r1, [r7, #28]
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e5      	bne.n	8008d80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0310 	and.w	r3, r3, #16
 8008dbe:	2b10      	cmp	r3, #16
 8008dc0:	d10a      	bne.n	8008dd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60fb      	str	r3, [r7, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff fe0e 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
 8008de4:	e002      	b.n	8008dec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fdf6 	bl	80089d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e002      	b.n	8008df6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e000      	b.n	8008df6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008df4:	2302      	movs	r3, #2
  }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3730      	adds	r7, #48	@ 0x30
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e04:	b0c0      	sub	sp, #256	@ 0x100
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e1c:	68d9      	ldr	r1, [r3, #12]
 8008e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	ea40 0301 	orr.w	r3, r0, r1
 8008e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	431a      	orrs	r2, r3
 8008e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e58:	f021 010c 	bic.w	r1, r1, #12
 8008e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e66:	430b      	orrs	r3, r1
 8008e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7a:	6999      	ldr	r1, [r3, #24]
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	ea40 0301 	orr.w	r3, r0, r1
 8008e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80090cc <UART_SetConfig+0x2cc>)
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d005      	beq.n	8008ea0 <UART_SetConfig+0xa0>
 8008e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80090d0 <UART_SetConfig+0x2d0>)
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d104      	bne.n	8008eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ea0:	f7fd fae2 	bl	8006468 <HAL_RCC_GetPCLK2Freq>
 8008ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ea8:	e003      	b.n	8008eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008eaa:	f7fd fac9 	bl	8006440 <HAL_RCC_GetPCLK1Freq>
 8008eae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ebc:	f040 810c 	bne.w	80090d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	1891      	adds	r1, r2, r2
 8008ed8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008eda:	415b      	adcs	r3, r3
 8008edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	eb12 0801 	adds.w	r8, r2, r1
 8008ee8:	4629      	mov	r1, r5
 8008eea:	eb43 0901 	adc.w	r9, r3, r1
 8008eee:	f04f 0200 	mov.w	r2, #0
 8008ef2:	f04f 0300 	mov.w	r3, #0
 8008ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f02:	4690      	mov	r8, r2
 8008f04:	4699      	mov	r9, r3
 8008f06:	4623      	mov	r3, r4
 8008f08:	eb18 0303 	adds.w	r3, r8, r3
 8008f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f10:	462b      	mov	r3, r5
 8008f12:	eb49 0303 	adc.w	r3, r9, r3
 8008f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f2e:	460b      	mov	r3, r1
 8008f30:	18db      	adds	r3, r3, r3
 8008f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f34:	4613      	mov	r3, r2
 8008f36:	eb42 0303 	adc.w	r3, r2, r3
 8008f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f44:	f7f7 fe38 	bl	8000bb8 <__aeabi_uldivmod>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4b61      	ldr	r3, [pc, #388]	@ (80090d4 <UART_SetConfig+0x2d4>)
 8008f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	011c      	lsls	r4, r3, #4
 8008f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f68:	4642      	mov	r2, r8
 8008f6a:	464b      	mov	r3, r9
 8008f6c:	1891      	adds	r1, r2, r2
 8008f6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f70:	415b      	adcs	r3, r3
 8008f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f78:	4641      	mov	r1, r8
 8008f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f7e:	4649      	mov	r1, r9
 8008f80:	eb43 0b01 	adc.w	fp, r3, r1
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	f04f 0300 	mov.w	r3, #0
 8008f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f98:	4692      	mov	sl, r2
 8008f9a:	469b      	mov	fp, r3
 8008f9c:	4643      	mov	r3, r8
 8008f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8008fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fa6:	464b      	mov	r3, r9
 8008fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8008fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	18db      	adds	r3, r3, r3
 8008fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fca:	4613      	mov	r3, r2
 8008fcc:	eb42 0303 	adc.w	r3, r2, r3
 8008fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008fda:	f7f7 fded 	bl	8000bb8 <__aeabi_uldivmod>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80090d4 <UART_SetConfig+0x2d4>)
 8008fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8008fea:	095b      	lsrs	r3, r3, #5
 8008fec:	2264      	movs	r2, #100	@ 0x64
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
 8008ff2:	1acb      	subs	r3, r1, r3
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008ffa:	4b36      	ldr	r3, [pc, #216]	@ (80090d4 <UART_SetConfig+0x2d4>)
 8008ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8009000:	095b      	lsrs	r3, r3, #5
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009008:	441c      	add	r4, r3
 800900a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800900e:	2200      	movs	r2, #0
 8009010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009014:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800901c:	4642      	mov	r2, r8
 800901e:	464b      	mov	r3, r9
 8009020:	1891      	adds	r1, r2, r2
 8009022:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009024:	415b      	adcs	r3, r3
 8009026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800902c:	4641      	mov	r1, r8
 800902e:	1851      	adds	r1, r2, r1
 8009030:	6339      	str	r1, [r7, #48]	@ 0x30
 8009032:	4649      	mov	r1, r9
 8009034:	414b      	adcs	r3, r1
 8009036:	637b      	str	r3, [r7, #52]	@ 0x34
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	f04f 0300 	mov.w	r3, #0
 8009040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009044:	4659      	mov	r1, fp
 8009046:	00cb      	lsls	r3, r1, #3
 8009048:	4651      	mov	r1, sl
 800904a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800904e:	4651      	mov	r1, sl
 8009050:	00ca      	lsls	r2, r1, #3
 8009052:	4610      	mov	r0, r2
 8009054:	4619      	mov	r1, r3
 8009056:	4603      	mov	r3, r0
 8009058:	4642      	mov	r2, r8
 800905a:	189b      	adds	r3, r3, r2
 800905c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009060:	464b      	mov	r3, r9
 8009062:	460a      	mov	r2, r1
 8009064:	eb42 0303 	adc.w	r3, r2, r3
 8009068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800906c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009078:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800907c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009080:	460b      	mov	r3, r1
 8009082:	18db      	adds	r3, r3, r3
 8009084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009086:	4613      	mov	r3, r2
 8009088:	eb42 0303 	adc.w	r3, r2, r3
 800908c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800908e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009096:	f7f7 fd8f 	bl	8000bb8 <__aeabi_uldivmod>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <UART_SetConfig+0x2d4>)
 80090a0:	fba3 1302 	umull	r1, r3, r3, r2
 80090a4:	095b      	lsrs	r3, r3, #5
 80090a6:	2164      	movs	r1, #100	@ 0x64
 80090a8:	fb01 f303 	mul.w	r3, r1, r3
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	3332      	adds	r3, #50	@ 0x32
 80090b2:	4a08      	ldr	r2, [pc, #32]	@ (80090d4 <UART_SetConfig+0x2d4>)
 80090b4:	fba2 2303 	umull	r2, r3, r2, r3
 80090b8:	095b      	lsrs	r3, r3, #5
 80090ba:	f003 0207 	and.w	r2, r3, #7
 80090be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4422      	add	r2, r4
 80090c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090c8:	e106      	b.n	80092d8 <UART_SetConfig+0x4d8>
 80090ca:	bf00      	nop
 80090cc:	40011000 	.word	0x40011000
 80090d0:	40011400 	.word	0x40011400
 80090d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090dc:	2200      	movs	r2, #0
 80090de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80090e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80090ea:	4642      	mov	r2, r8
 80090ec:	464b      	mov	r3, r9
 80090ee:	1891      	adds	r1, r2, r2
 80090f0:	6239      	str	r1, [r7, #32]
 80090f2:	415b      	adcs	r3, r3
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80090f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090fa:	4641      	mov	r1, r8
 80090fc:	1854      	adds	r4, r2, r1
 80090fe:	4649      	mov	r1, r9
 8009100:	eb43 0501 	adc.w	r5, r3, r1
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	00eb      	lsls	r3, r5, #3
 800910e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009112:	00e2      	lsls	r2, r4, #3
 8009114:	4614      	mov	r4, r2
 8009116:	461d      	mov	r5, r3
 8009118:	4643      	mov	r3, r8
 800911a:	18e3      	adds	r3, r4, r3
 800911c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009120:	464b      	mov	r3, r9
 8009122:	eb45 0303 	adc.w	r3, r5, r3
 8009126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800912a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800913a:	f04f 0200 	mov.w	r2, #0
 800913e:	f04f 0300 	mov.w	r3, #0
 8009142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009146:	4629      	mov	r1, r5
 8009148:	008b      	lsls	r3, r1, #2
 800914a:	4621      	mov	r1, r4
 800914c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009150:	4621      	mov	r1, r4
 8009152:	008a      	lsls	r2, r1, #2
 8009154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009158:	f7f7 fd2e 	bl	8000bb8 <__aeabi_uldivmod>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4b60      	ldr	r3, [pc, #384]	@ (80092e4 <UART_SetConfig+0x4e4>)
 8009162:	fba3 2302 	umull	r2, r3, r3, r2
 8009166:	095b      	lsrs	r3, r3, #5
 8009168:	011c      	lsls	r4, r3, #4
 800916a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800916e:	2200      	movs	r2, #0
 8009170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009174:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800917c:	4642      	mov	r2, r8
 800917e:	464b      	mov	r3, r9
 8009180:	1891      	adds	r1, r2, r2
 8009182:	61b9      	str	r1, [r7, #24]
 8009184:	415b      	adcs	r3, r3
 8009186:	61fb      	str	r3, [r7, #28]
 8009188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800918c:	4641      	mov	r1, r8
 800918e:	1851      	adds	r1, r2, r1
 8009190:	6139      	str	r1, [r7, #16]
 8009192:	4649      	mov	r1, r9
 8009194:	414b      	adcs	r3, r1
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091a4:	4659      	mov	r1, fp
 80091a6:	00cb      	lsls	r3, r1, #3
 80091a8:	4651      	mov	r1, sl
 80091aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ae:	4651      	mov	r1, sl
 80091b0:	00ca      	lsls	r2, r1, #3
 80091b2:	4610      	mov	r0, r2
 80091b4:	4619      	mov	r1, r3
 80091b6:	4603      	mov	r3, r0
 80091b8:	4642      	mov	r2, r8
 80091ba:	189b      	adds	r3, r3, r2
 80091bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091c0:	464b      	mov	r3, r9
 80091c2:	460a      	mov	r2, r1
 80091c4:	eb42 0303 	adc.w	r3, r2, r3
 80091c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80091e4:	4649      	mov	r1, r9
 80091e6:	008b      	lsls	r3, r1, #2
 80091e8:	4641      	mov	r1, r8
 80091ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091ee:	4641      	mov	r1, r8
 80091f0:	008a      	lsls	r2, r1, #2
 80091f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091f6:	f7f7 fcdf 	bl	8000bb8 <__aeabi_uldivmod>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	4b38      	ldr	r3, [pc, #224]	@ (80092e4 <UART_SetConfig+0x4e4>)
 8009202:	fba3 2301 	umull	r2, r3, r3, r1
 8009206:	095b      	lsrs	r3, r3, #5
 8009208:	2264      	movs	r2, #100	@ 0x64
 800920a:	fb02 f303 	mul.w	r3, r2, r3
 800920e:	1acb      	subs	r3, r1, r3
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	3332      	adds	r3, #50	@ 0x32
 8009214:	4a33      	ldr	r2, [pc, #204]	@ (80092e4 <UART_SetConfig+0x4e4>)
 8009216:	fba2 2303 	umull	r2, r3, r2, r3
 800921a:	095b      	lsrs	r3, r3, #5
 800921c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009220:	441c      	add	r4, r3
 8009222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009226:	2200      	movs	r2, #0
 8009228:	673b      	str	r3, [r7, #112]	@ 0x70
 800922a:	677a      	str	r2, [r7, #116]	@ 0x74
 800922c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	1891      	adds	r1, r2, r2
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	415b      	adcs	r3, r3
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009240:	4641      	mov	r1, r8
 8009242:	1851      	adds	r1, r2, r1
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	4649      	mov	r1, r9
 8009248:	414b      	adcs	r3, r1
 800924a:	607b      	str	r3, [r7, #4]
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009258:	4659      	mov	r1, fp
 800925a:	00cb      	lsls	r3, r1, #3
 800925c:	4651      	mov	r1, sl
 800925e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009262:	4651      	mov	r1, sl
 8009264:	00ca      	lsls	r2, r1, #3
 8009266:	4610      	mov	r0, r2
 8009268:	4619      	mov	r1, r3
 800926a:	4603      	mov	r3, r0
 800926c:	4642      	mov	r2, r8
 800926e:	189b      	adds	r3, r3, r2
 8009270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009272:	464b      	mov	r3, r9
 8009274:	460a      	mov	r2, r1
 8009276:	eb42 0303 	adc.w	r3, r2, r3
 800927a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800927c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	663b      	str	r3, [r7, #96]	@ 0x60
 8009286:	667a      	str	r2, [r7, #100]	@ 0x64
 8009288:	f04f 0200 	mov.w	r2, #0
 800928c:	f04f 0300 	mov.w	r3, #0
 8009290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009294:	4649      	mov	r1, r9
 8009296:	008b      	lsls	r3, r1, #2
 8009298:	4641      	mov	r1, r8
 800929a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800929e:	4641      	mov	r1, r8
 80092a0:	008a      	lsls	r2, r1, #2
 80092a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80092a6:	f7f7 fc87 	bl	8000bb8 <__aeabi_uldivmod>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <UART_SetConfig+0x4e4>)
 80092b0:	fba3 1302 	umull	r1, r3, r3, r2
 80092b4:	095b      	lsrs	r3, r3, #5
 80092b6:	2164      	movs	r1, #100	@ 0x64
 80092b8:	fb01 f303 	mul.w	r3, r1, r3
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	3332      	adds	r3, #50	@ 0x32
 80092c2:	4a08      	ldr	r2, [pc, #32]	@ (80092e4 <UART_SetConfig+0x4e4>)
 80092c4:	fba2 2303 	umull	r2, r3, r2, r3
 80092c8:	095b      	lsrs	r3, r3, #5
 80092ca:	f003 020f 	and.w	r2, r3, #15
 80092ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4422      	add	r2, r4
 80092d6:	609a      	str	r2, [r3, #8]
}
 80092d8:	bf00      	nop
 80092da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80092de:	46bd      	mov	sp, r7
 80092e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092e4:	51eb851f 	.word	0x51eb851f

080092e8 <__cvt>:
 80092e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	ec57 6b10 	vmov	r6, r7, d0
 80092f0:	2f00      	cmp	r7, #0
 80092f2:	460c      	mov	r4, r1
 80092f4:	4619      	mov	r1, r3
 80092f6:	463b      	mov	r3, r7
 80092f8:	bfbb      	ittet	lt
 80092fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80092fe:	461f      	movlt	r7, r3
 8009300:	2300      	movge	r3, #0
 8009302:	232d      	movlt	r3, #45	@ 0x2d
 8009304:	700b      	strb	r3, [r1, #0]
 8009306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009308:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800930c:	4691      	mov	r9, r2
 800930e:	f023 0820 	bic.w	r8, r3, #32
 8009312:	bfbc      	itt	lt
 8009314:	4632      	movlt	r2, r6
 8009316:	4616      	movlt	r6, r2
 8009318:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800931c:	d005      	beq.n	800932a <__cvt+0x42>
 800931e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009322:	d100      	bne.n	8009326 <__cvt+0x3e>
 8009324:	3401      	adds	r4, #1
 8009326:	2102      	movs	r1, #2
 8009328:	e000      	b.n	800932c <__cvt+0x44>
 800932a:	2103      	movs	r1, #3
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	ab02      	add	r3, sp, #8
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	ec47 6b10 	vmov	d0, r6, r7
 8009338:	4653      	mov	r3, sl
 800933a:	4622      	mov	r2, r4
 800933c:	f000 fe74 	bl	800a028 <_dtoa_r>
 8009340:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009344:	4605      	mov	r5, r0
 8009346:	d119      	bne.n	800937c <__cvt+0x94>
 8009348:	f019 0f01 	tst.w	r9, #1
 800934c:	d00e      	beq.n	800936c <__cvt+0x84>
 800934e:	eb00 0904 	add.w	r9, r0, r4
 8009352:	2200      	movs	r2, #0
 8009354:	2300      	movs	r3, #0
 8009356:	4630      	mov	r0, r6
 8009358:	4639      	mov	r1, r7
 800935a:	f7f7 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800935e:	b108      	cbz	r0, 8009364 <__cvt+0x7c>
 8009360:	f8cd 900c 	str.w	r9, [sp, #12]
 8009364:	2230      	movs	r2, #48	@ 0x30
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	454b      	cmp	r3, r9
 800936a:	d31e      	bcc.n	80093aa <__cvt+0xc2>
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009370:	1b5b      	subs	r3, r3, r5
 8009372:	4628      	mov	r0, r5
 8009374:	6013      	str	r3, [r2, #0]
 8009376:	b004      	add	sp, #16
 8009378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800937c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009380:	eb00 0904 	add.w	r9, r0, r4
 8009384:	d1e5      	bne.n	8009352 <__cvt+0x6a>
 8009386:	7803      	ldrb	r3, [r0, #0]
 8009388:	2b30      	cmp	r3, #48	@ 0x30
 800938a:	d10a      	bne.n	80093a2 <__cvt+0xba>
 800938c:	2200      	movs	r2, #0
 800938e:	2300      	movs	r3, #0
 8009390:	4630      	mov	r0, r6
 8009392:	4639      	mov	r1, r7
 8009394:	f7f7 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009398:	b918      	cbnz	r0, 80093a2 <__cvt+0xba>
 800939a:	f1c4 0401 	rsb	r4, r4, #1
 800939e:	f8ca 4000 	str.w	r4, [sl]
 80093a2:	f8da 3000 	ldr.w	r3, [sl]
 80093a6:	4499      	add	r9, r3
 80093a8:	e7d3      	b.n	8009352 <__cvt+0x6a>
 80093aa:	1c59      	adds	r1, r3, #1
 80093ac:	9103      	str	r1, [sp, #12]
 80093ae:	701a      	strb	r2, [r3, #0]
 80093b0:	e7d9      	b.n	8009366 <__cvt+0x7e>

080093b2 <__exponent>:
 80093b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b4:	2900      	cmp	r1, #0
 80093b6:	bfba      	itte	lt
 80093b8:	4249      	neglt	r1, r1
 80093ba:	232d      	movlt	r3, #45	@ 0x2d
 80093bc:	232b      	movge	r3, #43	@ 0x2b
 80093be:	2909      	cmp	r1, #9
 80093c0:	7002      	strb	r2, [r0, #0]
 80093c2:	7043      	strb	r3, [r0, #1]
 80093c4:	dd29      	ble.n	800941a <__exponent+0x68>
 80093c6:	f10d 0307 	add.w	r3, sp, #7
 80093ca:	461d      	mov	r5, r3
 80093cc:	270a      	movs	r7, #10
 80093ce:	461a      	mov	r2, r3
 80093d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80093d4:	fb07 1416 	mls	r4, r7, r6, r1
 80093d8:	3430      	adds	r4, #48	@ 0x30
 80093da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80093de:	460c      	mov	r4, r1
 80093e0:	2c63      	cmp	r4, #99	@ 0x63
 80093e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80093e6:	4631      	mov	r1, r6
 80093e8:	dcf1      	bgt.n	80093ce <__exponent+0x1c>
 80093ea:	3130      	adds	r1, #48	@ 0x30
 80093ec:	1e94      	subs	r4, r2, #2
 80093ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80093f2:	1c41      	adds	r1, r0, #1
 80093f4:	4623      	mov	r3, r4
 80093f6:	42ab      	cmp	r3, r5
 80093f8:	d30a      	bcc.n	8009410 <__exponent+0x5e>
 80093fa:	f10d 0309 	add.w	r3, sp, #9
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	42ac      	cmp	r4, r5
 8009402:	bf88      	it	hi
 8009404:	2300      	movhi	r3, #0
 8009406:	3302      	adds	r3, #2
 8009408:	4403      	add	r3, r0
 800940a:	1a18      	subs	r0, r3, r0
 800940c:	b003      	add	sp, #12
 800940e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009410:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009414:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009418:	e7ed      	b.n	80093f6 <__exponent+0x44>
 800941a:	2330      	movs	r3, #48	@ 0x30
 800941c:	3130      	adds	r1, #48	@ 0x30
 800941e:	7083      	strb	r3, [r0, #2]
 8009420:	70c1      	strb	r1, [r0, #3]
 8009422:	1d03      	adds	r3, r0, #4
 8009424:	e7f1      	b.n	800940a <__exponent+0x58>
	...

08009428 <_printf_float>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	b08d      	sub	sp, #52	@ 0x34
 800942e:	460c      	mov	r4, r1
 8009430:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009434:	4616      	mov	r6, r2
 8009436:	461f      	mov	r7, r3
 8009438:	4605      	mov	r5, r0
 800943a:	f000 fcf5 	bl	8009e28 <_localeconv_r>
 800943e:	6803      	ldr	r3, [r0, #0]
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	4618      	mov	r0, r3
 8009444:	f7f6 ff1c 	bl	8000280 <strlen>
 8009448:	2300      	movs	r3, #0
 800944a:	930a      	str	r3, [sp, #40]	@ 0x28
 800944c:	f8d8 3000 	ldr.w	r3, [r8]
 8009450:	9005      	str	r0, [sp, #20]
 8009452:	3307      	adds	r3, #7
 8009454:	f023 0307 	bic.w	r3, r3, #7
 8009458:	f103 0208 	add.w	r2, r3, #8
 800945c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009460:	f8d4 b000 	ldr.w	fp, [r4]
 8009464:	f8c8 2000 	str.w	r2, [r8]
 8009468:	e9d3 8900 	ldrd	r8, r9, [r3]
 800946c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009470:	9307      	str	r3, [sp, #28]
 8009472:	f8cd 8018 	str.w	r8, [sp, #24]
 8009476:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800947a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800947e:	4b9c      	ldr	r3, [pc, #624]	@ (80096f0 <_printf_float+0x2c8>)
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	f7f7 fb5a 	bl	8000b3c <__aeabi_dcmpun>
 8009488:	bb70      	cbnz	r0, 80094e8 <_printf_float+0xc0>
 800948a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800948e:	4b98      	ldr	r3, [pc, #608]	@ (80096f0 <_printf_float+0x2c8>)
 8009490:	f04f 32ff 	mov.w	r2, #4294967295
 8009494:	f7f7 fb34 	bl	8000b00 <__aeabi_dcmple>
 8009498:	bb30      	cbnz	r0, 80094e8 <_printf_float+0xc0>
 800949a:	2200      	movs	r2, #0
 800949c:	2300      	movs	r3, #0
 800949e:	4640      	mov	r0, r8
 80094a0:	4649      	mov	r1, r9
 80094a2:	f7f7 fb23 	bl	8000aec <__aeabi_dcmplt>
 80094a6:	b110      	cbz	r0, 80094ae <_printf_float+0x86>
 80094a8:	232d      	movs	r3, #45	@ 0x2d
 80094aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094ae:	4a91      	ldr	r2, [pc, #580]	@ (80096f4 <_printf_float+0x2cc>)
 80094b0:	4b91      	ldr	r3, [pc, #580]	@ (80096f8 <_printf_float+0x2d0>)
 80094b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094b6:	bf8c      	ite	hi
 80094b8:	4690      	movhi	r8, r2
 80094ba:	4698      	movls	r8, r3
 80094bc:	2303      	movs	r3, #3
 80094be:	6123      	str	r3, [r4, #16]
 80094c0:	f02b 0304 	bic.w	r3, fp, #4
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	f04f 0900 	mov.w	r9, #0
 80094ca:	9700      	str	r7, [sp, #0]
 80094cc:	4633      	mov	r3, r6
 80094ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094d0:	4621      	mov	r1, r4
 80094d2:	4628      	mov	r0, r5
 80094d4:	f000 f9d2 	bl	800987c <_printf_common>
 80094d8:	3001      	adds	r0, #1
 80094da:	f040 808d 	bne.w	80095f8 <_printf_float+0x1d0>
 80094de:	f04f 30ff 	mov.w	r0, #4294967295
 80094e2:	b00d      	add	sp, #52	@ 0x34
 80094e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e8:	4642      	mov	r2, r8
 80094ea:	464b      	mov	r3, r9
 80094ec:	4640      	mov	r0, r8
 80094ee:	4649      	mov	r1, r9
 80094f0:	f7f7 fb24 	bl	8000b3c <__aeabi_dcmpun>
 80094f4:	b140      	cbz	r0, 8009508 <_printf_float+0xe0>
 80094f6:	464b      	mov	r3, r9
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bfbc      	itt	lt
 80094fc:	232d      	movlt	r3, #45	@ 0x2d
 80094fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009502:	4a7e      	ldr	r2, [pc, #504]	@ (80096fc <_printf_float+0x2d4>)
 8009504:	4b7e      	ldr	r3, [pc, #504]	@ (8009700 <_printf_float+0x2d8>)
 8009506:	e7d4      	b.n	80094b2 <_printf_float+0x8a>
 8009508:	6863      	ldr	r3, [r4, #4]
 800950a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800950e:	9206      	str	r2, [sp, #24]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	d13b      	bne.n	800958c <_printf_float+0x164>
 8009514:	2306      	movs	r3, #6
 8009516:	6063      	str	r3, [r4, #4]
 8009518:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800951c:	2300      	movs	r3, #0
 800951e:	6022      	str	r2, [r4, #0]
 8009520:	9303      	str	r3, [sp, #12]
 8009522:	ab0a      	add	r3, sp, #40	@ 0x28
 8009524:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009528:	ab09      	add	r3, sp, #36	@ 0x24
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	6861      	ldr	r1, [r4, #4]
 800952e:	ec49 8b10 	vmov	d0, r8, r9
 8009532:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009536:	4628      	mov	r0, r5
 8009538:	f7ff fed6 	bl	80092e8 <__cvt>
 800953c:	9b06      	ldr	r3, [sp, #24]
 800953e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009540:	2b47      	cmp	r3, #71	@ 0x47
 8009542:	4680      	mov	r8, r0
 8009544:	d129      	bne.n	800959a <_printf_float+0x172>
 8009546:	1cc8      	adds	r0, r1, #3
 8009548:	db02      	blt.n	8009550 <_printf_float+0x128>
 800954a:	6863      	ldr	r3, [r4, #4]
 800954c:	4299      	cmp	r1, r3
 800954e:	dd41      	ble.n	80095d4 <_printf_float+0x1ac>
 8009550:	f1aa 0a02 	sub.w	sl, sl, #2
 8009554:	fa5f fa8a 	uxtb.w	sl, sl
 8009558:	3901      	subs	r1, #1
 800955a:	4652      	mov	r2, sl
 800955c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009560:	9109      	str	r1, [sp, #36]	@ 0x24
 8009562:	f7ff ff26 	bl	80093b2 <__exponent>
 8009566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009568:	1813      	adds	r3, r2, r0
 800956a:	2a01      	cmp	r2, #1
 800956c:	4681      	mov	r9, r0
 800956e:	6123      	str	r3, [r4, #16]
 8009570:	dc02      	bgt.n	8009578 <_printf_float+0x150>
 8009572:	6822      	ldr	r2, [r4, #0]
 8009574:	07d2      	lsls	r2, r2, #31
 8009576:	d501      	bpl.n	800957c <_printf_float+0x154>
 8009578:	3301      	adds	r3, #1
 800957a:	6123      	str	r3, [r4, #16]
 800957c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009580:	2b00      	cmp	r3, #0
 8009582:	d0a2      	beq.n	80094ca <_printf_float+0xa2>
 8009584:	232d      	movs	r3, #45	@ 0x2d
 8009586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800958a:	e79e      	b.n	80094ca <_printf_float+0xa2>
 800958c:	9a06      	ldr	r2, [sp, #24]
 800958e:	2a47      	cmp	r2, #71	@ 0x47
 8009590:	d1c2      	bne.n	8009518 <_printf_float+0xf0>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1c0      	bne.n	8009518 <_printf_float+0xf0>
 8009596:	2301      	movs	r3, #1
 8009598:	e7bd      	b.n	8009516 <_printf_float+0xee>
 800959a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800959e:	d9db      	bls.n	8009558 <_printf_float+0x130>
 80095a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80095a4:	d118      	bne.n	80095d8 <_printf_float+0x1b0>
 80095a6:	2900      	cmp	r1, #0
 80095a8:	6863      	ldr	r3, [r4, #4]
 80095aa:	dd0b      	ble.n	80095c4 <_printf_float+0x19c>
 80095ac:	6121      	str	r1, [r4, #16]
 80095ae:	b913      	cbnz	r3, 80095b6 <_printf_float+0x18e>
 80095b0:	6822      	ldr	r2, [r4, #0]
 80095b2:	07d0      	lsls	r0, r2, #31
 80095b4:	d502      	bpl.n	80095bc <_printf_float+0x194>
 80095b6:	3301      	adds	r3, #1
 80095b8:	440b      	add	r3, r1
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095be:	f04f 0900 	mov.w	r9, #0
 80095c2:	e7db      	b.n	800957c <_printf_float+0x154>
 80095c4:	b913      	cbnz	r3, 80095cc <_printf_float+0x1a4>
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	07d2      	lsls	r2, r2, #31
 80095ca:	d501      	bpl.n	80095d0 <_printf_float+0x1a8>
 80095cc:	3302      	adds	r3, #2
 80095ce:	e7f4      	b.n	80095ba <_printf_float+0x192>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e7f2      	b.n	80095ba <_printf_float+0x192>
 80095d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80095d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095da:	4299      	cmp	r1, r3
 80095dc:	db05      	blt.n	80095ea <_printf_float+0x1c2>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	6121      	str	r1, [r4, #16]
 80095e2:	07d8      	lsls	r0, r3, #31
 80095e4:	d5ea      	bpl.n	80095bc <_printf_float+0x194>
 80095e6:	1c4b      	adds	r3, r1, #1
 80095e8:	e7e7      	b.n	80095ba <_printf_float+0x192>
 80095ea:	2900      	cmp	r1, #0
 80095ec:	bfd4      	ite	le
 80095ee:	f1c1 0202 	rsble	r2, r1, #2
 80095f2:	2201      	movgt	r2, #1
 80095f4:	4413      	add	r3, r2
 80095f6:	e7e0      	b.n	80095ba <_printf_float+0x192>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	055a      	lsls	r2, r3, #21
 80095fc:	d407      	bmi.n	800960e <_printf_float+0x1e6>
 80095fe:	6923      	ldr	r3, [r4, #16]
 8009600:	4642      	mov	r2, r8
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	47b8      	blx	r7
 8009608:	3001      	adds	r0, #1
 800960a:	d12b      	bne.n	8009664 <_printf_float+0x23c>
 800960c:	e767      	b.n	80094de <_printf_float+0xb6>
 800960e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009612:	f240 80dd 	bls.w	80097d0 <_printf_float+0x3a8>
 8009616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800961a:	2200      	movs	r2, #0
 800961c:	2300      	movs	r3, #0
 800961e:	f7f7 fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009622:	2800      	cmp	r0, #0
 8009624:	d033      	beq.n	800968e <_printf_float+0x266>
 8009626:	4a37      	ldr	r2, [pc, #220]	@ (8009704 <_printf_float+0x2dc>)
 8009628:	2301      	movs	r3, #1
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	f43f af54 	beq.w	80094de <_printf_float+0xb6>
 8009636:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800963a:	4543      	cmp	r3, r8
 800963c:	db02      	blt.n	8009644 <_printf_float+0x21c>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	07d8      	lsls	r0, r3, #31
 8009642:	d50f      	bpl.n	8009664 <_printf_float+0x23c>
 8009644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009648:	4631      	mov	r1, r6
 800964a:	4628      	mov	r0, r5
 800964c:	47b8      	blx	r7
 800964e:	3001      	adds	r0, #1
 8009650:	f43f af45 	beq.w	80094de <_printf_float+0xb6>
 8009654:	f04f 0900 	mov.w	r9, #0
 8009658:	f108 38ff 	add.w	r8, r8, #4294967295
 800965c:	f104 0a1a 	add.w	sl, r4, #26
 8009660:	45c8      	cmp	r8, r9
 8009662:	dc09      	bgt.n	8009678 <_printf_float+0x250>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	079b      	lsls	r3, r3, #30
 8009668:	f100 8103 	bmi.w	8009872 <_printf_float+0x44a>
 800966c:	68e0      	ldr	r0, [r4, #12]
 800966e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009670:	4298      	cmp	r0, r3
 8009672:	bfb8      	it	lt
 8009674:	4618      	movlt	r0, r3
 8009676:	e734      	b.n	80094e2 <_printf_float+0xba>
 8009678:	2301      	movs	r3, #1
 800967a:	4652      	mov	r2, sl
 800967c:	4631      	mov	r1, r6
 800967e:	4628      	mov	r0, r5
 8009680:	47b8      	blx	r7
 8009682:	3001      	adds	r0, #1
 8009684:	f43f af2b 	beq.w	80094de <_printf_float+0xb6>
 8009688:	f109 0901 	add.w	r9, r9, #1
 800968c:	e7e8      	b.n	8009660 <_printf_float+0x238>
 800968e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009690:	2b00      	cmp	r3, #0
 8009692:	dc39      	bgt.n	8009708 <_printf_float+0x2e0>
 8009694:	4a1b      	ldr	r2, [pc, #108]	@ (8009704 <_printf_float+0x2dc>)
 8009696:	2301      	movs	r3, #1
 8009698:	4631      	mov	r1, r6
 800969a:	4628      	mov	r0, r5
 800969c:	47b8      	blx	r7
 800969e:	3001      	adds	r0, #1
 80096a0:	f43f af1d 	beq.w	80094de <_printf_float+0xb6>
 80096a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80096a8:	ea59 0303 	orrs.w	r3, r9, r3
 80096ac:	d102      	bne.n	80096b4 <_printf_float+0x28c>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	07d9      	lsls	r1, r3, #31
 80096b2:	d5d7      	bpl.n	8009664 <_printf_float+0x23c>
 80096b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096b8:	4631      	mov	r1, r6
 80096ba:	4628      	mov	r0, r5
 80096bc:	47b8      	blx	r7
 80096be:	3001      	adds	r0, #1
 80096c0:	f43f af0d 	beq.w	80094de <_printf_float+0xb6>
 80096c4:	f04f 0a00 	mov.w	sl, #0
 80096c8:	f104 0b1a 	add.w	fp, r4, #26
 80096cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ce:	425b      	negs	r3, r3
 80096d0:	4553      	cmp	r3, sl
 80096d2:	dc01      	bgt.n	80096d8 <_printf_float+0x2b0>
 80096d4:	464b      	mov	r3, r9
 80096d6:	e793      	b.n	8009600 <_printf_float+0x1d8>
 80096d8:	2301      	movs	r3, #1
 80096da:	465a      	mov	r2, fp
 80096dc:	4631      	mov	r1, r6
 80096de:	4628      	mov	r0, r5
 80096e0:	47b8      	blx	r7
 80096e2:	3001      	adds	r0, #1
 80096e4:	f43f aefb 	beq.w	80094de <_printf_float+0xb6>
 80096e8:	f10a 0a01 	add.w	sl, sl, #1
 80096ec:	e7ee      	b.n	80096cc <_printf_float+0x2a4>
 80096ee:	bf00      	nop
 80096f0:	7fefffff 	.word	0x7fefffff
 80096f4:	0800deb4 	.word	0x0800deb4
 80096f8:	0800deb0 	.word	0x0800deb0
 80096fc:	0800debc 	.word	0x0800debc
 8009700:	0800deb8 	.word	0x0800deb8
 8009704:	0800dec0 	.word	0x0800dec0
 8009708:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800970a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800970e:	4553      	cmp	r3, sl
 8009710:	bfa8      	it	ge
 8009712:	4653      	movge	r3, sl
 8009714:	2b00      	cmp	r3, #0
 8009716:	4699      	mov	r9, r3
 8009718:	dc36      	bgt.n	8009788 <_printf_float+0x360>
 800971a:	f04f 0b00 	mov.w	fp, #0
 800971e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009722:	f104 021a 	add.w	r2, r4, #26
 8009726:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009728:	9306      	str	r3, [sp, #24]
 800972a:	eba3 0309 	sub.w	r3, r3, r9
 800972e:	455b      	cmp	r3, fp
 8009730:	dc31      	bgt.n	8009796 <_printf_float+0x36e>
 8009732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009734:	459a      	cmp	sl, r3
 8009736:	dc3a      	bgt.n	80097ae <_printf_float+0x386>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	07da      	lsls	r2, r3, #31
 800973c:	d437      	bmi.n	80097ae <_printf_float+0x386>
 800973e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009740:	ebaa 0903 	sub.w	r9, sl, r3
 8009744:	9b06      	ldr	r3, [sp, #24]
 8009746:	ebaa 0303 	sub.w	r3, sl, r3
 800974a:	4599      	cmp	r9, r3
 800974c:	bfa8      	it	ge
 800974e:	4699      	movge	r9, r3
 8009750:	f1b9 0f00 	cmp.w	r9, #0
 8009754:	dc33      	bgt.n	80097be <_printf_float+0x396>
 8009756:	f04f 0800 	mov.w	r8, #0
 800975a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800975e:	f104 0b1a 	add.w	fp, r4, #26
 8009762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009764:	ebaa 0303 	sub.w	r3, sl, r3
 8009768:	eba3 0309 	sub.w	r3, r3, r9
 800976c:	4543      	cmp	r3, r8
 800976e:	f77f af79 	ble.w	8009664 <_printf_float+0x23c>
 8009772:	2301      	movs	r3, #1
 8009774:	465a      	mov	r2, fp
 8009776:	4631      	mov	r1, r6
 8009778:	4628      	mov	r0, r5
 800977a:	47b8      	blx	r7
 800977c:	3001      	adds	r0, #1
 800977e:	f43f aeae 	beq.w	80094de <_printf_float+0xb6>
 8009782:	f108 0801 	add.w	r8, r8, #1
 8009786:	e7ec      	b.n	8009762 <_printf_float+0x33a>
 8009788:	4642      	mov	r2, r8
 800978a:	4631      	mov	r1, r6
 800978c:	4628      	mov	r0, r5
 800978e:	47b8      	blx	r7
 8009790:	3001      	adds	r0, #1
 8009792:	d1c2      	bne.n	800971a <_printf_float+0x2f2>
 8009794:	e6a3      	b.n	80094de <_printf_float+0xb6>
 8009796:	2301      	movs	r3, #1
 8009798:	4631      	mov	r1, r6
 800979a:	4628      	mov	r0, r5
 800979c:	9206      	str	r2, [sp, #24]
 800979e:	47b8      	blx	r7
 80097a0:	3001      	adds	r0, #1
 80097a2:	f43f ae9c 	beq.w	80094de <_printf_float+0xb6>
 80097a6:	9a06      	ldr	r2, [sp, #24]
 80097a8:	f10b 0b01 	add.w	fp, fp, #1
 80097ac:	e7bb      	b.n	8009726 <_printf_float+0x2fe>
 80097ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	d1c0      	bne.n	800973e <_printf_float+0x316>
 80097bc:	e68f      	b.n	80094de <_printf_float+0xb6>
 80097be:	9a06      	ldr	r2, [sp, #24]
 80097c0:	464b      	mov	r3, r9
 80097c2:	4442      	add	r2, r8
 80097c4:	4631      	mov	r1, r6
 80097c6:	4628      	mov	r0, r5
 80097c8:	47b8      	blx	r7
 80097ca:	3001      	adds	r0, #1
 80097cc:	d1c3      	bne.n	8009756 <_printf_float+0x32e>
 80097ce:	e686      	b.n	80094de <_printf_float+0xb6>
 80097d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097d4:	f1ba 0f01 	cmp.w	sl, #1
 80097d8:	dc01      	bgt.n	80097de <_printf_float+0x3b6>
 80097da:	07db      	lsls	r3, r3, #31
 80097dc:	d536      	bpl.n	800984c <_printf_float+0x424>
 80097de:	2301      	movs	r3, #1
 80097e0:	4642      	mov	r2, r8
 80097e2:	4631      	mov	r1, r6
 80097e4:	4628      	mov	r0, r5
 80097e6:	47b8      	blx	r7
 80097e8:	3001      	adds	r0, #1
 80097ea:	f43f ae78 	beq.w	80094de <_printf_float+0xb6>
 80097ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f2:	4631      	mov	r1, r6
 80097f4:	4628      	mov	r0, r5
 80097f6:	47b8      	blx	r7
 80097f8:	3001      	adds	r0, #1
 80097fa:	f43f ae70 	beq.w	80094de <_printf_float+0xb6>
 80097fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009802:	2200      	movs	r2, #0
 8009804:	2300      	movs	r3, #0
 8009806:	f10a 3aff 	add.w	sl, sl, #4294967295
 800980a:	f7f7 f965 	bl	8000ad8 <__aeabi_dcmpeq>
 800980e:	b9c0      	cbnz	r0, 8009842 <_printf_float+0x41a>
 8009810:	4653      	mov	r3, sl
 8009812:	f108 0201 	add.w	r2, r8, #1
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	47b8      	blx	r7
 800981c:	3001      	adds	r0, #1
 800981e:	d10c      	bne.n	800983a <_printf_float+0x412>
 8009820:	e65d      	b.n	80094de <_printf_float+0xb6>
 8009822:	2301      	movs	r3, #1
 8009824:	465a      	mov	r2, fp
 8009826:	4631      	mov	r1, r6
 8009828:	4628      	mov	r0, r5
 800982a:	47b8      	blx	r7
 800982c:	3001      	adds	r0, #1
 800982e:	f43f ae56 	beq.w	80094de <_printf_float+0xb6>
 8009832:	f108 0801 	add.w	r8, r8, #1
 8009836:	45d0      	cmp	r8, sl
 8009838:	dbf3      	blt.n	8009822 <_printf_float+0x3fa>
 800983a:	464b      	mov	r3, r9
 800983c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009840:	e6df      	b.n	8009602 <_printf_float+0x1da>
 8009842:	f04f 0800 	mov.w	r8, #0
 8009846:	f104 0b1a 	add.w	fp, r4, #26
 800984a:	e7f4      	b.n	8009836 <_printf_float+0x40e>
 800984c:	2301      	movs	r3, #1
 800984e:	4642      	mov	r2, r8
 8009850:	e7e1      	b.n	8009816 <_printf_float+0x3ee>
 8009852:	2301      	movs	r3, #1
 8009854:	464a      	mov	r2, r9
 8009856:	4631      	mov	r1, r6
 8009858:	4628      	mov	r0, r5
 800985a:	47b8      	blx	r7
 800985c:	3001      	adds	r0, #1
 800985e:	f43f ae3e 	beq.w	80094de <_printf_float+0xb6>
 8009862:	f108 0801 	add.w	r8, r8, #1
 8009866:	68e3      	ldr	r3, [r4, #12]
 8009868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800986a:	1a5b      	subs	r3, r3, r1
 800986c:	4543      	cmp	r3, r8
 800986e:	dcf0      	bgt.n	8009852 <_printf_float+0x42a>
 8009870:	e6fc      	b.n	800966c <_printf_float+0x244>
 8009872:	f04f 0800 	mov.w	r8, #0
 8009876:	f104 0919 	add.w	r9, r4, #25
 800987a:	e7f4      	b.n	8009866 <_printf_float+0x43e>

0800987c <_printf_common>:
 800987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009880:	4616      	mov	r6, r2
 8009882:	4698      	mov	r8, r3
 8009884:	688a      	ldr	r2, [r1, #8]
 8009886:	690b      	ldr	r3, [r1, #16]
 8009888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800988c:	4293      	cmp	r3, r2
 800988e:	bfb8      	it	lt
 8009890:	4613      	movlt	r3, r2
 8009892:	6033      	str	r3, [r6, #0]
 8009894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009898:	4607      	mov	r7, r0
 800989a:	460c      	mov	r4, r1
 800989c:	b10a      	cbz	r2, 80098a2 <_printf_common+0x26>
 800989e:	3301      	adds	r3, #1
 80098a0:	6033      	str	r3, [r6, #0]
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	0699      	lsls	r1, r3, #26
 80098a6:	bf42      	ittt	mi
 80098a8:	6833      	ldrmi	r3, [r6, #0]
 80098aa:	3302      	addmi	r3, #2
 80098ac:	6033      	strmi	r3, [r6, #0]
 80098ae:	6825      	ldr	r5, [r4, #0]
 80098b0:	f015 0506 	ands.w	r5, r5, #6
 80098b4:	d106      	bne.n	80098c4 <_printf_common+0x48>
 80098b6:	f104 0a19 	add.w	sl, r4, #25
 80098ba:	68e3      	ldr	r3, [r4, #12]
 80098bc:	6832      	ldr	r2, [r6, #0]
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	dc26      	bgt.n	8009912 <_printf_common+0x96>
 80098c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098c8:	6822      	ldr	r2, [r4, #0]
 80098ca:	3b00      	subs	r3, #0
 80098cc:	bf18      	it	ne
 80098ce:	2301      	movne	r3, #1
 80098d0:	0692      	lsls	r2, r2, #26
 80098d2:	d42b      	bmi.n	800992c <_printf_common+0xb0>
 80098d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098d8:	4641      	mov	r1, r8
 80098da:	4638      	mov	r0, r7
 80098dc:	47c8      	blx	r9
 80098de:	3001      	adds	r0, #1
 80098e0:	d01e      	beq.n	8009920 <_printf_common+0xa4>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	6922      	ldr	r2, [r4, #16]
 80098e6:	f003 0306 	and.w	r3, r3, #6
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	bf02      	ittt	eq
 80098ee:	68e5      	ldreq	r5, [r4, #12]
 80098f0:	6833      	ldreq	r3, [r6, #0]
 80098f2:	1aed      	subeq	r5, r5, r3
 80098f4:	68a3      	ldr	r3, [r4, #8]
 80098f6:	bf0c      	ite	eq
 80098f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098fc:	2500      	movne	r5, #0
 80098fe:	4293      	cmp	r3, r2
 8009900:	bfc4      	itt	gt
 8009902:	1a9b      	subgt	r3, r3, r2
 8009904:	18ed      	addgt	r5, r5, r3
 8009906:	2600      	movs	r6, #0
 8009908:	341a      	adds	r4, #26
 800990a:	42b5      	cmp	r5, r6
 800990c:	d11a      	bne.n	8009944 <_printf_common+0xc8>
 800990e:	2000      	movs	r0, #0
 8009910:	e008      	b.n	8009924 <_printf_common+0xa8>
 8009912:	2301      	movs	r3, #1
 8009914:	4652      	mov	r2, sl
 8009916:	4641      	mov	r1, r8
 8009918:	4638      	mov	r0, r7
 800991a:	47c8      	blx	r9
 800991c:	3001      	adds	r0, #1
 800991e:	d103      	bne.n	8009928 <_printf_common+0xac>
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009928:	3501      	adds	r5, #1
 800992a:	e7c6      	b.n	80098ba <_printf_common+0x3e>
 800992c:	18e1      	adds	r1, r4, r3
 800992e:	1c5a      	adds	r2, r3, #1
 8009930:	2030      	movs	r0, #48	@ 0x30
 8009932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009936:	4422      	add	r2, r4
 8009938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800993c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009940:	3302      	adds	r3, #2
 8009942:	e7c7      	b.n	80098d4 <_printf_common+0x58>
 8009944:	2301      	movs	r3, #1
 8009946:	4622      	mov	r2, r4
 8009948:	4641      	mov	r1, r8
 800994a:	4638      	mov	r0, r7
 800994c:	47c8      	blx	r9
 800994e:	3001      	adds	r0, #1
 8009950:	d0e6      	beq.n	8009920 <_printf_common+0xa4>
 8009952:	3601      	adds	r6, #1
 8009954:	e7d9      	b.n	800990a <_printf_common+0x8e>
	...

08009958 <_printf_i>:
 8009958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800995c:	7e0f      	ldrb	r7, [r1, #24]
 800995e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009960:	2f78      	cmp	r7, #120	@ 0x78
 8009962:	4691      	mov	r9, r2
 8009964:	4680      	mov	r8, r0
 8009966:	460c      	mov	r4, r1
 8009968:	469a      	mov	sl, r3
 800996a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800996e:	d807      	bhi.n	8009980 <_printf_i+0x28>
 8009970:	2f62      	cmp	r7, #98	@ 0x62
 8009972:	d80a      	bhi.n	800998a <_printf_i+0x32>
 8009974:	2f00      	cmp	r7, #0
 8009976:	f000 80d1 	beq.w	8009b1c <_printf_i+0x1c4>
 800997a:	2f58      	cmp	r7, #88	@ 0x58
 800997c:	f000 80b8 	beq.w	8009af0 <_printf_i+0x198>
 8009980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009988:	e03a      	b.n	8009a00 <_printf_i+0xa8>
 800998a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800998e:	2b15      	cmp	r3, #21
 8009990:	d8f6      	bhi.n	8009980 <_printf_i+0x28>
 8009992:	a101      	add	r1, pc, #4	@ (adr r1, 8009998 <_printf_i+0x40>)
 8009994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009998:	080099f1 	.word	0x080099f1
 800999c:	08009a05 	.word	0x08009a05
 80099a0:	08009981 	.word	0x08009981
 80099a4:	08009981 	.word	0x08009981
 80099a8:	08009981 	.word	0x08009981
 80099ac:	08009981 	.word	0x08009981
 80099b0:	08009a05 	.word	0x08009a05
 80099b4:	08009981 	.word	0x08009981
 80099b8:	08009981 	.word	0x08009981
 80099bc:	08009981 	.word	0x08009981
 80099c0:	08009981 	.word	0x08009981
 80099c4:	08009b03 	.word	0x08009b03
 80099c8:	08009a2f 	.word	0x08009a2f
 80099cc:	08009abd 	.word	0x08009abd
 80099d0:	08009981 	.word	0x08009981
 80099d4:	08009981 	.word	0x08009981
 80099d8:	08009b25 	.word	0x08009b25
 80099dc:	08009981 	.word	0x08009981
 80099e0:	08009a2f 	.word	0x08009a2f
 80099e4:	08009981 	.word	0x08009981
 80099e8:	08009981 	.word	0x08009981
 80099ec:	08009ac5 	.word	0x08009ac5
 80099f0:	6833      	ldr	r3, [r6, #0]
 80099f2:	1d1a      	adds	r2, r3, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6032      	str	r2, [r6, #0]
 80099f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a00:	2301      	movs	r3, #1
 8009a02:	e09c      	b.n	8009b3e <_printf_i+0x1e6>
 8009a04:	6833      	ldr	r3, [r6, #0]
 8009a06:	6820      	ldr	r0, [r4, #0]
 8009a08:	1d19      	adds	r1, r3, #4
 8009a0a:	6031      	str	r1, [r6, #0]
 8009a0c:	0606      	lsls	r6, r0, #24
 8009a0e:	d501      	bpl.n	8009a14 <_printf_i+0xbc>
 8009a10:	681d      	ldr	r5, [r3, #0]
 8009a12:	e003      	b.n	8009a1c <_printf_i+0xc4>
 8009a14:	0645      	lsls	r5, r0, #25
 8009a16:	d5fb      	bpl.n	8009a10 <_printf_i+0xb8>
 8009a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a1c:	2d00      	cmp	r5, #0
 8009a1e:	da03      	bge.n	8009a28 <_printf_i+0xd0>
 8009a20:	232d      	movs	r3, #45	@ 0x2d
 8009a22:	426d      	negs	r5, r5
 8009a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a28:	4858      	ldr	r0, [pc, #352]	@ (8009b8c <_printf_i+0x234>)
 8009a2a:	230a      	movs	r3, #10
 8009a2c:	e011      	b.n	8009a52 <_printf_i+0xfa>
 8009a2e:	6821      	ldr	r1, [r4, #0]
 8009a30:	6833      	ldr	r3, [r6, #0]
 8009a32:	0608      	lsls	r0, r1, #24
 8009a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a38:	d402      	bmi.n	8009a40 <_printf_i+0xe8>
 8009a3a:	0649      	lsls	r1, r1, #25
 8009a3c:	bf48      	it	mi
 8009a3e:	b2ad      	uxthmi	r5, r5
 8009a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a42:	4852      	ldr	r0, [pc, #328]	@ (8009b8c <_printf_i+0x234>)
 8009a44:	6033      	str	r3, [r6, #0]
 8009a46:	bf14      	ite	ne
 8009a48:	230a      	movne	r3, #10
 8009a4a:	2308      	moveq	r3, #8
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a52:	6866      	ldr	r6, [r4, #4]
 8009a54:	60a6      	str	r6, [r4, #8]
 8009a56:	2e00      	cmp	r6, #0
 8009a58:	db05      	blt.n	8009a66 <_printf_i+0x10e>
 8009a5a:	6821      	ldr	r1, [r4, #0]
 8009a5c:	432e      	orrs	r6, r5
 8009a5e:	f021 0104 	bic.w	r1, r1, #4
 8009a62:	6021      	str	r1, [r4, #0]
 8009a64:	d04b      	beq.n	8009afe <_printf_i+0x1a6>
 8009a66:	4616      	mov	r6, r2
 8009a68:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a6c:	fb03 5711 	mls	r7, r3, r1, r5
 8009a70:	5dc7      	ldrb	r7, [r0, r7]
 8009a72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a76:	462f      	mov	r7, r5
 8009a78:	42bb      	cmp	r3, r7
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	d9f4      	bls.n	8009a68 <_printf_i+0x110>
 8009a7e:	2b08      	cmp	r3, #8
 8009a80:	d10b      	bne.n	8009a9a <_printf_i+0x142>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	07df      	lsls	r7, r3, #31
 8009a86:	d508      	bpl.n	8009a9a <_printf_i+0x142>
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6861      	ldr	r1, [r4, #4]
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	bfde      	ittt	le
 8009a90:	2330      	movle	r3, #48	@ 0x30
 8009a92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a9a:	1b92      	subs	r2, r2, r6
 8009a9c:	6122      	str	r2, [r4, #16]
 8009a9e:	f8cd a000 	str.w	sl, [sp]
 8009aa2:	464b      	mov	r3, r9
 8009aa4:	aa03      	add	r2, sp, #12
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	f7ff fee7 	bl	800987c <_printf_common>
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d14a      	bne.n	8009b48 <_printf_i+0x1f0>
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	b004      	add	sp, #16
 8009ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	f043 0320 	orr.w	r3, r3, #32
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	4832      	ldr	r0, [pc, #200]	@ (8009b90 <_printf_i+0x238>)
 8009ac6:	2778      	movs	r7, #120	@ 0x78
 8009ac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	6831      	ldr	r1, [r6, #0]
 8009ad0:	061f      	lsls	r7, r3, #24
 8009ad2:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ad6:	d402      	bmi.n	8009ade <_printf_i+0x186>
 8009ad8:	065f      	lsls	r7, r3, #25
 8009ada:	bf48      	it	mi
 8009adc:	b2ad      	uxthmi	r5, r5
 8009ade:	6031      	str	r1, [r6, #0]
 8009ae0:	07d9      	lsls	r1, r3, #31
 8009ae2:	bf44      	itt	mi
 8009ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8009ae8:	6023      	strmi	r3, [r4, #0]
 8009aea:	b11d      	cbz	r5, 8009af4 <_printf_i+0x19c>
 8009aec:	2310      	movs	r3, #16
 8009aee:	e7ad      	b.n	8009a4c <_printf_i+0xf4>
 8009af0:	4826      	ldr	r0, [pc, #152]	@ (8009b8c <_printf_i+0x234>)
 8009af2:	e7e9      	b.n	8009ac8 <_printf_i+0x170>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	f023 0320 	bic.w	r3, r3, #32
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	e7f6      	b.n	8009aec <_printf_i+0x194>
 8009afe:	4616      	mov	r6, r2
 8009b00:	e7bd      	b.n	8009a7e <_printf_i+0x126>
 8009b02:	6833      	ldr	r3, [r6, #0]
 8009b04:	6825      	ldr	r5, [r4, #0]
 8009b06:	6961      	ldr	r1, [r4, #20]
 8009b08:	1d18      	adds	r0, r3, #4
 8009b0a:	6030      	str	r0, [r6, #0]
 8009b0c:	062e      	lsls	r6, r5, #24
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	d501      	bpl.n	8009b16 <_printf_i+0x1be>
 8009b12:	6019      	str	r1, [r3, #0]
 8009b14:	e002      	b.n	8009b1c <_printf_i+0x1c4>
 8009b16:	0668      	lsls	r0, r5, #25
 8009b18:	d5fb      	bpl.n	8009b12 <_printf_i+0x1ba>
 8009b1a:	8019      	strh	r1, [r3, #0]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	4616      	mov	r6, r2
 8009b22:	e7bc      	b.n	8009a9e <_printf_i+0x146>
 8009b24:	6833      	ldr	r3, [r6, #0]
 8009b26:	1d1a      	adds	r2, r3, #4
 8009b28:	6032      	str	r2, [r6, #0]
 8009b2a:	681e      	ldr	r6, [r3, #0]
 8009b2c:	6862      	ldr	r2, [r4, #4]
 8009b2e:	2100      	movs	r1, #0
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7f6 fb55 	bl	80001e0 <memchr>
 8009b36:	b108      	cbz	r0, 8009b3c <_printf_i+0x1e4>
 8009b38:	1b80      	subs	r0, r0, r6
 8009b3a:	6060      	str	r0, [r4, #4]
 8009b3c:	6863      	ldr	r3, [r4, #4]
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	2300      	movs	r3, #0
 8009b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b46:	e7aa      	b.n	8009a9e <_printf_i+0x146>
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	4632      	mov	r2, r6
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	4640      	mov	r0, r8
 8009b50:	47d0      	blx	sl
 8009b52:	3001      	adds	r0, #1
 8009b54:	d0ad      	beq.n	8009ab2 <_printf_i+0x15a>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	079b      	lsls	r3, r3, #30
 8009b5a:	d413      	bmi.n	8009b84 <_printf_i+0x22c>
 8009b5c:	68e0      	ldr	r0, [r4, #12]
 8009b5e:	9b03      	ldr	r3, [sp, #12]
 8009b60:	4298      	cmp	r0, r3
 8009b62:	bfb8      	it	lt
 8009b64:	4618      	movlt	r0, r3
 8009b66:	e7a6      	b.n	8009ab6 <_printf_i+0x15e>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4640      	mov	r0, r8
 8009b70:	47d0      	blx	sl
 8009b72:	3001      	adds	r0, #1
 8009b74:	d09d      	beq.n	8009ab2 <_printf_i+0x15a>
 8009b76:	3501      	adds	r5, #1
 8009b78:	68e3      	ldr	r3, [r4, #12]
 8009b7a:	9903      	ldr	r1, [sp, #12]
 8009b7c:	1a5b      	subs	r3, r3, r1
 8009b7e:	42ab      	cmp	r3, r5
 8009b80:	dcf2      	bgt.n	8009b68 <_printf_i+0x210>
 8009b82:	e7eb      	b.n	8009b5c <_printf_i+0x204>
 8009b84:	2500      	movs	r5, #0
 8009b86:	f104 0619 	add.w	r6, r4, #25
 8009b8a:	e7f5      	b.n	8009b78 <_printf_i+0x220>
 8009b8c:	0800dec2 	.word	0x0800dec2
 8009b90:	0800ded3 	.word	0x0800ded3

08009b94 <std>:
 8009b94:	2300      	movs	r3, #0
 8009b96:	b510      	push	{r4, lr}
 8009b98:	4604      	mov	r4, r0
 8009b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ba2:	6083      	str	r3, [r0, #8]
 8009ba4:	8181      	strh	r1, [r0, #12]
 8009ba6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ba8:	81c2      	strh	r2, [r0, #14]
 8009baa:	6183      	str	r3, [r0, #24]
 8009bac:	4619      	mov	r1, r3
 8009bae:	2208      	movs	r2, #8
 8009bb0:	305c      	adds	r0, #92	@ 0x5c
 8009bb2:	f000 f931 	bl	8009e18 <memset>
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bec <std+0x58>)
 8009bb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bba:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf0 <std+0x5c>)
 8009bbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf4 <std+0x60>)
 8009bc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf8 <std+0x64>)
 8009bc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bfc <std+0x68>)
 8009bc8:	6224      	str	r4, [r4, #32]
 8009bca:	429c      	cmp	r4, r3
 8009bcc:	d006      	beq.n	8009bdc <std+0x48>
 8009bce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009bd2:	4294      	cmp	r4, r2
 8009bd4:	d002      	beq.n	8009bdc <std+0x48>
 8009bd6:	33d0      	adds	r3, #208	@ 0xd0
 8009bd8:	429c      	cmp	r4, r3
 8009bda:	d105      	bne.n	8009be8 <std+0x54>
 8009bdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be4:	f000 b994 	b.w	8009f10 <__retarget_lock_init_recursive>
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	bf00      	nop
 8009bec:	08009d19 	.word	0x08009d19
 8009bf0:	08009d3b 	.word	0x08009d3b
 8009bf4:	08009d73 	.word	0x08009d73
 8009bf8:	08009d97 	.word	0x08009d97
 8009bfc:	2000148c 	.word	0x2000148c

08009c00 <stdio_exit_handler>:
 8009c00:	4a02      	ldr	r2, [pc, #8]	@ (8009c0c <stdio_exit_handler+0xc>)
 8009c02:	4903      	ldr	r1, [pc, #12]	@ (8009c10 <stdio_exit_handler+0x10>)
 8009c04:	4803      	ldr	r0, [pc, #12]	@ (8009c14 <stdio_exit_handler+0x14>)
 8009c06:	f000 b869 	b.w	8009cdc <_fwalk_sglue>
 8009c0a:	bf00      	nop
 8009c0c:	20000014 	.word	0x20000014
 8009c10:	0800b875 	.word	0x0800b875
 8009c14:	20000024 	.word	0x20000024

08009c18 <cleanup_stdio>:
 8009c18:	6841      	ldr	r1, [r0, #4]
 8009c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c4c <cleanup_stdio+0x34>)
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	b510      	push	{r4, lr}
 8009c20:	4604      	mov	r4, r0
 8009c22:	d001      	beq.n	8009c28 <cleanup_stdio+0x10>
 8009c24:	f001 fe26 	bl	800b874 <_fflush_r>
 8009c28:	68a1      	ldr	r1, [r4, #8]
 8009c2a:	4b09      	ldr	r3, [pc, #36]	@ (8009c50 <cleanup_stdio+0x38>)
 8009c2c:	4299      	cmp	r1, r3
 8009c2e:	d002      	beq.n	8009c36 <cleanup_stdio+0x1e>
 8009c30:	4620      	mov	r0, r4
 8009c32:	f001 fe1f 	bl	800b874 <_fflush_r>
 8009c36:	68e1      	ldr	r1, [r4, #12]
 8009c38:	4b06      	ldr	r3, [pc, #24]	@ (8009c54 <cleanup_stdio+0x3c>)
 8009c3a:	4299      	cmp	r1, r3
 8009c3c:	d004      	beq.n	8009c48 <cleanup_stdio+0x30>
 8009c3e:	4620      	mov	r0, r4
 8009c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c44:	f001 be16 	b.w	800b874 <_fflush_r>
 8009c48:	bd10      	pop	{r4, pc}
 8009c4a:	bf00      	nop
 8009c4c:	2000148c 	.word	0x2000148c
 8009c50:	200014f4 	.word	0x200014f4
 8009c54:	2000155c 	.word	0x2000155c

08009c58 <global_stdio_init.part.0>:
 8009c58:	b510      	push	{r4, lr}
 8009c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c88 <global_stdio_init.part.0+0x30>)
 8009c5c:	4c0b      	ldr	r4, [pc, #44]	@ (8009c8c <global_stdio_init.part.0+0x34>)
 8009c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8009c90 <global_stdio_init.part.0+0x38>)
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	4620      	mov	r0, r4
 8009c64:	2200      	movs	r2, #0
 8009c66:	2104      	movs	r1, #4
 8009c68:	f7ff ff94 	bl	8009b94 <std>
 8009c6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c70:	2201      	movs	r2, #1
 8009c72:	2109      	movs	r1, #9
 8009c74:	f7ff ff8e 	bl	8009b94 <std>
 8009c78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c82:	2112      	movs	r1, #18
 8009c84:	f7ff bf86 	b.w	8009b94 <std>
 8009c88:	200015c4 	.word	0x200015c4
 8009c8c:	2000148c 	.word	0x2000148c
 8009c90:	08009c01 	.word	0x08009c01

08009c94 <__sfp_lock_acquire>:
 8009c94:	4801      	ldr	r0, [pc, #4]	@ (8009c9c <__sfp_lock_acquire+0x8>)
 8009c96:	f000 b93c 	b.w	8009f12 <__retarget_lock_acquire_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	200015cd 	.word	0x200015cd

08009ca0 <__sfp_lock_release>:
 8009ca0:	4801      	ldr	r0, [pc, #4]	@ (8009ca8 <__sfp_lock_release+0x8>)
 8009ca2:	f000 b937 	b.w	8009f14 <__retarget_lock_release_recursive>
 8009ca6:	bf00      	nop
 8009ca8:	200015cd 	.word	0x200015cd

08009cac <__sinit>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	4604      	mov	r4, r0
 8009cb0:	f7ff fff0 	bl	8009c94 <__sfp_lock_acquire>
 8009cb4:	6a23      	ldr	r3, [r4, #32]
 8009cb6:	b11b      	cbz	r3, 8009cc0 <__sinit+0x14>
 8009cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cbc:	f7ff bff0 	b.w	8009ca0 <__sfp_lock_release>
 8009cc0:	4b04      	ldr	r3, [pc, #16]	@ (8009cd4 <__sinit+0x28>)
 8009cc2:	6223      	str	r3, [r4, #32]
 8009cc4:	4b04      	ldr	r3, [pc, #16]	@ (8009cd8 <__sinit+0x2c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f5      	bne.n	8009cb8 <__sinit+0xc>
 8009ccc:	f7ff ffc4 	bl	8009c58 <global_stdio_init.part.0>
 8009cd0:	e7f2      	b.n	8009cb8 <__sinit+0xc>
 8009cd2:	bf00      	nop
 8009cd4:	08009c19 	.word	0x08009c19
 8009cd8:	200015c4 	.word	0x200015c4

08009cdc <_fwalk_sglue>:
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	4688      	mov	r8, r1
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	2600      	movs	r6, #0
 8009ce8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cec:	f1b9 0901 	subs.w	r9, r9, #1
 8009cf0:	d505      	bpl.n	8009cfe <_fwalk_sglue+0x22>
 8009cf2:	6824      	ldr	r4, [r4, #0]
 8009cf4:	2c00      	cmp	r4, #0
 8009cf6:	d1f7      	bne.n	8009ce8 <_fwalk_sglue+0xc>
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d907      	bls.n	8009d14 <_fwalk_sglue+0x38>
 8009d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	d003      	beq.n	8009d14 <_fwalk_sglue+0x38>
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	4638      	mov	r0, r7
 8009d10:	47c0      	blx	r8
 8009d12:	4306      	orrs	r6, r0
 8009d14:	3568      	adds	r5, #104	@ 0x68
 8009d16:	e7e9      	b.n	8009cec <_fwalk_sglue+0x10>

08009d18 <__sread>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d20:	f000 f8a8 	bl	8009e74 <_read_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	bfab      	itete	ge
 8009d28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d2c:	181b      	addge	r3, r3, r0
 8009d2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d32:	bfac      	ite	ge
 8009d34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d36:	81a3      	strhlt	r3, [r4, #12]
 8009d38:	bd10      	pop	{r4, pc}

08009d3a <__swrite>:
 8009d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3e:	461f      	mov	r7, r3
 8009d40:	898b      	ldrh	r3, [r1, #12]
 8009d42:	05db      	lsls	r3, r3, #23
 8009d44:	4605      	mov	r5, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	4616      	mov	r6, r2
 8009d4a:	d505      	bpl.n	8009d58 <__swrite+0x1e>
 8009d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d50:	2302      	movs	r3, #2
 8009d52:	2200      	movs	r2, #0
 8009d54:	f000 f87c 	bl	8009e50 <_lseek_r>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	4632      	mov	r2, r6
 8009d66:	463b      	mov	r3, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	f000 b893 	b.w	8009e98 <_write_r>

08009d72 <__sseek>:
 8009d72:	b510      	push	{r4, lr}
 8009d74:	460c      	mov	r4, r1
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 f869 	bl	8009e50 <_lseek_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	bf15      	itete	ne
 8009d84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d8e:	81a3      	strheq	r3, [r4, #12]
 8009d90:	bf18      	it	ne
 8009d92:	81a3      	strhne	r3, [r4, #12]
 8009d94:	bd10      	pop	{r4, pc}

08009d96 <__sclose>:
 8009d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9a:	f000 b849 	b.w	8009e30 <_close_r>

08009d9e <_vsniprintf_r>:
 8009d9e:	b530      	push	{r4, r5, lr}
 8009da0:	4614      	mov	r4, r2
 8009da2:	2c00      	cmp	r4, #0
 8009da4:	b09b      	sub	sp, #108	@ 0x6c
 8009da6:	4605      	mov	r5, r0
 8009da8:	461a      	mov	r2, r3
 8009daa:	da05      	bge.n	8009db8 <_vsniprintf_r+0x1a>
 8009dac:	238b      	movs	r3, #139	@ 0x8b
 8009dae:	6003      	str	r3, [r0, #0]
 8009db0:	f04f 30ff 	mov.w	r0, #4294967295
 8009db4:	b01b      	add	sp, #108	@ 0x6c
 8009db6:	bd30      	pop	{r4, r5, pc}
 8009db8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009dbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009dc0:	f04f 0300 	mov.w	r3, #0
 8009dc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009dc6:	bf14      	ite	ne
 8009dc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009dcc:	4623      	moveq	r3, r4
 8009dce:	9302      	str	r3, [sp, #8]
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009dd6:	9100      	str	r1, [sp, #0]
 8009dd8:	9104      	str	r1, [sp, #16]
 8009dda:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009dde:	4669      	mov	r1, sp
 8009de0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009de2:	f001 fbc7 	bl	800b574 <_svfiprintf_r>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	bfbc      	itt	lt
 8009dea:	238b      	movlt	r3, #139	@ 0x8b
 8009dec:	602b      	strlt	r3, [r5, #0]
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	d0e0      	beq.n	8009db4 <_vsniprintf_r+0x16>
 8009df2:	9b00      	ldr	r3, [sp, #0]
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	e7dc      	b.n	8009db4 <_vsniprintf_r+0x16>
	...

08009dfc <vsniprintf>:
 8009dfc:	b507      	push	{r0, r1, r2, lr}
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	4613      	mov	r3, r2
 8009e02:	460a      	mov	r2, r1
 8009e04:	4601      	mov	r1, r0
 8009e06:	4803      	ldr	r0, [pc, #12]	@ (8009e14 <vsniprintf+0x18>)
 8009e08:	6800      	ldr	r0, [r0, #0]
 8009e0a:	f7ff ffc8 	bl	8009d9e <_vsniprintf_r>
 8009e0e:	b003      	add	sp, #12
 8009e10:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e14:	20000020 	.word	0x20000020

08009e18 <memset>:
 8009e18:	4402      	add	r2, r0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d100      	bne.n	8009e22 <memset+0xa>
 8009e20:	4770      	bx	lr
 8009e22:	f803 1b01 	strb.w	r1, [r3], #1
 8009e26:	e7f9      	b.n	8009e1c <memset+0x4>

08009e28 <_localeconv_r>:
 8009e28:	4800      	ldr	r0, [pc, #0]	@ (8009e2c <_localeconv_r+0x4>)
 8009e2a:	4770      	bx	lr
 8009e2c:	20000160 	.word	0x20000160

08009e30 <_close_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	@ (8009e4c <_close_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7fa fe0a 	bl	8004a54 <_close>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_close_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_close_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	200015c8 	.word	0x200015c8

08009e50 <_lseek_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	@ (8009e70 <_lseek_r+0x20>)
 8009e54:	4604      	mov	r4, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	4611      	mov	r1, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f7fa fe1f 	bl	8004aa2 <_lseek>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_lseek_r+0x1e>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_lseek_r+0x1e>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	200015c8 	.word	0x200015c8

08009e74 <_read_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	4d07      	ldr	r5, [pc, #28]	@ (8009e94 <_read_r+0x20>)
 8009e78:	4604      	mov	r4, r0
 8009e7a:	4608      	mov	r0, r1
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	2200      	movs	r2, #0
 8009e80:	602a      	str	r2, [r5, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	f7fa fdad 	bl	80049e2 <_read>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d102      	bne.n	8009e92 <_read_r+0x1e>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	b103      	cbz	r3, 8009e92 <_read_r+0x1e>
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	200015c8 	.word	0x200015c8

08009e98 <_write_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d07      	ldr	r5, [pc, #28]	@ (8009eb8 <_write_r+0x20>)
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	4608      	mov	r0, r1
 8009ea0:	4611      	mov	r1, r2
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	602a      	str	r2, [r5, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f7fa fdb8 	bl	8004a1c <_write>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d102      	bne.n	8009eb6 <_write_r+0x1e>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	b103      	cbz	r3, 8009eb6 <_write_r+0x1e>
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}
 8009eb8:	200015c8 	.word	0x200015c8

08009ebc <__errno>:
 8009ebc:	4b01      	ldr	r3, [pc, #4]	@ (8009ec4 <__errno+0x8>)
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20000020 	.word	0x20000020

08009ec8 <__libc_init_array>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	4d0d      	ldr	r5, [pc, #52]	@ (8009f00 <__libc_init_array+0x38>)
 8009ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8009f04 <__libc_init_array+0x3c>)
 8009ece:	1b64      	subs	r4, r4, r5
 8009ed0:	10a4      	asrs	r4, r4, #2
 8009ed2:	2600      	movs	r6, #0
 8009ed4:	42a6      	cmp	r6, r4
 8009ed6:	d109      	bne.n	8009eec <__libc_init_array+0x24>
 8009ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8009f08 <__libc_init_array+0x40>)
 8009eda:	4c0c      	ldr	r4, [pc, #48]	@ (8009f0c <__libc_init_array+0x44>)
 8009edc:	f002 f868 	bl	800bfb0 <_init>
 8009ee0:	1b64      	subs	r4, r4, r5
 8009ee2:	10a4      	asrs	r4, r4, #2
 8009ee4:	2600      	movs	r6, #0
 8009ee6:	42a6      	cmp	r6, r4
 8009ee8:	d105      	bne.n	8009ef6 <__libc_init_array+0x2e>
 8009eea:	bd70      	pop	{r4, r5, r6, pc}
 8009eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef0:	4798      	blx	r3
 8009ef2:	3601      	adds	r6, #1
 8009ef4:	e7ee      	b.n	8009ed4 <__libc_init_array+0xc>
 8009ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009efa:	4798      	blx	r3
 8009efc:	3601      	adds	r6, #1
 8009efe:	e7f2      	b.n	8009ee6 <__libc_init_array+0x1e>
 8009f00:	0800e22c 	.word	0x0800e22c
 8009f04:	0800e22c 	.word	0x0800e22c
 8009f08:	0800e22c 	.word	0x0800e22c
 8009f0c:	0800e230 	.word	0x0800e230

08009f10 <__retarget_lock_init_recursive>:
 8009f10:	4770      	bx	lr

08009f12 <__retarget_lock_acquire_recursive>:
 8009f12:	4770      	bx	lr

08009f14 <__retarget_lock_release_recursive>:
 8009f14:	4770      	bx	lr

08009f16 <quorem>:
 8009f16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	6903      	ldr	r3, [r0, #16]
 8009f1c:	690c      	ldr	r4, [r1, #16]
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	4607      	mov	r7, r0
 8009f22:	db7e      	blt.n	800a022 <quorem+0x10c>
 8009f24:	3c01      	subs	r4, #1
 8009f26:	f101 0814 	add.w	r8, r1, #20
 8009f2a:	00a3      	lsls	r3, r4, #2
 8009f2c:	f100 0514 	add.w	r5, r0, #20
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f40:	3301      	adds	r3, #1
 8009f42:	429a      	cmp	r2, r3
 8009f44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f48:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f4c:	d32e      	bcc.n	8009fac <quorem+0x96>
 8009f4e:	f04f 0a00 	mov.w	sl, #0
 8009f52:	46c4      	mov	ip, r8
 8009f54:	46ae      	mov	lr, r5
 8009f56:	46d3      	mov	fp, sl
 8009f58:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f5c:	b298      	uxth	r0, r3
 8009f5e:	fb06 a000 	mla	r0, r6, r0, sl
 8009f62:	0c02      	lsrs	r2, r0, #16
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	fb06 2303 	mla	r3, r6, r3, r2
 8009f6a:	f8de 2000 	ldr.w	r2, [lr]
 8009f6e:	b280      	uxth	r0, r0
 8009f70:	b292      	uxth	r2, r2
 8009f72:	1a12      	subs	r2, r2, r0
 8009f74:	445a      	add	r2, fp
 8009f76:	f8de 0000 	ldr.w	r0, [lr]
 8009f7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f84:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f88:	b292      	uxth	r2, r2
 8009f8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f8e:	45e1      	cmp	r9, ip
 8009f90:	f84e 2b04 	str.w	r2, [lr], #4
 8009f94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f98:	d2de      	bcs.n	8009f58 <quorem+0x42>
 8009f9a:	9b00      	ldr	r3, [sp, #0]
 8009f9c:	58eb      	ldr	r3, [r5, r3]
 8009f9e:	b92b      	cbnz	r3, 8009fac <quorem+0x96>
 8009fa0:	9b01      	ldr	r3, [sp, #4]
 8009fa2:	3b04      	subs	r3, #4
 8009fa4:	429d      	cmp	r5, r3
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	d32f      	bcc.n	800a00a <quorem+0xf4>
 8009faa:	613c      	str	r4, [r7, #16]
 8009fac:	4638      	mov	r0, r7
 8009fae:	f001 f97d 	bl	800b2ac <__mcmp>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	db25      	blt.n	800a002 <quorem+0xec>
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	2000      	movs	r0, #0
 8009fba:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fbe:	f8d1 c000 	ldr.w	ip, [r1]
 8009fc2:	fa1f fe82 	uxth.w	lr, r2
 8009fc6:	fa1f f38c 	uxth.w	r3, ip
 8009fca:	eba3 030e 	sub.w	r3, r3, lr
 8009fce:	4403      	add	r3, r0
 8009fd0:	0c12      	lsrs	r2, r2, #16
 8009fd2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009fd6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fe0:	45c1      	cmp	r9, r8
 8009fe2:	f841 3b04 	str.w	r3, [r1], #4
 8009fe6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fea:	d2e6      	bcs.n	8009fba <quorem+0xa4>
 8009fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ff4:	b922      	cbnz	r2, 800a000 <quorem+0xea>
 8009ff6:	3b04      	subs	r3, #4
 8009ff8:	429d      	cmp	r5, r3
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	d30b      	bcc.n	800a016 <quorem+0x100>
 8009ffe:	613c      	str	r4, [r7, #16]
 800a000:	3601      	adds	r6, #1
 800a002:	4630      	mov	r0, r6
 800a004:	b003      	add	sp, #12
 800a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00a:	6812      	ldr	r2, [r2, #0]
 800a00c:	3b04      	subs	r3, #4
 800a00e:	2a00      	cmp	r2, #0
 800a010:	d1cb      	bne.n	8009faa <quorem+0x94>
 800a012:	3c01      	subs	r4, #1
 800a014:	e7c6      	b.n	8009fa4 <quorem+0x8e>
 800a016:	6812      	ldr	r2, [r2, #0]
 800a018:	3b04      	subs	r3, #4
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	d1ef      	bne.n	8009ffe <quorem+0xe8>
 800a01e:	3c01      	subs	r4, #1
 800a020:	e7ea      	b.n	8009ff8 <quorem+0xe2>
 800a022:	2000      	movs	r0, #0
 800a024:	e7ee      	b.n	800a004 <quorem+0xee>
	...

0800a028 <_dtoa_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	69c7      	ldr	r7, [r0, #28]
 800a02e:	b097      	sub	sp, #92	@ 0x5c
 800a030:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a034:	ec55 4b10 	vmov	r4, r5, d0
 800a038:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a03a:	9107      	str	r1, [sp, #28]
 800a03c:	4681      	mov	r9, r0
 800a03e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a040:	9311      	str	r3, [sp, #68]	@ 0x44
 800a042:	b97f      	cbnz	r7, 800a064 <_dtoa_r+0x3c>
 800a044:	2010      	movs	r0, #16
 800a046:	f000 fe09 	bl	800ac5c <malloc>
 800a04a:	4602      	mov	r2, r0
 800a04c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a050:	b920      	cbnz	r0, 800a05c <_dtoa_r+0x34>
 800a052:	4ba9      	ldr	r3, [pc, #676]	@ (800a2f8 <_dtoa_r+0x2d0>)
 800a054:	21ef      	movs	r1, #239	@ 0xef
 800a056:	48a9      	ldr	r0, [pc, #676]	@ (800a2fc <_dtoa_r+0x2d4>)
 800a058:	f001 fc6c 	bl	800b934 <__assert_func>
 800a05c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a060:	6007      	str	r7, [r0, #0]
 800a062:	60c7      	str	r7, [r0, #12]
 800a064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a068:	6819      	ldr	r1, [r3, #0]
 800a06a:	b159      	cbz	r1, 800a084 <_dtoa_r+0x5c>
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	604a      	str	r2, [r1, #4]
 800a070:	2301      	movs	r3, #1
 800a072:	4093      	lsls	r3, r2
 800a074:	608b      	str	r3, [r1, #8]
 800a076:	4648      	mov	r0, r9
 800a078:	f000 fee6 	bl	800ae48 <_Bfree>
 800a07c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	1e2b      	subs	r3, r5, #0
 800a086:	bfb9      	ittee	lt
 800a088:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a08c:	9305      	strlt	r3, [sp, #20]
 800a08e:	2300      	movge	r3, #0
 800a090:	6033      	strge	r3, [r6, #0]
 800a092:	9f05      	ldr	r7, [sp, #20]
 800a094:	4b9a      	ldr	r3, [pc, #616]	@ (800a300 <_dtoa_r+0x2d8>)
 800a096:	bfbc      	itt	lt
 800a098:	2201      	movlt	r2, #1
 800a09a:	6032      	strlt	r2, [r6, #0]
 800a09c:	43bb      	bics	r3, r7
 800a09e:	d112      	bne.n	800a0c6 <_dtoa_r+0x9e>
 800a0a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a0a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0ac:	4323      	orrs	r3, r4
 800a0ae:	f000 855a 	beq.w	800ab66 <_dtoa_r+0xb3e>
 800a0b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a314 <_dtoa_r+0x2ec>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 855c 	beq.w	800ab76 <_dtoa_r+0xb4e>
 800a0be:	f10a 0303 	add.w	r3, sl, #3
 800a0c2:	f000 bd56 	b.w	800ab72 <_dtoa_r+0xb4a>
 800a0c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	ec51 0b17 	vmov	r0, r1, d7
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a0d6:	f7f6 fcff 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0da:	4680      	mov	r8, r0
 800a0dc:	b158      	cbz	r0, 800a0f6 <_dtoa_r+0xce>
 800a0de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0e6:	b113      	cbz	r3, 800a0ee <_dtoa_r+0xc6>
 800a0e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a0ea:	4b86      	ldr	r3, [pc, #536]	@ (800a304 <_dtoa_r+0x2dc>)
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a318 <_dtoa_r+0x2f0>
 800a0f2:	f000 bd40 	b.w	800ab76 <_dtoa_r+0xb4e>
 800a0f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a0fa:	aa14      	add	r2, sp, #80	@ 0x50
 800a0fc:	a915      	add	r1, sp, #84	@ 0x54
 800a0fe:	4648      	mov	r0, r9
 800a100:	f001 f984 	bl	800b40c <__d2b>
 800a104:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a108:	9002      	str	r0, [sp, #8]
 800a10a:	2e00      	cmp	r6, #0
 800a10c:	d078      	beq.n	800a200 <_dtoa_r+0x1d8>
 800a10e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a110:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a118:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a11c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a120:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a124:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a128:	4619      	mov	r1, r3
 800a12a:	2200      	movs	r2, #0
 800a12c:	4b76      	ldr	r3, [pc, #472]	@ (800a308 <_dtoa_r+0x2e0>)
 800a12e:	f7f6 f8b3 	bl	8000298 <__aeabi_dsub>
 800a132:	a36b      	add	r3, pc, #428	@ (adr r3, 800a2e0 <_dtoa_r+0x2b8>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f7f6 fa66 	bl	8000608 <__aeabi_dmul>
 800a13c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a2e8 <_dtoa_r+0x2c0>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 f8ab 	bl	800029c <__adddf3>
 800a146:	4604      	mov	r4, r0
 800a148:	4630      	mov	r0, r6
 800a14a:	460d      	mov	r5, r1
 800a14c:	f7f6 f9f2 	bl	8000534 <__aeabi_i2d>
 800a150:	a367      	add	r3, pc, #412	@ (adr r3, 800a2f0 <_dtoa_r+0x2c8>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f7f6 fa57 	bl	8000608 <__aeabi_dmul>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 f89b 	bl	800029c <__adddf3>
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
 800a16a:	f7f6 fcfd 	bl	8000b68 <__aeabi_d2iz>
 800a16e:	2200      	movs	r2, #0
 800a170:	4607      	mov	r7, r0
 800a172:	2300      	movs	r3, #0
 800a174:	4620      	mov	r0, r4
 800a176:	4629      	mov	r1, r5
 800a178:	f7f6 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800a17c:	b140      	cbz	r0, 800a190 <_dtoa_r+0x168>
 800a17e:	4638      	mov	r0, r7
 800a180:	f7f6 f9d8 	bl	8000534 <__aeabi_i2d>
 800a184:	4622      	mov	r2, r4
 800a186:	462b      	mov	r3, r5
 800a188:	f7f6 fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 800a18c:	b900      	cbnz	r0, 800a190 <_dtoa_r+0x168>
 800a18e:	3f01      	subs	r7, #1
 800a190:	2f16      	cmp	r7, #22
 800a192:	d852      	bhi.n	800a23a <_dtoa_r+0x212>
 800a194:	4b5d      	ldr	r3, [pc, #372]	@ (800a30c <_dtoa_r+0x2e4>)
 800a196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a1a2:	f7f6 fca3 	bl	8000aec <__aeabi_dcmplt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d049      	beq.n	800a23e <_dtoa_r+0x216>
 800a1aa:	3f01      	subs	r7, #1
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a1b2:	1b9b      	subs	r3, r3, r6
 800a1b4:	1e5a      	subs	r2, r3, #1
 800a1b6:	bf45      	ittet	mi
 800a1b8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a1bc:	9300      	strmi	r3, [sp, #0]
 800a1be:	2300      	movpl	r3, #0
 800a1c0:	2300      	movmi	r3, #0
 800a1c2:	9206      	str	r2, [sp, #24]
 800a1c4:	bf54      	ite	pl
 800a1c6:	9300      	strpl	r3, [sp, #0]
 800a1c8:	9306      	strmi	r3, [sp, #24]
 800a1ca:	2f00      	cmp	r7, #0
 800a1cc:	db39      	blt.n	800a242 <_dtoa_r+0x21a>
 800a1ce:	9b06      	ldr	r3, [sp, #24]
 800a1d0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a1d2:	443b      	add	r3, r7
 800a1d4:	9306      	str	r3, [sp, #24]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9308      	str	r3, [sp, #32]
 800a1da:	9b07      	ldr	r3, [sp, #28]
 800a1dc:	2b09      	cmp	r3, #9
 800a1de:	d863      	bhi.n	800a2a8 <_dtoa_r+0x280>
 800a1e0:	2b05      	cmp	r3, #5
 800a1e2:	bfc4      	itt	gt
 800a1e4:	3b04      	subgt	r3, #4
 800a1e6:	9307      	strgt	r3, [sp, #28]
 800a1e8:	9b07      	ldr	r3, [sp, #28]
 800a1ea:	f1a3 0302 	sub.w	r3, r3, #2
 800a1ee:	bfcc      	ite	gt
 800a1f0:	2400      	movgt	r4, #0
 800a1f2:	2401      	movle	r4, #1
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d863      	bhi.n	800a2c0 <_dtoa_r+0x298>
 800a1f8:	e8df f003 	tbb	[pc, r3]
 800a1fc:	2b375452 	.word	0x2b375452
 800a200:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a204:	441e      	add	r6, r3
 800a206:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	bfc1      	itttt	gt
 800a20e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a212:	409f      	lslgt	r7, r3
 800a214:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a218:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a21c:	bfd6      	itet	le
 800a21e:	f1c3 0320 	rsble	r3, r3, #32
 800a222:	ea47 0003 	orrgt.w	r0, r7, r3
 800a226:	fa04 f003 	lslle.w	r0, r4, r3
 800a22a:	f7f6 f973 	bl	8000514 <__aeabi_ui2d>
 800a22e:	2201      	movs	r2, #1
 800a230:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a234:	3e01      	subs	r6, #1
 800a236:	9212      	str	r2, [sp, #72]	@ 0x48
 800a238:	e776      	b.n	800a128 <_dtoa_r+0x100>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e7b7      	b.n	800a1ae <_dtoa_r+0x186>
 800a23e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a240:	e7b6      	b.n	800a1b0 <_dtoa_r+0x188>
 800a242:	9b00      	ldr	r3, [sp, #0]
 800a244:	1bdb      	subs	r3, r3, r7
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	427b      	negs	r3, r7
 800a24a:	9308      	str	r3, [sp, #32]
 800a24c:	2300      	movs	r3, #0
 800a24e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a250:	e7c3      	b.n	800a1da <_dtoa_r+0x1b2>
 800a252:	2301      	movs	r3, #1
 800a254:	9309      	str	r3, [sp, #36]	@ 0x24
 800a256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a258:	eb07 0b03 	add.w	fp, r7, r3
 800a25c:	f10b 0301 	add.w	r3, fp, #1
 800a260:	2b01      	cmp	r3, #1
 800a262:	9303      	str	r3, [sp, #12]
 800a264:	bfb8      	it	lt
 800a266:	2301      	movlt	r3, #1
 800a268:	e006      	b.n	800a278 <_dtoa_r+0x250>
 800a26a:	2301      	movs	r3, #1
 800a26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a26e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a270:	2b00      	cmp	r3, #0
 800a272:	dd28      	ble.n	800a2c6 <_dtoa_r+0x29e>
 800a274:	469b      	mov	fp, r3
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a27c:	2100      	movs	r1, #0
 800a27e:	2204      	movs	r2, #4
 800a280:	f102 0514 	add.w	r5, r2, #20
 800a284:	429d      	cmp	r5, r3
 800a286:	d926      	bls.n	800a2d6 <_dtoa_r+0x2ae>
 800a288:	6041      	str	r1, [r0, #4]
 800a28a:	4648      	mov	r0, r9
 800a28c:	f000 fd9c 	bl	800adc8 <_Balloc>
 800a290:	4682      	mov	sl, r0
 800a292:	2800      	cmp	r0, #0
 800a294:	d142      	bne.n	800a31c <_dtoa_r+0x2f4>
 800a296:	4b1e      	ldr	r3, [pc, #120]	@ (800a310 <_dtoa_r+0x2e8>)
 800a298:	4602      	mov	r2, r0
 800a29a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a29e:	e6da      	b.n	800a056 <_dtoa_r+0x2e>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e7e3      	b.n	800a26c <_dtoa_r+0x244>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e7d5      	b.n	800a254 <_dtoa_r+0x22c>
 800a2a8:	2401      	movs	r4, #1
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9307      	str	r3, [sp, #28]
 800a2ae:	9409      	str	r4, [sp, #36]	@ 0x24
 800a2b0:	f04f 3bff 	mov.w	fp, #4294967295
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a2ba:	2312      	movs	r3, #18
 800a2bc:	920c      	str	r2, [sp, #48]	@ 0x30
 800a2be:	e7db      	b.n	800a278 <_dtoa_r+0x250>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2c4:	e7f4      	b.n	800a2b0 <_dtoa_r+0x288>
 800a2c6:	f04f 0b01 	mov.w	fp, #1
 800a2ca:	f8cd b00c 	str.w	fp, [sp, #12]
 800a2ce:	465b      	mov	r3, fp
 800a2d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a2d4:	e7d0      	b.n	800a278 <_dtoa_r+0x250>
 800a2d6:	3101      	adds	r1, #1
 800a2d8:	0052      	lsls	r2, r2, #1
 800a2da:	e7d1      	b.n	800a280 <_dtoa_r+0x258>
 800a2dc:	f3af 8000 	nop.w
 800a2e0:	636f4361 	.word	0x636f4361
 800a2e4:	3fd287a7 	.word	0x3fd287a7
 800a2e8:	8b60c8b3 	.word	0x8b60c8b3
 800a2ec:	3fc68a28 	.word	0x3fc68a28
 800a2f0:	509f79fb 	.word	0x509f79fb
 800a2f4:	3fd34413 	.word	0x3fd34413
 800a2f8:	0800def1 	.word	0x0800def1
 800a2fc:	0800df08 	.word	0x0800df08
 800a300:	7ff00000 	.word	0x7ff00000
 800a304:	0800dec1 	.word	0x0800dec1
 800a308:	3ff80000 	.word	0x3ff80000
 800a30c:	0800e058 	.word	0x0800e058
 800a310:	0800df60 	.word	0x0800df60
 800a314:	0800deed 	.word	0x0800deed
 800a318:	0800dec0 	.word	0x0800dec0
 800a31c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a320:	6018      	str	r0, [r3, #0]
 800a322:	9b03      	ldr	r3, [sp, #12]
 800a324:	2b0e      	cmp	r3, #14
 800a326:	f200 80a1 	bhi.w	800a46c <_dtoa_r+0x444>
 800a32a:	2c00      	cmp	r4, #0
 800a32c:	f000 809e 	beq.w	800a46c <_dtoa_r+0x444>
 800a330:	2f00      	cmp	r7, #0
 800a332:	dd33      	ble.n	800a39c <_dtoa_r+0x374>
 800a334:	4b9c      	ldr	r3, [pc, #624]	@ (800a5a8 <_dtoa_r+0x580>)
 800a336:	f007 020f 	and.w	r2, r7, #15
 800a33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a33e:	ed93 7b00 	vldr	d7, [r3]
 800a342:	05f8      	lsls	r0, r7, #23
 800a344:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a348:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a34c:	d516      	bpl.n	800a37c <_dtoa_r+0x354>
 800a34e:	4b97      	ldr	r3, [pc, #604]	@ (800a5ac <_dtoa_r+0x584>)
 800a350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a358:	f7f6 fa80 	bl	800085c <__aeabi_ddiv>
 800a35c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a360:	f004 040f 	and.w	r4, r4, #15
 800a364:	2603      	movs	r6, #3
 800a366:	4d91      	ldr	r5, [pc, #580]	@ (800a5ac <_dtoa_r+0x584>)
 800a368:	b954      	cbnz	r4, 800a380 <_dtoa_r+0x358>
 800a36a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a36e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a372:	f7f6 fa73 	bl	800085c <__aeabi_ddiv>
 800a376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a37a:	e028      	b.n	800a3ce <_dtoa_r+0x3a6>
 800a37c:	2602      	movs	r6, #2
 800a37e:	e7f2      	b.n	800a366 <_dtoa_r+0x33e>
 800a380:	07e1      	lsls	r1, r4, #31
 800a382:	d508      	bpl.n	800a396 <_dtoa_r+0x36e>
 800a384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a388:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a38c:	f7f6 f93c 	bl	8000608 <__aeabi_dmul>
 800a390:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a394:	3601      	adds	r6, #1
 800a396:	1064      	asrs	r4, r4, #1
 800a398:	3508      	adds	r5, #8
 800a39a:	e7e5      	b.n	800a368 <_dtoa_r+0x340>
 800a39c:	f000 80af 	beq.w	800a4fe <_dtoa_r+0x4d6>
 800a3a0:	427c      	negs	r4, r7
 800a3a2:	4b81      	ldr	r3, [pc, #516]	@ (800a5a8 <_dtoa_r+0x580>)
 800a3a4:	4d81      	ldr	r5, [pc, #516]	@ (800a5ac <_dtoa_r+0x584>)
 800a3a6:	f004 020f 	and.w	r2, r4, #15
 800a3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a3b6:	f7f6 f927 	bl	8000608 <__aeabi_dmul>
 800a3ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3be:	1124      	asrs	r4, r4, #4
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2602      	movs	r6, #2
 800a3c4:	2c00      	cmp	r4, #0
 800a3c6:	f040 808f 	bne.w	800a4e8 <_dtoa_r+0x4c0>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1d3      	bne.n	800a376 <_dtoa_r+0x34e>
 800a3ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 8094 	beq.w	800a502 <_dtoa_r+0x4da>
 800a3da:	4b75      	ldr	r3, [pc, #468]	@ (800a5b0 <_dtoa_r+0x588>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4620      	mov	r0, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	f7f6 fb83 	bl	8000aec <__aeabi_dcmplt>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f000 808b 	beq.w	800a502 <_dtoa_r+0x4da>
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 8087 	beq.w	800a502 <_dtoa_r+0x4da>
 800a3f4:	f1bb 0f00 	cmp.w	fp, #0
 800a3f8:	dd34      	ble.n	800a464 <_dtoa_r+0x43c>
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4b6d      	ldr	r3, [pc, #436]	@ (800a5b4 <_dtoa_r+0x58c>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	4629      	mov	r1, r5
 800a402:	f7f6 f901 	bl	8000608 <__aeabi_dmul>
 800a406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a40a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a40e:	3601      	adds	r6, #1
 800a410:	465c      	mov	r4, fp
 800a412:	4630      	mov	r0, r6
 800a414:	f7f6 f88e 	bl	8000534 <__aeabi_i2d>
 800a418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a41c:	f7f6 f8f4 	bl	8000608 <__aeabi_dmul>
 800a420:	4b65      	ldr	r3, [pc, #404]	@ (800a5b8 <_dtoa_r+0x590>)
 800a422:	2200      	movs	r2, #0
 800a424:	f7f5 ff3a 	bl	800029c <__adddf3>
 800a428:	4605      	mov	r5, r0
 800a42a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a42e:	2c00      	cmp	r4, #0
 800a430:	d16a      	bne.n	800a508 <_dtoa_r+0x4e0>
 800a432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a436:	4b61      	ldr	r3, [pc, #388]	@ (800a5bc <_dtoa_r+0x594>)
 800a438:	2200      	movs	r2, #0
 800a43a:	f7f5 ff2d 	bl	8000298 <__aeabi_dsub>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a446:	462a      	mov	r2, r5
 800a448:	4633      	mov	r3, r6
 800a44a:	f7f6 fb6d 	bl	8000b28 <__aeabi_dcmpgt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	f040 8298 	bne.w	800a984 <_dtoa_r+0x95c>
 800a454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a458:	462a      	mov	r2, r5
 800a45a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a45e:	f7f6 fb45 	bl	8000aec <__aeabi_dcmplt>
 800a462:	bb38      	cbnz	r0, 800a4b4 <_dtoa_r+0x48c>
 800a464:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a468:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a46c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f2c0 8157 	blt.w	800a722 <_dtoa_r+0x6fa>
 800a474:	2f0e      	cmp	r7, #14
 800a476:	f300 8154 	bgt.w	800a722 <_dtoa_r+0x6fa>
 800a47a:	4b4b      	ldr	r3, [pc, #300]	@ (800a5a8 <_dtoa_r+0x580>)
 800a47c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a480:	ed93 7b00 	vldr	d7, [r3]
 800a484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a486:	2b00      	cmp	r3, #0
 800a488:	ed8d 7b00 	vstr	d7, [sp]
 800a48c:	f280 80e5 	bge.w	800a65a <_dtoa_r+0x632>
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	f300 80e1 	bgt.w	800a65a <_dtoa_r+0x632>
 800a498:	d10c      	bne.n	800a4b4 <_dtoa_r+0x48c>
 800a49a:	4b48      	ldr	r3, [pc, #288]	@ (800a5bc <_dtoa_r+0x594>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	ec51 0b17 	vmov	r0, r1, d7
 800a4a2:	f7f6 f8b1 	bl	8000608 <__aeabi_dmul>
 800a4a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4aa:	f7f6 fb33 	bl	8000b14 <__aeabi_dcmpge>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f000 8266 	beq.w	800a980 <_dtoa_r+0x958>
 800a4b4:	2400      	movs	r4, #0
 800a4b6:	4625      	mov	r5, r4
 800a4b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4ba:	4656      	mov	r6, sl
 800a4bc:	ea6f 0803 	mvn.w	r8, r3
 800a4c0:	2700      	movs	r7, #0
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4648      	mov	r0, r9
 800a4c6:	f000 fcbf 	bl	800ae48 <_Bfree>
 800a4ca:	2d00      	cmp	r5, #0
 800a4cc:	f000 80bd 	beq.w	800a64a <_dtoa_r+0x622>
 800a4d0:	b12f      	cbz	r7, 800a4de <_dtoa_r+0x4b6>
 800a4d2:	42af      	cmp	r7, r5
 800a4d4:	d003      	beq.n	800a4de <_dtoa_r+0x4b6>
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	4648      	mov	r0, r9
 800a4da:	f000 fcb5 	bl	800ae48 <_Bfree>
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4648      	mov	r0, r9
 800a4e2:	f000 fcb1 	bl	800ae48 <_Bfree>
 800a4e6:	e0b0      	b.n	800a64a <_dtoa_r+0x622>
 800a4e8:	07e2      	lsls	r2, r4, #31
 800a4ea:	d505      	bpl.n	800a4f8 <_dtoa_r+0x4d0>
 800a4ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4f0:	f7f6 f88a 	bl	8000608 <__aeabi_dmul>
 800a4f4:	3601      	adds	r6, #1
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	1064      	asrs	r4, r4, #1
 800a4fa:	3508      	adds	r5, #8
 800a4fc:	e762      	b.n	800a3c4 <_dtoa_r+0x39c>
 800a4fe:	2602      	movs	r6, #2
 800a500:	e765      	b.n	800a3ce <_dtoa_r+0x3a6>
 800a502:	9c03      	ldr	r4, [sp, #12]
 800a504:	46b8      	mov	r8, r7
 800a506:	e784      	b.n	800a412 <_dtoa_r+0x3ea>
 800a508:	4b27      	ldr	r3, [pc, #156]	@ (800a5a8 <_dtoa_r+0x580>)
 800a50a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a50c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a510:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a514:	4454      	add	r4, sl
 800a516:	2900      	cmp	r1, #0
 800a518:	d054      	beq.n	800a5c4 <_dtoa_r+0x59c>
 800a51a:	4929      	ldr	r1, [pc, #164]	@ (800a5c0 <_dtoa_r+0x598>)
 800a51c:	2000      	movs	r0, #0
 800a51e:	f7f6 f99d 	bl	800085c <__aeabi_ddiv>
 800a522:	4633      	mov	r3, r6
 800a524:	462a      	mov	r2, r5
 800a526:	f7f5 feb7 	bl	8000298 <__aeabi_dsub>
 800a52a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a52e:	4656      	mov	r6, sl
 800a530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a534:	f7f6 fb18 	bl	8000b68 <__aeabi_d2iz>
 800a538:	4605      	mov	r5, r0
 800a53a:	f7f5 fffb 	bl	8000534 <__aeabi_i2d>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a546:	f7f5 fea7 	bl	8000298 <__aeabi_dsub>
 800a54a:	3530      	adds	r5, #48	@ 0x30
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a554:	f806 5b01 	strb.w	r5, [r6], #1
 800a558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a55c:	f7f6 fac6 	bl	8000aec <__aeabi_dcmplt>
 800a560:	2800      	cmp	r0, #0
 800a562:	d172      	bne.n	800a64a <_dtoa_r+0x622>
 800a564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a568:	4911      	ldr	r1, [pc, #68]	@ (800a5b0 <_dtoa_r+0x588>)
 800a56a:	2000      	movs	r0, #0
 800a56c:	f7f5 fe94 	bl	8000298 <__aeabi_dsub>
 800a570:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a574:	f7f6 faba 	bl	8000aec <__aeabi_dcmplt>
 800a578:	2800      	cmp	r0, #0
 800a57a:	f040 80b4 	bne.w	800a6e6 <_dtoa_r+0x6be>
 800a57e:	42a6      	cmp	r6, r4
 800a580:	f43f af70 	beq.w	800a464 <_dtoa_r+0x43c>
 800a584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a588:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b4 <_dtoa_r+0x58c>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	f7f6 f83c 	bl	8000608 <__aeabi_dmul>
 800a590:	4b08      	ldr	r3, [pc, #32]	@ (800a5b4 <_dtoa_r+0x58c>)
 800a592:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a596:	2200      	movs	r2, #0
 800a598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a59c:	f7f6 f834 	bl	8000608 <__aeabi_dmul>
 800a5a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5a4:	e7c4      	b.n	800a530 <_dtoa_r+0x508>
 800a5a6:	bf00      	nop
 800a5a8:	0800e058 	.word	0x0800e058
 800a5ac:	0800e030 	.word	0x0800e030
 800a5b0:	3ff00000 	.word	0x3ff00000
 800a5b4:	40240000 	.word	0x40240000
 800a5b8:	401c0000 	.word	0x401c0000
 800a5bc:	40140000 	.word	0x40140000
 800a5c0:	3fe00000 	.word	0x3fe00000
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f7f6 f81e 	bl	8000608 <__aeabi_dmul>
 800a5cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a5d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a5d2:	4656      	mov	r6, sl
 800a5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5d8:	f7f6 fac6 	bl	8000b68 <__aeabi_d2iz>
 800a5dc:	4605      	mov	r5, r0
 800a5de:	f7f5 ffa9 	bl	8000534 <__aeabi_i2d>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5ea:	f7f5 fe55 	bl	8000298 <__aeabi_dsub>
 800a5ee:	3530      	adds	r5, #48	@ 0x30
 800a5f0:	f806 5b01 	strb.w	r5, [r6], #1
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	42a6      	cmp	r6, r4
 800a5fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5fe:	f04f 0200 	mov.w	r2, #0
 800a602:	d124      	bne.n	800a64e <_dtoa_r+0x626>
 800a604:	4baf      	ldr	r3, [pc, #700]	@ (800a8c4 <_dtoa_r+0x89c>)
 800a606:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a60a:	f7f5 fe47 	bl	800029c <__adddf3>
 800a60e:	4602      	mov	r2, r0
 800a610:	460b      	mov	r3, r1
 800a612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a616:	f7f6 fa87 	bl	8000b28 <__aeabi_dcmpgt>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d163      	bne.n	800a6e6 <_dtoa_r+0x6be>
 800a61e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a622:	49a8      	ldr	r1, [pc, #672]	@ (800a8c4 <_dtoa_r+0x89c>)
 800a624:	2000      	movs	r0, #0
 800a626:	f7f5 fe37 	bl	8000298 <__aeabi_dsub>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a632:	f7f6 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800a636:	2800      	cmp	r0, #0
 800a638:	f43f af14 	beq.w	800a464 <_dtoa_r+0x43c>
 800a63c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a63e:	1e73      	subs	r3, r6, #1
 800a640:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a642:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a646:	2b30      	cmp	r3, #48	@ 0x30
 800a648:	d0f8      	beq.n	800a63c <_dtoa_r+0x614>
 800a64a:	4647      	mov	r7, r8
 800a64c:	e03b      	b.n	800a6c6 <_dtoa_r+0x69e>
 800a64e:	4b9e      	ldr	r3, [pc, #632]	@ (800a8c8 <_dtoa_r+0x8a0>)
 800a650:	f7f5 ffda 	bl	8000608 <__aeabi_dmul>
 800a654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a658:	e7bc      	b.n	800a5d4 <_dtoa_r+0x5ac>
 800a65a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a65e:	4656      	mov	r6, sl
 800a660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f6 f8f8 	bl	800085c <__aeabi_ddiv>
 800a66c:	f7f6 fa7c 	bl	8000b68 <__aeabi_d2iz>
 800a670:	4680      	mov	r8, r0
 800a672:	f7f5 ff5f 	bl	8000534 <__aeabi_i2d>
 800a676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a67a:	f7f5 ffc5 	bl	8000608 <__aeabi_dmul>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	4620      	mov	r0, r4
 800a684:	4629      	mov	r1, r5
 800a686:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a68a:	f7f5 fe05 	bl	8000298 <__aeabi_dsub>
 800a68e:	f806 4b01 	strb.w	r4, [r6], #1
 800a692:	9d03      	ldr	r5, [sp, #12]
 800a694:	eba6 040a 	sub.w	r4, r6, sl
 800a698:	42a5      	cmp	r5, r4
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	d133      	bne.n	800a708 <_dtoa_r+0x6e0>
 800a6a0:	f7f5 fdfc 	bl	800029c <__adddf3>
 800a6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	460d      	mov	r5, r1
 800a6ac:	f7f6 fa3c 	bl	8000b28 <__aeabi_dcmpgt>
 800a6b0:	b9c0      	cbnz	r0, 800a6e4 <_dtoa_r+0x6bc>
 800a6b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	f7f6 fa0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6be:	b110      	cbz	r0, 800a6c6 <_dtoa_r+0x69e>
 800a6c0:	f018 0f01 	tst.w	r8, #1
 800a6c4:	d10e      	bne.n	800a6e4 <_dtoa_r+0x6bc>
 800a6c6:	9902      	ldr	r1, [sp, #8]
 800a6c8:	4648      	mov	r0, r9
 800a6ca:	f000 fbbd 	bl	800ae48 <_Bfree>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	7033      	strb	r3, [r6, #0]
 800a6d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a6d4:	3701      	adds	r7, #1
 800a6d6:	601f      	str	r7, [r3, #0]
 800a6d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 824b 	beq.w	800ab76 <_dtoa_r+0xb4e>
 800a6e0:	601e      	str	r6, [r3, #0]
 800a6e2:	e248      	b.n	800ab76 <_dtoa_r+0xb4e>
 800a6e4:	46b8      	mov	r8, r7
 800a6e6:	4633      	mov	r3, r6
 800a6e8:	461e      	mov	r6, r3
 800a6ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6ee:	2a39      	cmp	r2, #57	@ 0x39
 800a6f0:	d106      	bne.n	800a700 <_dtoa_r+0x6d8>
 800a6f2:	459a      	cmp	sl, r3
 800a6f4:	d1f8      	bne.n	800a6e8 <_dtoa_r+0x6c0>
 800a6f6:	2230      	movs	r2, #48	@ 0x30
 800a6f8:	f108 0801 	add.w	r8, r8, #1
 800a6fc:	f88a 2000 	strb.w	r2, [sl]
 800a700:	781a      	ldrb	r2, [r3, #0]
 800a702:	3201      	adds	r2, #1
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	e7a0      	b.n	800a64a <_dtoa_r+0x622>
 800a708:	4b6f      	ldr	r3, [pc, #444]	@ (800a8c8 <_dtoa_r+0x8a0>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	f7f5 ff7c 	bl	8000608 <__aeabi_dmul>
 800a710:	2200      	movs	r2, #0
 800a712:	2300      	movs	r3, #0
 800a714:	4604      	mov	r4, r0
 800a716:	460d      	mov	r5, r1
 800a718:	f7f6 f9de 	bl	8000ad8 <__aeabi_dcmpeq>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d09f      	beq.n	800a660 <_dtoa_r+0x638>
 800a720:	e7d1      	b.n	800a6c6 <_dtoa_r+0x69e>
 800a722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a724:	2a00      	cmp	r2, #0
 800a726:	f000 80ea 	beq.w	800a8fe <_dtoa_r+0x8d6>
 800a72a:	9a07      	ldr	r2, [sp, #28]
 800a72c:	2a01      	cmp	r2, #1
 800a72e:	f300 80cd 	bgt.w	800a8cc <_dtoa_r+0x8a4>
 800a732:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a734:	2a00      	cmp	r2, #0
 800a736:	f000 80c1 	beq.w	800a8bc <_dtoa_r+0x894>
 800a73a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a73e:	9c08      	ldr	r4, [sp, #32]
 800a740:	9e00      	ldr	r6, [sp, #0]
 800a742:	9a00      	ldr	r2, [sp, #0]
 800a744:	441a      	add	r2, r3
 800a746:	9200      	str	r2, [sp, #0]
 800a748:	9a06      	ldr	r2, [sp, #24]
 800a74a:	2101      	movs	r1, #1
 800a74c:	441a      	add	r2, r3
 800a74e:	4648      	mov	r0, r9
 800a750:	9206      	str	r2, [sp, #24]
 800a752:	f000 fc2d 	bl	800afb0 <__i2b>
 800a756:	4605      	mov	r5, r0
 800a758:	b166      	cbz	r6, 800a774 <_dtoa_r+0x74c>
 800a75a:	9b06      	ldr	r3, [sp, #24]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dd09      	ble.n	800a774 <_dtoa_r+0x74c>
 800a760:	42b3      	cmp	r3, r6
 800a762:	9a00      	ldr	r2, [sp, #0]
 800a764:	bfa8      	it	ge
 800a766:	4633      	movge	r3, r6
 800a768:	1ad2      	subs	r2, r2, r3
 800a76a:	9200      	str	r2, [sp, #0]
 800a76c:	9a06      	ldr	r2, [sp, #24]
 800a76e:	1af6      	subs	r6, r6, r3
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	9b08      	ldr	r3, [sp, #32]
 800a776:	b30b      	cbz	r3, 800a7bc <_dtoa_r+0x794>
 800a778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 80c6 	beq.w	800a90c <_dtoa_r+0x8e4>
 800a780:	2c00      	cmp	r4, #0
 800a782:	f000 80c0 	beq.w	800a906 <_dtoa_r+0x8de>
 800a786:	4629      	mov	r1, r5
 800a788:	4622      	mov	r2, r4
 800a78a:	4648      	mov	r0, r9
 800a78c:	f000 fcc8 	bl	800b120 <__pow5mult>
 800a790:	9a02      	ldr	r2, [sp, #8]
 800a792:	4601      	mov	r1, r0
 800a794:	4605      	mov	r5, r0
 800a796:	4648      	mov	r0, r9
 800a798:	f000 fc20 	bl	800afdc <__multiply>
 800a79c:	9902      	ldr	r1, [sp, #8]
 800a79e:	4680      	mov	r8, r0
 800a7a0:	4648      	mov	r0, r9
 800a7a2:	f000 fb51 	bl	800ae48 <_Bfree>
 800a7a6:	9b08      	ldr	r3, [sp, #32]
 800a7a8:	1b1b      	subs	r3, r3, r4
 800a7aa:	9308      	str	r3, [sp, #32]
 800a7ac:	f000 80b1 	beq.w	800a912 <_dtoa_r+0x8ea>
 800a7b0:	9a08      	ldr	r2, [sp, #32]
 800a7b2:	4641      	mov	r1, r8
 800a7b4:	4648      	mov	r0, r9
 800a7b6:	f000 fcb3 	bl	800b120 <__pow5mult>
 800a7ba:	9002      	str	r0, [sp, #8]
 800a7bc:	2101      	movs	r1, #1
 800a7be:	4648      	mov	r0, r9
 800a7c0:	f000 fbf6 	bl	800afb0 <__i2b>
 800a7c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 81d8 	beq.w	800ab7e <_dtoa_r+0xb56>
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	4648      	mov	r0, r9
 800a7d4:	f000 fca4 	bl	800b120 <__pow5mult>
 800a7d8:	9b07      	ldr	r3, [sp, #28]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	4604      	mov	r4, r0
 800a7de:	f300 809f 	bgt.w	800a920 <_dtoa_r+0x8f8>
 800a7e2:	9b04      	ldr	r3, [sp, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f040 8097 	bne.w	800a918 <_dtoa_r+0x8f0>
 800a7ea:	9b05      	ldr	r3, [sp, #20]
 800a7ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f040 8093 	bne.w	800a91c <_dtoa_r+0x8f4>
 800a7f6:	9b05      	ldr	r3, [sp, #20]
 800a7f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7fc:	0d1b      	lsrs	r3, r3, #20
 800a7fe:	051b      	lsls	r3, r3, #20
 800a800:	b133      	cbz	r3, 800a810 <_dtoa_r+0x7e8>
 800a802:	9b00      	ldr	r3, [sp, #0]
 800a804:	3301      	adds	r3, #1
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	3301      	adds	r3, #1
 800a80c:	9306      	str	r3, [sp, #24]
 800a80e:	2301      	movs	r3, #1
 800a810:	9308      	str	r3, [sp, #32]
 800a812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 81b8 	beq.w	800ab8a <_dtoa_r+0xb62>
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a820:	6918      	ldr	r0, [r3, #16]
 800a822:	f000 fb79 	bl	800af18 <__hi0bits>
 800a826:	f1c0 0020 	rsb	r0, r0, #32
 800a82a:	9b06      	ldr	r3, [sp, #24]
 800a82c:	4418      	add	r0, r3
 800a82e:	f010 001f 	ands.w	r0, r0, #31
 800a832:	f000 8082 	beq.w	800a93a <_dtoa_r+0x912>
 800a836:	f1c0 0320 	rsb	r3, r0, #32
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	dd73      	ble.n	800a926 <_dtoa_r+0x8fe>
 800a83e:	9b00      	ldr	r3, [sp, #0]
 800a840:	f1c0 001c 	rsb	r0, r0, #28
 800a844:	4403      	add	r3, r0
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	9b06      	ldr	r3, [sp, #24]
 800a84a:	4403      	add	r3, r0
 800a84c:	4406      	add	r6, r0
 800a84e:	9306      	str	r3, [sp, #24]
 800a850:	9b00      	ldr	r3, [sp, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dd05      	ble.n	800a862 <_dtoa_r+0x83a>
 800a856:	9902      	ldr	r1, [sp, #8]
 800a858:	461a      	mov	r2, r3
 800a85a:	4648      	mov	r0, r9
 800a85c:	f000 fcba 	bl	800b1d4 <__lshift>
 800a860:	9002      	str	r0, [sp, #8]
 800a862:	9b06      	ldr	r3, [sp, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	dd05      	ble.n	800a874 <_dtoa_r+0x84c>
 800a868:	4621      	mov	r1, r4
 800a86a:	461a      	mov	r2, r3
 800a86c:	4648      	mov	r0, r9
 800a86e:	f000 fcb1 	bl	800b1d4 <__lshift>
 800a872:	4604      	mov	r4, r0
 800a874:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a876:	2b00      	cmp	r3, #0
 800a878:	d061      	beq.n	800a93e <_dtoa_r+0x916>
 800a87a:	9802      	ldr	r0, [sp, #8]
 800a87c:	4621      	mov	r1, r4
 800a87e:	f000 fd15 	bl	800b2ac <__mcmp>
 800a882:	2800      	cmp	r0, #0
 800a884:	da5b      	bge.n	800a93e <_dtoa_r+0x916>
 800a886:	2300      	movs	r3, #0
 800a888:	9902      	ldr	r1, [sp, #8]
 800a88a:	220a      	movs	r2, #10
 800a88c:	4648      	mov	r0, r9
 800a88e:	f000 fafd 	bl	800ae8c <__multadd>
 800a892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a894:	9002      	str	r0, [sp, #8]
 800a896:	f107 38ff 	add.w	r8, r7, #4294967295
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 8177 	beq.w	800ab8e <_dtoa_r+0xb66>
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	220a      	movs	r2, #10
 800a8a6:	4648      	mov	r0, r9
 800a8a8:	f000 faf0 	bl	800ae8c <__multadd>
 800a8ac:	f1bb 0f00 	cmp.w	fp, #0
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	dc6f      	bgt.n	800a994 <_dtoa_r+0x96c>
 800a8b4:	9b07      	ldr	r3, [sp, #28]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	dc49      	bgt.n	800a94e <_dtoa_r+0x926>
 800a8ba:	e06b      	b.n	800a994 <_dtoa_r+0x96c>
 800a8bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a8c2:	e73c      	b.n	800a73e <_dtoa_r+0x716>
 800a8c4:	3fe00000 	.word	0x3fe00000
 800a8c8:	40240000 	.word	0x40240000
 800a8cc:	9b03      	ldr	r3, [sp, #12]
 800a8ce:	1e5c      	subs	r4, r3, #1
 800a8d0:	9b08      	ldr	r3, [sp, #32]
 800a8d2:	42a3      	cmp	r3, r4
 800a8d4:	db09      	blt.n	800a8ea <_dtoa_r+0x8c2>
 800a8d6:	1b1c      	subs	r4, r3, r4
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f6bf af30 	bge.w	800a740 <_dtoa_r+0x718>
 800a8e0:	9b00      	ldr	r3, [sp, #0]
 800a8e2:	9a03      	ldr	r2, [sp, #12]
 800a8e4:	1a9e      	subs	r6, r3, r2
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e72b      	b.n	800a742 <_dtoa_r+0x71a>
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a8ee:	9408      	str	r4, [sp, #32]
 800a8f0:	1ae3      	subs	r3, r4, r3
 800a8f2:	441a      	add	r2, r3
 800a8f4:	9e00      	ldr	r6, [sp, #0]
 800a8f6:	9b03      	ldr	r3, [sp, #12]
 800a8f8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a8fa:	2400      	movs	r4, #0
 800a8fc:	e721      	b.n	800a742 <_dtoa_r+0x71a>
 800a8fe:	9c08      	ldr	r4, [sp, #32]
 800a900:	9e00      	ldr	r6, [sp, #0]
 800a902:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a904:	e728      	b.n	800a758 <_dtoa_r+0x730>
 800a906:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a90a:	e751      	b.n	800a7b0 <_dtoa_r+0x788>
 800a90c:	9a08      	ldr	r2, [sp, #32]
 800a90e:	9902      	ldr	r1, [sp, #8]
 800a910:	e750      	b.n	800a7b4 <_dtoa_r+0x78c>
 800a912:	f8cd 8008 	str.w	r8, [sp, #8]
 800a916:	e751      	b.n	800a7bc <_dtoa_r+0x794>
 800a918:	2300      	movs	r3, #0
 800a91a:	e779      	b.n	800a810 <_dtoa_r+0x7e8>
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	e777      	b.n	800a810 <_dtoa_r+0x7e8>
 800a920:	2300      	movs	r3, #0
 800a922:	9308      	str	r3, [sp, #32]
 800a924:	e779      	b.n	800a81a <_dtoa_r+0x7f2>
 800a926:	d093      	beq.n	800a850 <_dtoa_r+0x828>
 800a928:	9a00      	ldr	r2, [sp, #0]
 800a92a:	331c      	adds	r3, #28
 800a92c:	441a      	add	r2, r3
 800a92e:	9200      	str	r2, [sp, #0]
 800a930:	9a06      	ldr	r2, [sp, #24]
 800a932:	441a      	add	r2, r3
 800a934:	441e      	add	r6, r3
 800a936:	9206      	str	r2, [sp, #24]
 800a938:	e78a      	b.n	800a850 <_dtoa_r+0x828>
 800a93a:	4603      	mov	r3, r0
 800a93c:	e7f4      	b.n	800a928 <_dtoa_r+0x900>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	46b8      	mov	r8, r7
 800a944:	dc20      	bgt.n	800a988 <_dtoa_r+0x960>
 800a946:	469b      	mov	fp, r3
 800a948:	9b07      	ldr	r3, [sp, #28]
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	dd1e      	ble.n	800a98c <_dtoa_r+0x964>
 800a94e:	f1bb 0f00 	cmp.w	fp, #0
 800a952:	f47f adb1 	bne.w	800a4b8 <_dtoa_r+0x490>
 800a956:	4621      	mov	r1, r4
 800a958:	465b      	mov	r3, fp
 800a95a:	2205      	movs	r2, #5
 800a95c:	4648      	mov	r0, r9
 800a95e:	f000 fa95 	bl	800ae8c <__multadd>
 800a962:	4601      	mov	r1, r0
 800a964:	4604      	mov	r4, r0
 800a966:	9802      	ldr	r0, [sp, #8]
 800a968:	f000 fca0 	bl	800b2ac <__mcmp>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	f77f ada3 	ble.w	800a4b8 <_dtoa_r+0x490>
 800a972:	4656      	mov	r6, sl
 800a974:	2331      	movs	r3, #49	@ 0x31
 800a976:	f806 3b01 	strb.w	r3, [r6], #1
 800a97a:	f108 0801 	add.w	r8, r8, #1
 800a97e:	e59f      	b.n	800a4c0 <_dtoa_r+0x498>
 800a980:	9c03      	ldr	r4, [sp, #12]
 800a982:	46b8      	mov	r8, r7
 800a984:	4625      	mov	r5, r4
 800a986:	e7f4      	b.n	800a972 <_dtoa_r+0x94a>
 800a988:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 8101 	beq.w	800ab96 <_dtoa_r+0xb6e>
 800a994:	2e00      	cmp	r6, #0
 800a996:	dd05      	ble.n	800a9a4 <_dtoa_r+0x97c>
 800a998:	4629      	mov	r1, r5
 800a99a:	4632      	mov	r2, r6
 800a99c:	4648      	mov	r0, r9
 800a99e:	f000 fc19 	bl	800b1d4 <__lshift>
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	9b08      	ldr	r3, [sp, #32]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d05c      	beq.n	800aa64 <_dtoa_r+0xa3c>
 800a9aa:	6869      	ldr	r1, [r5, #4]
 800a9ac:	4648      	mov	r0, r9
 800a9ae:	f000 fa0b 	bl	800adc8 <_Balloc>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b928      	cbnz	r0, 800a9c2 <_dtoa_r+0x99a>
 800a9b6:	4b82      	ldr	r3, [pc, #520]	@ (800abc0 <_dtoa_r+0xb98>)
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a9be:	f7ff bb4a 	b.w	800a056 <_dtoa_r+0x2e>
 800a9c2:	692a      	ldr	r2, [r5, #16]
 800a9c4:	3202      	adds	r2, #2
 800a9c6:	0092      	lsls	r2, r2, #2
 800a9c8:	f105 010c 	add.w	r1, r5, #12
 800a9cc:	300c      	adds	r0, #12
 800a9ce:	f000 ffa3 	bl	800b918 <memcpy>
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	4648      	mov	r0, r9
 800a9d8:	f000 fbfc 	bl	800b1d4 <__lshift>
 800a9dc:	f10a 0301 	add.w	r3, sl, #1
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	eb0a 030b 	add.w	r3, sl, fp
 800a9e6:	9308      	str	r3, [sp, #32]
 800a9e8:	9b04      	ldr	r3, [sp, #16]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	462f      	mov	r7, r5
 800a9f0:	9306      	str	r3, [sp, #24]
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	9b00      	ldr	r3, [sp, #0]
 800a9f6:	9802      	ldr	r0, [sp, #8]
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	f103 3bff 	add.w	fp, r3, #4294967295
 800a9fe:	f7ff fa8a 	bl	8009f16 <quorem>
 800aa02:	4603      	mov	r3, r0
 800aa04:	3330      	adds	r3, #48	@ 0x30
 800aa06:	9003      	str	r0, [sp, #12]
 800aa08:	4639      	mov	r1, r7
 800aa0a:	9802      	ldr	r0, [sp, #8]
 800aa0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa0e:	f000 fc4d 	bl	800b2ac <__mcmp>
 800aa12:	462a      	mov	r2, r5
 800aa14:	9004      	str	r0, [sp, #16]
 800aa16:	4621      	mov	r1, r4
 800aa18:	4648      	mov	r0, r9
 800aa1a:	f000 fc63 	bl	800b2e4 <__mdiff>
 800aa1e:	68c2      	ldr	r2, [r0, #12]
 800aa20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa22:	4606      	mov	r6, r0
 800aa24:	bb02      	cbnz	r2, 800aa68 <_dtoa_r+0xa40>
 800aa26:	4601      	mov	r1, r0
 800aa28:	9802      	ldr	r0, [sp, #8]
 800aa2a:	f000 fc3f 	bl	800b2ac <__mcmp>
 800aa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa30:	4602      	mov	r2, r0
 800aa32:	4631      	mov	r1, r6
 800aa34:	4648      	mov	r0, r9
 800aa36:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa38:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa3a:	f000 fa05 	bl	800ae48 <_Bfree>
 800aa3e:	9b07      	ldr	r3, [sp, #28]
 800aa40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aa42:	9e00      	ldr	r6, [sp, #0]
 800aa44:	ea42 0103 	orr.w	r1, r2, r3
 800aa48:	9b06      	ldr	r3, [sp, #24]
 800aa4a:	4319      	orrs	r1, r3
 800aa4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa4e:	d10d      	bne.n	800aa6c <_dtoa_r+0xa44>
 800aa50:	2b39      	cmp	r3, #57	@ 0x39
 800aa52:	d027      	beq.n	800aaa4 <_dtoa_r+0xa7c>
 800aa54:	9a04      	ldr	r2, [sp, #16]
 800aa56:	2a00      	cmp	r2, #0
 800aa58:	dd01      	ble.n	800aa5e <_dtoa_r+0xa36>
 800aa5a:	9b03      	ldr	r3, [sp, #12]
 800aa5c:	3331      	adds	r3, #49	@ 0x31
 800aa5e:	f88b 3000 	strb.w	r3, [fp]
 800aa62:	e52e      	b.n	800a4c2 <_dtoa_r+0x49a>
 800aa64:	4628      	mov	r0, r5
 800aa66:	e7b9      	b.n	800a9dc <_dtoa_r+0x9b4>
 800aa68:	2201      	movs	r2, #1
 800aa6a:	e7e2      	b.n	800aa32 <_dtoa_r+0xa0a>
 800aa6c:	9904      	ldr	r1, [sp, #16]
 800aa6e:	2900      	cmp	r1, #0
 800aa70:	db04      	blt.n	800aa7c <_dtoa_r+0xa54>
 800aa72:	9807      	ldr	r0, [sp, #28]
 800aa74:	4301      	orrs	r1, r0
 800aa76:	9806      	ldr	r0, [sp, #24]
 800aa78:	4301      	orrs	r1, r0
 800aa7a:	d120      	bne.n	800aabe <_dtoa_r+0xa96>
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	ddee      	ble.n	800aa5e <_dtoa_r+0xa36>
 800aa80:	9902      	ldr	r1, [sp, #8]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	2201      	movs	r2, #1
 800aa86:	4648      	mov	r0, r9
 800aa88:	f000 fba4 	bl	800b1d4 <__lshift>
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	9002      	str	r0, [sp, #8]
 800aa90:	f000 fc0c 	bl	800b2ac <__mcmp>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	9b00      	ldr	r3, [sp, #0]
 800aa98:	dc02      	bgt.n	800aaa0 <_dtoa_r+0xa78>
 800aa9a:	d1e0      	bne.n	800aa5e <_dtoa_r+0xa36>
 800aa9c:	07da      	lsls	r2, r3, #31
 800aa9e:	d5de      	bpl.n	800aa5e <_dtoa_r+0xa36>
 800aaa0:	2b39      	cmp	r3, #57	@ 0x39
 800aaa2:	d1da      	bne.n	800aa5a <_dtoa_r+0xa32>
 800aaa4:	2339      	movs	r3, #57	@ 0x39
 800aaa6:	f88b 3000 	strb.w	r3, [fp]
 800aaaa:	4633      	mov	r3, r6
 800aaac:	461e      	mov	r6, r3
 800aaae:	3b01      	subs	r3, #1
 800aab0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aab4:	2a39      	cmp	r2, #57	@ 0x39
 800aab6:	d04e      	beq.n	800ab56 <_dtoa_r+0xb2e>
 800aab8:	3201      	adds	r2, #1
 800aaba:	701a      	strb	r2, [r3, #0]
 800aabc:	e501      	b.n	800a4c2 <_dtoa_r+0x49a>
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	dd03      	ble.n	800aaca <_dtoa_r+0xaa2>
 800aac2:	2b39      	cmp	r3, #57	@ 0x39
 800aac4:	d0ee      	beq.n	800aaa4 <_dtoa_r+0xa7c>
 800aac6:	3301      	adds	r3, #1
 800aac8:	e7c9      	b.n	800aa5e <_dtoa_r+0xa36>
 800aaca:	9a00      	ldr	r2, [sp, #0]
 800aacc:	9908      	ldr	r1, [sp, #32]
 800aace:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aad2:	428a      	cmp	r2, r1
 800aad4:	d028      	beq.n	800ab28 <_dtoa_r+0xb00>
 800aad6:	9902      	ldr	r1, [sp, #8]
 800aad8:	2300      	movs	r3, #0
 800aada:	220a      	movs	r2, #10
 800aadc:	4648      	mov	r0, r9
 800aade:	f000 f9d5 	bl	800ae8c <__multadd>
 800aae2:	42af      	cmp	r7, r5
 800aae4:	9002      	str	r0, [sp, #8]
 800aae6:	f04f 0300 	mov.w	r3, #0
 800aaea:	f04f 020a 	mov.w	r2, #10
 800aaee:	4639      	mov	r1, r7
 800aaf0:	4648      	mov	r0, r9
 800aaf2:	d107      	bne.n	800ab04 <_dtoa_r+0xadc>
 800aaf4:	f000 f9ca 	bl	800ae8c <__multadd>
 800aaf8:	4607      	mov	r7, r0
 800aafa:	4605      	mov	r5, r0
 800aafc:	9b00      	ldr	r3, [sp, #0]
 800aafe:	3301      	adds	r3, #1
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	e777      	b.n	800a9f4 <_dtoa_r+0x9cc>
 800ab04:	f000 f9c2 	bl	800ae8c <__multadd>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	220a      	movs	r2, #10
 800ab10:	4648      	mov	r0, r9
 800ab12:	f000 f9bb 	bl	800ae8c <__multadd>
 800ab16:	4605      	mov	r5, r0
 800ab18:	e7f0      	b.n	800aafc <_dtoa_r+0xad4>
 800ab1a:	f1bb 0f00 	cmp.w	fp, #0
 800ab1e:	bfcc      	ite	gt
 800ab20:	465e      	movgt	r6, fp
 800ab22:	2601      	movle	r6, #1
 800ab24:	4456      	add	r6, sl
 800ab26:	2700      	movs	r7, #0
 800ab28:	9902      	ldr	r1, [sp, #8]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	4648      	mov	r0, r9
 800ab30:	f000 fb50 	bl	800b1d4 <__lshift>
 800ab34:	4621      	mov	r1, r4
 800ab36:	9002      	str	r0, [sp, #8]
 800ab38:	f000 fbb8 	bl	800b2ac <__mcmp>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	dcb4      	bgt.n	800aaaa <_dtoa_r+0xa82>
 800ab40:	d102      	bne.n	800ab48 <_dtoa_r+0xb20>
 800ab42:	9b00      	ldr	r3, [sp, #0]
 800ab44:	07db      	lsls	r3, r3, #31
 800ab46:	d4b0      	bmi.n	800aaaa <_dtoa_r+0xa82>
 800ab48:	4633      	mov	r3, r6
 800ab4a:	461e      	mov	r6, r3
 800ab4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab50:	2a30      	cmp	r2, #48	@ 0x30
 800ab52:	d0fa      	beq.n	800ab4a <_dtoa_r+0xb22>
 800ab54:	e4b5      	b.n	800a4c2 <_dtoa_r+0x49a>
 800ab56:	459a      	cmp	sl, r3
 800ab58:	d1a8      	bne.n	800aaac <_dtoa_r+0xa84>
 800ab5a:	2331      	movs	r3, #49	@ 0x31
 800ab5c:	f108 0801 	add.w	r8, r8, #1
 800ab60:	f88a 3000 	strb.w	r3, [sl]
 800ab64:	e4ad      	b.n	800a4c2 <_dtoa_r+0x49a>
 800ab66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800abc4 <_dtoa_r+0xb9c>
 800ab6c:	b11b      	cbz	r3, 800ab76 <_dtoa_r+0xb4e>
 800ab6e:	f10a 0308 	add.w	r3, sl, #8
 800ab72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	4650      	mov	r0, sl
 800ab78:	b017      	add	sp, #92	@ 0x5c
 800ab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7e:	9b07      	ldr	r3, [sp, #28]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	f77f ae2e 	ble.w	800a7e2 <_dtoa_r+0x7ba>
 800ab86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab88:	9308      	str	r3, [sp, #32]
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	e64d      	b.n	800a82a <_dtoa_r+0x802>
 800ab8e:	f1bb 0f00 	cmp.w	fp, #0
 800ab92:	f77f aed9 	ble.w	800a948 <_dtoa_r+0x920>
 800ab96:	4656      	mov	r6, sl
 800ab98:	9802      	ldr	r0, [sp, #8]
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	f7ff f9bb 	bl	8009f16 <quorem>
 800aba0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800aba4:	f806 3b01 	strb.w	r3, [r6], #1
 800aba8:	eba6 020a 	sub.w	r2, r6, sl
 800abac:	4593      	cmp	fp, r2
 800abae:	ddb4      	ble.n	800ab1a <_dtoa_r+0xaf2>
 800abb0:	9902      	ldr	r1, [sp, #8]
 800abb2:	2300      	movs	r3, #0
 800abb4:	220a      	movs	r2, #10
 800abb6:	4648      	mov	r0, r9
 800abb8:	f000 f968 	bl	800ae8c <__multadd>
 800abbc:	9002      	str	r0, [sp, #8]
 800abbe:	e7eb      	b.n	800ab98 <_dtoa_r+0xb70>
 800abc0:	0800df60 	.word	0x0800df60
 800abc4:	0800dee4 	.word	0x0800dee4

0800abc8 <_free_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4605      	mov	r5, r0
 800abcc:	2900      	cmp	r1, #0
 800abce:	d041      	beq.n	800ac54 <_free_r+0x8c>
 800abd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd4:	1f0c      	subs	r4, r1, #4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	bfb8      	it	lt
 800abda:	18e4      	addlt	r4, r4, r3
 800abdc:	f000 f8e8 	bl	800adb0 <__malloc_lock>
 800abe0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac58 <_free_r+0x90>)
 800abe2:	6813      	ldr	r3, [r2, #0]
 800abe4:	b933      	cbnz	r3, 800abf4 <_free_r+0x2c>
 800abe6:	6063      	str	r3, [r4, #4]
 800abe8:	6014      	str	r4, [r2, #0]
 800abea:	4628      	mov	r0, r5
 800abec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abf0:	f000 b8e4 	b.w	800adbc <__malloc_unlock>
 800abf4:	42a3      	cmp	r3, r4
 800abf6:	d908      	bls.n	800ac0a <_free_r+0x42>
 800abf8:	6820      	ldr	r0, [r4, #0]
 800abfa:	1821      	adds	r1, r4, r0
 800abfc:	428b      	cmp	r3, r1
 800abfe:	bf01      	itttt	eq
 800ac00:	6819      	ldreq	r1, [r3, #0]
 800ac02:	685b      	ldreq	r3, [r3, #4]
 800ac04:	1809      	addeq	r1, r1, r0
 800ac06:	6021      	streq	r1, [r4, #0]
 800ac08:	e7ed      	b.n	800abe6 <_free_r+0x1e>
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	b10b      	cbz	r3, 800ac14 <_free_r+0x4c>
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	d9fa      	bls.n	800ac0a <_free_r+0x42>
 800ac14:	6811      	ldr	r1, [r2, #0]
 800ac16:	1850      	adds	r0, r2, r1
 800ac18:	42a0      	cmp	r0, r4
 800ac1a:	d10b      	bne.n	800ac34 <_free_r+0x6c>
 800ac1c:	6820      	ldr	r0, [r4, #0]
 800ac1e:	4401      	add	r1, r0
 800ac20:	1850      	adds	r0, r2, r1
 800ac22:	4283      	cmp	r3, r0
 800ac24:	6011      	str	r1, [r2, #0]
 800ac26:	d1e0      	bne.n	800abea <_free_r+0x22>
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	6053      	str	r3, [r2, #4]
 800ac2e:	4408      	add	r0, r1
 800ac30:	6010      	str	r0, [r2, #0]
 800ac32:	e7da      	b.n	800abea <_free_r+0x22>
 800ac34:	d902      	bls.n	800ac3c <_free_r+0x74>
 800ac36:	230c      	movs	r3, #12
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	e7d6      	b.n	800abea <_free_r+0x22>
 800ac3c:	6820      	ldr	r0, [r4, #0]
 800ac3e:	1821      	adds	r1, r4, r0
 800ac40:	428b      	cmp	r3, r1
 800ac42:	bf04      	itt	eq
 800ac44:	6819      	ldreq	r1, [r3, #0]
 800ac46:	685b      	ldreq	r3, [r3, #4]
 800ac48:	6063      	str	r3, [r4, #4]
 800ac4a:	bf04      	itt	eq
 800ac4c:	1809      	addeq	r1, r1, r0
 800ac4e:	6021      	streq	r1, [r4, #0]
 800ac50:	6054      	str	r4, [r2, #4]
 800ac52:	e7ca      	b.n	800abea <_free_r+0x22>
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	bf00      	nop
 800ac58:	200015d4 	.word	0x200015d4

0800ac5c <malloc>:
 800ac5c:	4b02      	ldr	r3, [pc, #8]	@ (800ac68 <malloc+0xc>)
 800ac5e:	4601      	mov	r1, r0
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	f000 b825 	b.w	800acb0 <_malloc_r>
 800ac66:	bf00      	nop
 800ac68:	20000020 	.word	0x20000020

0800ac6c <sbrk_aligned>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4e0f      	ldr	r6, [pc, #60]	@ (800acac <sbrk_aligned+0x40>)
 800ac70:	460c      	mov	r4, r1
 800ac72:	6831      	ldr	r1, [r6, #0]
 800ac74:	4605      	mov	r5, r0
 800ac76:	b911      	cbnz	r1, 800ac7e <sbrk_aligned+0x12>
 800ac78:	f000 fe3e 	bl	800b8f8 <_sbrk_r>
 800ac7c:	6030      	str	r0, [r6, #0]
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4628      	mov	r0, r5
 800ac82:	f000 fe39 	bl	800b8f8 <_sbrk_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d103      	bne.n	800ac92 <sbrk_aligned+0x26>
 800ac8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ac8e:	4620      	mov	r0, r4
 800ac90:	bd70      	pop	{r4, r5, r6, pc}
 800ac92:	1cc4      	adds	r4, r0, #3
 800ac94:	f024 0403 	bic.w	r4, r4, #3
 800ac98:	42a0      	cmp	r0, r4
 800ac9a:	d0f8      	beq.n	800ac8e <sbrk_aligned+0x22>
 800ac9c:	1a21      	subs	r1, r4, r0
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 fe2a 	bl	800b8f8 <_sbrk_r>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d1f2      	bne.n	800ac8e <sbrk_aligned+0x22>
 800aca8:	e7ef      	b.n	800ac8a <sbrk_aligned+0x1e>
 800acaa:	bf00      	nop
 800acac:	200015d0 	.word	0x200015d0

0800acb0 <_malloc_r>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	1ccd      	adds	r5, r1, #3
 800acb6:	f025 0503 	bic.w	r5, r5, #3
 800acba:	3508      	adds	r5, #8
 800acbc:	2d0c      	cmp	r5, #12
 800acbe:	bf38      	it	cc
 800acc0:	250c      	movcc	r5, #12
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	4606      	mov	r6, r0
 800acc6:	db01      	blt.n	800accc <_malloc_r+0x1c>
 800acc8:	42a9      	cmp	r1, r5
 800acca:	d904      	bls.n	800acd6 <_malloc_r+0x26>
 800accc:	230c      	movs	r3, #12
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	2000      	movs	r0, #0
 800acd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adac <_malloc_r+0xfc>
 800acda:	f000 f869 	bl	800adb0 <__malloc_lock>
 800acde:	f8d8 3000 	ldr.w	r3, [r8]
 800ace2:	461c      	mov	r4, r3
 800ace4:	bb44      	cbnz	r4, 800ad38 <_malloc_r+0x88>
 800ace6:	4629      	mov	r1, r5
 800ace8:	4630      	mov	r0, r6
 800acea:	f7ff ffbf 	bl	800ac6c <sbrk_aligned>
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	4604      	mov	r4, r0
 800acf2:	d158      	bne.n	800ada6 <_malloc_r+0xf6>
 800acf4:	f8d8 4000 	ldr.w	r4, [r8]
 800acf8:	4627      	mov	r7, r4
 800acfa:	2f00      	cmp	r7, #0
 800acfc:	d143      	bne.n	800ad86 <_malloc_r+0xd6>
 800acfe:	2c00      	cmp	r4, #0
 800ad00:	d04b      	beq.n	800ad9a <_malloc_r+0xea>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	4639      	mov	r1, r7
 800ad06:	4630      	mov	r0, r6
 800ad08:	eb04 0903 	add.w	r9, r4, r3
 800ad0c:	f000 fdf4 	bl	800b8f8 <_sbrk_r>
 800ad10:	4581      	cmp	r9, r0
 800ad12:	d142      	bne.n	800ad9a <_malloc_r+0xea>
 800ad14:	6821      	ldr	r1, [r4, #0]
 800ad16:	1a6d      	subs	r5, r5, r1
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ffa6 	bl	800ac6c <sbrk_aligned>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d03a      	beq.n	800ad9a <_malloc_r+0xea>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	442b      	add	r3, r5
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	bb62      	cbnz	r2, 800ad8c <_malloc_r+0xdc>
 800ad32:	f8c8 7000 	str.w	r7, [r8]
 800ad36:	e00f      	b.n	800ad58 <_malloc_r+0xa8>
 800ad38:	6822      	ldr	r2, [r4, #0]
 800ad3a:	1b52      	subs	r2, r2, r5
 800ad3c:	d420      	bmi.n	800ad80 <_malloc_r+0xd0>
 800ad3e:	2a0b      	cmp	r2, #11
 800ad40:	d917      	bls.n	800ad72 <_malloc_r+0xc2>
 800ad42:	1961      	adds	r1, r4, r5
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	6025      	str	r5, [r4, #0]
 800ad48:	bf18      	it	ne
 800ad4a:	6059      	strne	r1, [r3, #4]
 800ad4c:	6863      	ldr	r3, [r4, #4]
 800ad4e:	bf08      	it	eq
 800ad50:	f8c8 1000 	streq.w	r1, [r8]
 800ad54:	5162      	str	r2, [r4, r5]
 800ad56:	604b      	str	r3, [r1, #4]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 f82f 	bl	800adbc <__malloc_unlock>
 800ad5e:	f104 000b 	add.w	r0, r4, #11
 800ad62:	1d23      	adds	r3, r4, #4
 800ad64:	f020 0007 	bic.w	r0, r0, #7
 800ad68:	1ac2      	subs	r2, r0, r3
 800ad6a:	bf1c      	itt	ne
 800ad6c:	1a1b      	subne	r3, r3, r0
 800ad6e:	50a3      	strne	r3, [r4, r2]
 800ad70:	e7af      	b.n	800acd2 <_malloc_r+0x22>
 800ad72:	6862      	ldr	r2, [r4, #4]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	bf0c      	ite	eq
 800ad78:	f8c8 2000 	streq.w	r2, [r8]
 800ad7c:	605a      	strne	r2, [r3, #4]
 800ad7e:	e7eb      	b.n	800ad58 <_malloc_r+0xa8>
 800ad80:	4623      	mov	r3, r4
 800ad82:	6864      	ldr	r4, [r4, #4]
 800ad84:	e7ae      	b.n	800ace4 <_malloc_r+0x34>
 800ad86:	463c      	mov	r4, r7
 800ad88:	687f      	ldr	r7, [r7, #4]
 800ad8a:	e7b6      	b.n	800acfa <_malloc_r+0x4a>
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	d1fb      	bne.n	800ad8c <_malloc_r+0xdc>
 800ad94:	2300      	movs	r3, #0
 800ad96:	6053      	str	r3, [r2, #4]
 800ad98:	e7de      	b.n	800ad58 <_malloc_r+0xa8>
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	6033      	str	r3, [r6, #0]
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 f80c 	bl	800adbc <__malloc_unlock>
 800ada4:	e794      	b.n	800acd0 <_malloc_r+0x20>
 800ada6:	6005      	str	r5, [r0, #0]
 800ada8:	e7d6      	b.n	800ad58 <_malloc_r+0xa8>
 800adaa:	bf00      	nop
 800adac:	200015d4 	.word	0x200015d4

0800adb0 <__malloc_lock>:
 800adb0:	4801      	ldr	r0, [pc, #4]	@ (800adb8 <__malloc_lock+0x8>)
 800adb2:	f7ff b8ae 	b.w	8009f12 <__retarget_lock_acquire_recursive>
 800adb6:	bf00      	nop
 800adb8:	200015cc 	.word	0x200015cc

0800adbc <__malloc_unlock>:
 800adbc:	4801      	ldr	r0, [pc, #4]	@ (800adc4 <__malloc_unlock+0x8>)
 800adbe:	f7ff b8a9 	b.w	8009f14 <__retarget_lock_release_recursive>
 800adc2:	bf00      	nop
 800adc4:	200015cc 	.word	0x200015cc

0800adc8 <_Balloc>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	69c6      	ldr	r6, [r0, #28]
 800adcc:	4604      	mov	r4, r0
 800adce:	460d      	mov	r5, r1
 800add0:	b976      	cbnz	r6, 800adf0 <_Balloc+0x28>
 800add2:	2010      	movs	r0, #16
 800add4:	f7ff ff42 	bl	800ac5c <malloc>
 800add8:	4602      	mov	r2, r0
 800adda:	61e0      	str	r0, [r4, #28]
 800addc:	b920      	cbnz	r0, 800ade8 <_Balloc+0x20>
 800adde:	4b18      	ldr	r3, [pc, #96]	@ (800ae40 <_Balloc+0x78>)
 800ade0:	4818      	ldr	r0, [pc, #96]	@ (800ae44 <_Balloc+0x7c>)
 800ade2:	216b      	movs	r1, #107	@ 0x6b
 800ade4:	f000 fda6 	bl	800b934 <__assert_func>
 800ade8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adec:	6006      	str	r6, [r0, #0]
 800adee:	60c6      	str	r6, [r0, #12]
 800adf0:	69e6      	ldr	r6, [r4, #28]
 800adf2:	68f3      	ldr	r3, [r6, #12]
 800adf4:	b183      	cbz	r3, 800ae18 <_Balloc+0x50>
 800adf6:	69e3      	ldr	r3, [r4, #28]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adfe:	b9b8      	cbnz	r0, 800ae30 <_Balloc+0x68>
 800ae00:	2101      	movs	r1, #1
 800ae02:	fa01 f605 	lsl.w	r6, r1, r5
 800ae06:	1d72      	adds	r2, r6, #5
 800ae08:	0092      	lsls	r2, r2, #2
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fdb0 	bl	800b970 <_calloc_r>
 800ae10:	b160      	cbz	r0, 800ae2c <_Balloc+0x64>
 800ae12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae16:	e00e      	b.n	800ae36 <_Balloc+0x6e>
 800ae18:	2221      	movs	r2, #33	@ 0x21
 800ae1a:	2104      	movs	r1, #4
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 fda7 	bl	800b970 <_calloc_r>
 800ae22:	69e3      	ldr	r3, [r4, #28]
 800ae24:	60f0      	str	r0, [r6, #12]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1e4      	bne.n	800adf6 <_Balloc+0x2e>
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	6802      	ldr	r2, [r0, #0]
 800ae32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae36:	2300      	movs	r3, #0
 800ae38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae3c:	e7f7      	b.n	800ae2e <_Balloc+0x66>
 800ae3e:	bf00      	nop
 800ae40:	0800def1 	.word	0x0800def1
 800ae44:	0800df71 	.word	0x0800df71

0800ae48 <_Bfree>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	69c6      	ldr	r6, [r0, #28]
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	b976      	cbnz	r6, 800ae70 <_Bfree+0x28>
 800ae52:	2010      	movs	r0, #16
 800ae54:	f7ff ff02 	bl	800ac5c <malloc>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	61e8      	str	r0, [r5, #28]
 800ae5c:	b920      	cbnz	r0, 800ae68 <_Bfree+0x20>
 800ae5e:	4b09      	ldr	r3, [pc, #36]	@ (800ae84 <_Bfree+0x3c>)
 800ae60:	4809      	ldr	r0, [pc, #36]	@ (800ae88 <_Bfree+0x40>)
 800ae62:	218f      	movs	r1, #143	@ 0x8f
 800ae64:	f000 fd66 	bl	800b934 <__assert_func>
 800ae68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae6c:	6006      	str	r6, [r0, #0]
 800ae6e:	60c6      	str	r6, [r0, #12]
 800ae70:	b13c      	cbz	r4, 800ae82 <_Bfree+0x3a>
 800ae72:	69eb      	ldr	r3, [r5, #28]
 800ae74:	6862      	ldr	r2, [r4, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae7c:	6021      	str	r1, [r4, #0]
 800ae7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	0800def1 	.word	0x0800def1
 800ae88:	0800df71 	.word	0x0800df71

0800ae8c <__multadd>:
 800ae8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae90:	690d      	ldr	r5, [r1, #16]
 800ae92:	4607      	mov	r7, r0
 800ae94:	460c      	mov	r4, r1
 800ae96:	461e      	mov	r6, r3
 800ae98:	f101 0c14 	add.w	ip, r1, #20
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	f8dc 3000 	ldr.w	r3, [ip]
 800aea2:	b299      	uxth	r1, r3
 800aea4:	fb02 6101 	mla	r1, r2, r1, r6
 800aea8:	0c1e      	lsrs	r6, r3, #16
 800aeaa:	0c0b      	lsrs	r3, r1, #16
 800aeac:	fb02 3306 	mla	r3, r2, r6, r3
 800aeb0:	b289      	uxth	r1, r1
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aeb8:	4285      	cmp	r5, r0
 800aeba:	f84c 1b04 	str.w	r1, [ip], #4
 800aebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aec2:	dcec      	bgt.n	800ae9e <__multadd+0x12>
 800aec4:	b30e      	cbz	r6, 800af0a <__multadd+0x7e>
 800aec6:	68a3      	ldr	r3, [r4, #8]
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	dc19      	bgt.n	800af00 <__multadd+0x74>
 800aecc:	6861      	ldr	r1, [r4, #4]
 800aece:	4638      	mov	r0, r7
 800aed0:	3101      	adds	r1, #1
 800aed2:	f7ff ff79 	bl	800adc8 <_Balloc>
 800aed6:	4680      	mov	r8, r0
 800aed8:	b928      	cbnz	r0, 800aee6 <__multadd+0x5a>
 800aeda:	4602      	mov	r2, r0
 800aedc:	4b0c      	ldr	r3, [pc, #48]	@ (800af10 <__multadd+0x84>)
 800aede:	480d      	ldr	r0, [pc, #52]	@ (800af14 <__multadd+0x88>)
 800aee0:	21ba      	movs	r1, #186	@ 0xba
 800aee2:	f000 fd27 	bl	800b934 <__assert_func>
 800aee6:	6922      	ldr	r2, [r4, #16]
 800aee8:	3202      	adds	r2, #2
 800aeea:	f104 010c 	add.w	r1, r4, #12
 800aeee:	0092      	lsls	r2, r2, #2
 800aef0:	300c      	adds	r0, #12
 800aef2:	f000 fd11 	bl	800b918 <memcpy>
 800aef6:	4621      	mov	r1, r4
 800aef8:	4638      	mov	r0, r7
 800aefa:	f7ff ffa5 	bl	800ae48 <_Bfree>
 800aefe:	4644      	mov	r4, r8
 800af00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af04:	3501      	adds	r5, #1
 800af06:	615e      	str	r6, [r3, #20]
 800af08:	6125      	str	r5, [r4, #16]
 800af0a:	4620      	mov	r0, r4
 800af0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af10:	0800df60 	.word	0x0800df60
 800af14:	0800df71 	.word	0x0800df71

0800af18 <__hi0bits>:
 800af18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af1c:	4603      	mov	r3, r0
 800af1e:	bf36      	itet	cc
 800af20:	0403      	lslcc	r3, r0, #16
 800af22:	2000      	movcs	r0, #0
 800af24:	2010      	movcc	r0, #16
 800af26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af2a:	bf3c      	itt	cc
 800af2c:	021b      	lslcc	r3, r3, #8
 800af2e:	3008      	addcc	r0, #8
 800af30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af34:	bf3c      	itt	cc
 800af36:	011b      	lslcc	r3, r3, #4
 800af38:	3004      	addcc	r0, #4
 800af3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af3e:	bf3c      	itt	cc
 800af40:	009b      	lslcc	r3, r3, #2
 800af42:	3002      	addcc	r0, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	db05      	blt.n	800af54 <__hi0bits+0x3c>
 800af48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af4c:	f100 0001 	add.w	r0, r0, #1
 800af50:	bf08      	it	eq
 800af52:	2020      	moveq	r0, #32
 800af54:	4770      	bx	lr

0800af56 <__lo0bits>:
 800af56:	6803      	ldr	r3, [r0, #0]
 800af58:	4602      	mov	r2, r0
 800af5a:	f013 0007 	ands.w	r0, r3, #7
 800af5e:	d00b      	beq.n	800af78 <__lo0bits+0x22>
 800af60:	07d9      	lsls	r1, r3, #31
 800af62:	d421      	bmi.n	800afa8 <__lo0bits+0x52>
 800af64:	0798      	lsls	r0, r3, #30
 800af66:	bf49      	itett	mi
 800af68:	085b      	lsrmi	r3, r3, #1
 800af6a:	089b      	lsrpl	r3, r3, #2
 800af6c:	2001      	movmi	r0, #1
 800af6e:	6013      	strmi	r3, [r2, #0]
 800af70:	bf5c      	itt	pl
 800af72:	6013      	strpl	r3, [r2, #0]
 800af74:	2002      	movpl	r0, #2
 800af76:	4770      	bx	lr
 800af78:	b299      	uxth	r1, r3
 800af7a:	b909      	cbnz	r1, 800af80 <__lo0bits+0x2a>
 800af7c:	0c1b      	lsrs	r3, r3, #16
 800af7e:	2010      	movs	r0, #16
 800af80:	b2d9      	uxtb	r1, r3
 800af82:	b909      	cbnz	r1, 800af88 <__lo0bits+0x32>
 800af84:	3008      	adds	r0, #8
 800af86:	0a1b      	lsrs	r3, r3, #8
 800af88:	0719      	lsls	r1, r3, #28
 800af8a:	bf04      	itt	eq
 800af8c:	091b      	lsreq	r3, r3, #4
 800af8e:	3004      	addeq	r0, #4
 800af90:	0799      	lsls	r1, r3, #30
 800af92:	bf04      	itt	eq
 800af94:	089b      	lsreq	r3, r3, #2
 800af96:	3002      	addeq	r0, #2
 800af98:	07d9      	lsls	r1, r3, #31
 800af9a:	d403      	bmi.n	800afa4 <__lo0bits+0x4e>
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	f100 0001 	add.w	r0, r0, #1
 800afa2:	d003      	beq.n	800afac <__lo0bits+0x56>
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	4770      	bx	lr
 800afa8:	2000      	movs	r0, #0
 800afaa:	4770      	bx	lr
 800afac:	2020      	movs	r0, #32
 800afae:	4770      	bx	lr

0800afb0 <__i2b>:
 800afb0:	b510      	push	{r4, lr}
 800afb2:	460c      	mov	r4, r1
 800afb4:	2101      	movs	r1, #1
 800afb6:	f7ff ff07 	bl	800adc8 <_Balloc>
 800afba:	4602      	mov	r2, r0
 800afbc:	b928      	cbnz	r0, 800afca <__i2b+0x1a>
 800afbe:	4b05      	ldr	r3, [pc, #20]	@ (800afd4 <__i2b+0x24>)
 800afc0:	4805      	ldr	r0, [pc, #20]	@ (800afd8 <__i2b+0x28>)
 800afc2:	f240 1145 	movw	r1, #325	@ 0x145
 800afc6:	f000 fcb5 	bl	800b934 <__assert_func>
 800afca:	2301      	movs	r3, #1
 800afcc:	6144      	str	r4, [r0, #20]
 800afce:	6103      	str	r3, [r0, #16]
 800afd0:	bd10      	pop	{r4, pc}
 800afd2:	bf00      	nop
 800afd4:	0800df60 	.word	0x0800df60
 800afd8:	0800df71 	.word	0x0800df71

0800afdc <__multiply>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	4617      	mov	r7, r2
 800afe2:	690a      	ldr	r2, [r1, #16]
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	bfa8      	it	ge
 800afea:	463b      	movge	r3, r7
 800afec:	4689      	mov	r9, r1
 800afee:	bfa4      	itt	ge
 800aff0:	460f      	movge	r7, r1
 800aff2:	4699      	movge	r9, r3
 800aff4:	693d      	ldr	r5, [r7, #16]
 800aff6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	eb05 060a 	add.w	r6, r5, sl
 800b002:	42b3      	cmp	r3, r6
 800b004:	b085      	sub	sp, #20
 800b006:	bfb8      	it	lt
 800b008:	3101      	addlt	r1, #1
 800b00a:	f7ff fedd 	bl	800adc8 <_Balloc>
 800b00e:	b930      	cbnz	r0, 800b01e <__multiply+0x42>
 800b010:	4602      	mov	r2, r0
 800b012:	4b41      	ldr	r3, [pc, #260]	@ (800b118 <__multiply+0x13c>)
 800b014:	4841      	ldr	r0, [pc, #260]	@ (800b11c <__multiply+0x140>)
 800b016:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b01a:	f000 fc8b 	bl	800b934 <__assert_func>
 800b01e:	f100 0414 	add.w	r4, r0, #20
 800b022:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b026:	4623      	mov	r3, r4
 800b028:	2200      	movs	r2, #0
 800b02a:	4573      	cmp	r3, lr
 800b02c:	d320      	bcc.n	800b070 <__multiply+0x94>
 800b02e:	f107 0814 	add.w	r8, r7, #20
 800b032:	f109 0114 	add.w	r1, r9, #20
 800b036:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b03a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b03e:	9302      	str	r3, [sp, #8]
 800b040:	1beb      	subs	r3, r5, r7
 800b042:	3b15      	subs	r3, #21
 800b044:	f023 0303 	bic.w	r3, r3, #3
 800b048:	3304      	adds	r3, #4
 800b04a:	3715      	adds	r7, #21
 800b04c:	42bd      	cmp	r5, r7
 800b04e:	bf38      	it	cc
 800b050:	2304      	movcc	r3, #4
 800b052:	9301      	str	r3, [sp, #4]
 800b054:	9b02      	ldr	r3, [sp, #8]
 800b056:	9103      	str	r1, [sp, #12]
 800b058:	428b      	cmp	r3, r1
 800b05a:	d80c      	bhi.n	800b076 <__multiply+0x9a>
 800b05c:	2e00      	cmp	r6, #0
 800b05e:	dd03      	ble.n	800b068 <__multiply+0x8c>
 800b060:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b064:	2b00      	cmp	r3, #0
 800b066:	d055      	beq.n	800b114 <__multiply+0x138>
 800b068:	6106      	str	r6, [r0, #16]
 800b06a:	b005      	add	sp, #20
 800b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b070:	f843 2b04 	str.w	r2, [r3], #4
 800b074:	e7d9      	b.n	800b02a <__multiply+0x4e>
 800b076:	f8b1 a000 	ldrh.w	sl, [r1]
 800b07a:	f1ba 0f00 	cmp.w	sl, #0
 800b07e:	d01f      	beq.n	800b0c0 <__multiply+0xe4>
 800b080:	46c4      	mov	ip, r8
 800b082:	46a1      	mov	r9, r4
 800b084:	2700      	movs	r7, #0
 800b086:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b08a:	f8d9 3000 	ldr.w	r3, [r9]
 800b08e:	fa1f fb82 	uxth.w	fp, r2
 800b092:	b29b      	uxth	r3, r3
 800b094:	fb0a 330b 	mla	r3, sl, fp, r3
 800b098:	443b      	add	r3, r7
 800b09a:	f8d9 7000 	ldr.w	r7, [r9]
 800b09e:	0c12      	lsrs	r2, r2, #16
 800b0a0:	0c3f      	lsrs	r7, r7, #16
 800b0a2:	fb0a 7202 	mla	r2, sl, r2, r7
 800b0a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0b0:	4565      	cmp	r5, ip
 800b0b2:	f849 3b04 	str.w	r3, [r9], #4
 800b0b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b0ba:	d8e4      	bhi.n	800b086 <__multiply+0xaa>
 800b0bc:	9b01      	ldr	r3, [sp, #4]
 800b0be:	50e7      	str	r7, [r4, r3]
 800b0c0:	9b03      	ldr	r3, [sp, #12]
 800b0c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b0c6:	3104      	adds	r1, #4
 800b0c8:	f1b9 0f00 	cmp.w	r9, #0
 800b0cc:	d020      	beq.n	800b110 <__multiply+0x134>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	4647      	mov	r7, r8
 800b0d2:	46a4      	mov	ip, r4
 800b0d4:	f04f 0a00 	mov.w	sl, #0
 800b0d8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b0dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b0e0:	fb09 220b 	mla	r2, r9, fp, r2
 800b0e4:	4452      	add	r2, sl
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ec:	f84c 3b04 	str.w	r3, [ip], #4
 800b0f0:	f857 3b04 	ldr.w	r3, [r7], #4
 800b0f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0f8:	f8bc 3000 	ldrh.w	r3, [ip]
 800b0fc:	fb09 330a 	mla	r3, r9, sl, r3
 800b100:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b104:	42bd      	cmp	r5, r7
 800b106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b10a:	d8e5      	bhi.n	800b0d8 <__multiply+0xfc>
 800b10c:	9a01      	ldr	r2, [sp, #4]
 800b10e:	50a3      	str	r3, [r4, r2]
 800b110:	3404      	adds	r4, #4
 800b112:	e79f      	b.n	800b054 <__multiply+0x78>
 800b114:	3e01      	subs	r6, #1
 800b116:	e7a1      	b.n	800b05c <__multiply+0x80>
 800b118:	0800df60 	.word	0x0800df60
 800b11c:	0800df71 	.word	0x0800df71

0800b120 <__pow5mult>:
 800b120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b124:	4615      	mov	r5, r2
 800b126:	f012 0203 	ands.w	r2, r2, #3
 800b12a:	4607      	mov	r7, r0
 800b12c:	460e      	mov	r6, r1
 800b12e:	d007      	beq.n	800b140 <__pow5mult+0x20>
 800b130:	4c25      	ldr	r4, [pc, #148]	@ (800b1c8 <__pow5mult+0xa8>)
 800b132:	3a01      	subs	r2, #1
 800b134:	2300      	movs	r3, #0
 800b136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b13a:	f7ff fea7 	bl	800ae8c <__multadd>
 800b13e:	4606      	mov	r6, r0
 800b140:	10ad      	asrs	r5, r5, #2
 800b142:	d03d      	beq.n	800b1c0 <__pow5mult+0xa0>
 800b144:	69fc      	ldr	r4, [r7, #28]
 800b146:	b97c      	cbnz	r4, 800b168 <__pow5mult+0x48>
 800b148:	2010      	movs	r0, #16
 800b14a:	f7ff fd87 	bl	800ac5c <malloc>
 800b14e:	4602      	mov	r2, r0
 800b150:	61f8      	str	r0, [r7, #28]
 800b152:	b928      	cbnz	r0, 800b160 <__pow5mult+0x40>
 800b154:	4b1d      	ldr	r3, [pc, #116]	@ (800b1cc <__pow5mult+0xac>)
 800b156:	481e      	ldr	r0, [pc, #120]	@ (800b1d0 <__pow5mult+0xb0>)
 800b158:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b15c:	f000 fbea 	bl	800b934 <__assert_func>
 800b160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b164:	6004      	str	r4, [r0, #0]
 800b166:	60c4      	str	r4, [r0, #12]
 800b168:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b16c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b170:	b94c      	cbnz	r4, 800b186 <__pow5mult+0x66>
 800b172:	f240 2171 	movw	r1, #625	@ 0x271
 800b176:	4638      	mov	r0, r7
 800b178:	f7ff ff1a 	bl	800afb0 <__i2b>
 800b17c:	2300      	movs	r3, #0
 800b17e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b182:	4604      	mov	r4, r0
 800b184:	6003      	str	r3, [r0, #0]
 800b186:	f04f 0900 	mov.w	r9, #0
 800b18a:	07eb      	lsls	r3, r5, #31
 800b18c:	d50a      	bpl.n	800b1a4 <__pow5mult+0x84>
 800b18e:	4631      	mov	r1, r6
 800b190:	4622      	mov	r2, r4
 800b192:	4638      	mov	r0, r7
 800b194:	f7ff ff22 	bl	800afdc <__multiply>
 800b198:	4631      	mov	r1, r6
 800b19a:	4680      	mov	r8, r0
 800b19c:	4638      	mov	r0, r7
 800b19e:	f7ff fe53 	bl	800ae48 <_Bfree>
 800b1a2:	4646      	mov	r6, r8
 800b1a4:	106d      	asrs	r5, r5, #1
 800b1a6:	d00b      	beq.n	800b1c0 <__pow5mult+0xa0>
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	b938      	cbnz	r0, 800b1bc <__pow5mult+0x9c>
 800b1ac:	4622      	mov	r2, r4
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	f7ff ff13 	bl	800afdc <__multiply>
 800b1b6:	6020      	str	r0, [r4, #0]
 800b1b8:	f8c0 9000 	str.w	r9, [r0]
 800b1bc:	4604      	mov	r4, r0
 800b1be:	e7e4      	b.n	800b18a <__pow5mult+0x6a>
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1c6:	bf00      	nop
 800b1c8:	0800e024 	.word	0x0800e024
 800b1cc:	0800def1 	.word	0x0800def1
 800b1d0:	0800df71 	.word	0x0800df71

0800b1d4 <__lshift>:
 800b1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	460c      	mov	r4, r1
 800b1da:	6849      	ldr	r1, [r1, #4]
 800b1dc:	6923      	ldr	r3, [r4, #16]
 800b1de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	4691      	mov	r9, r2
 800b1e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1ec:	f108 0601 	add.w	r6, r8, #1
 800b1f0:	42b3      	cmp	r3, r6
 800b1f2:	db0b      	blt.n	800b20c <__lshift+0x38>
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f7ff fde7 	bl	800adc8 <_Balloc>
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	b948      	cbnz	r0, 800b212 <__lshift+0x3e>
 800b1fe:	4602      	mov	r2, r0
 800b200:	4b28      	ldr	r3, [pc, #160]	@ (800b2a4 <__lshift+0xd0>)
 800b202:	4829      	ldr	r0, [pc, #164]	@ (800b2a8 <__lshift+0xd4>)
 800b204:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b208:	f000 fb94 	bl	800b934 <__assert_func>
 800b20c:	3101      	adds	r1, #1
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	e7ee      	b.n	800b1f0 <__lshift+0x1c>
 800b212:	2300      	movs	r3, #0
 800b214:	f100 0114 	add.w	r1, r0, #20
 800b218:	f100 0210 	add.w	r2, r0, #16
 800b21c:	4618      	mov	r0, r3
 800b21e:	4553      	cmp	r3, sl
 800b220:	db33      	blt.n	800b28a <__lshift+0xb6>
 800b222:	6920      	ldr	r0, [r4, #16]
 800b224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b228:	f104 0314 	add.w	r3, r4, #20
 800b22c:	f019 091f 	ands.w	r9, r9, #31
 800b230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b238:	d02b      	beq.n	800b292 <__lshift+0xbe>
 800b23a:	f1c9 0e20 	rsb	lr, r9, #32
 800b23e:	468a      	mov	sl, r1
 800b240:	2200      	movs	r2, #0
 800b242:	6818      	ldr	r0, [r3, #0]
 800b244:	fa00 f009 	lsl.w	r0, r0, r9
 800b248:	4310      	orrs	r0, r2
 800b24a:	f84a 0b04 	str.w	r0, [sl], #4
 800b24e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b252:	459c      	cmp	ip, r3
 800b254:	fa22 f20e 	lsr.w	r2, r2, lr
 800b258:	d8f3      	bhi.n	800b242 <__lshift+0x6e>
 800b25a:	ebac 0304 	sub.w	r3, ip, r4
 800b25e:	3b15      	subs	r3, #21
 800b260:	f023 0303 	bic.w	r3, r3, #3
 800b264:	3304      	adds	r3, #4
 800b266:	f104 0015 	add.w	r0, r4, #21
 800b26a:	4560      	cmp	r0, ip
 800b26c:	bf88      	it	hi
 800b26e:	2304      	movhi	r3, #4
 800b270:	50ca      	str	r2, [r1, r3]
 800b272:	b10a      	cbz	r2, 800b278 <__lshift+0xa4>
 800b274:	f108 0602 	add.w	r6, r8, #2
 800b278:	3e01      	subs	r6, #1
 800b27a:	4638      	mov	r0, r7
 800b27c:	612e      	str	r6, [r5, #16]
 800b27e:	4621      	mov	r1, r4
 800b280:	f7ff fde2 	bl	800ae48 <_Bfree>
 800b284:	4628      	mov	r0, r5
 800b286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b28e:	3301      	adds	r3, #1
 800b290:	e7c5      	b.n	800b21e <__lshift+0x4a>
 800b292:	3904      	subs	r1, #4
 800b294:	f853 2b04 	ldr.w	r2, [r3], #4
 800b298:	f841 2f04 	str.w	r2, [r1, #4]!
 800b29c:	459c      	cmp	ip, r3
 800b29e:	d8f9      	bhi.n	800b294 <__lshift+0xc0>
 800b2a0:	e7ea      	b.n	800b278 <__lshift+0xa4>
 800b2a2:	bf00      	nop
 800b2a4:	0800df60 	.word	0x0800df60
 800b2a8:	0800df71 	.word	0x0800df71

0800b2ac <__mcmp>:
 800b2ac:	690a      	ldr	r2, [r1, #16]
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	6900      	ldr	r0, [r0, #16]
 800b2b2:	1a80      	subs	r0, r0, r2
 800b2b4:	b530      	push	{r4, r5, lr}
 800b2b6:	d10e      	bne.n	800b2d6 <__mcmp+0x2a>
 800b2b8:	3314      	adds	r3, #20
 800b2ba:	3114      	adds	r1, #20
 800b2bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b2c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b2c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2cc:	4295      	cmp	r5, r2
 800b2ce:	d003      	beq.n	800b2d8 <__mcmp+0x2c>
 800b2d0:	d205      	bcs.n	800b2de <__mcmp+0x32>
 800b2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	d3f3      	bcc.n	800b2c4 <__mcmp+0x18>
 800b2dc:	e7fb      	b.n	800b2d6 <__mcmp+0x2a>
 800b2de:	2001      	movs	r0, #1
 800b2e0:	e7f9      	b.n	800b2d6 <__mcmp+0x2a>
	...

0800b2e4 <__mdiff>:
 800b2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	4689      	mov	r9, r1
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4648      	mov	r0, r9
 800b2f0:	4614      	mov	r4, r2
 800b2f2:	f7ff ffdb 	bl	800b2ac <__mcmp>
 800b2f6:	1e05      	subs	r5, r0, #0
 800b2f8:	d112      	bne.n	800b320 <__mdiff+0x3c>
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f7ff fd63 	bl	800adc8 <_Balloc>
 800b302:	4602      	mov	r2, r0
 800b304:	b928      	cbnz	r0, 800b312 <__mdiff+0x2e>
 800b306:	4b3f      	ldr	r3, [pc, #252]	@ (800b404 <__mdiff+0x120>)
 800b308:	f240 2137 	movw	r1, #567	@ 0x237
 800b30c:	483e      	ldr	r0, [pc, #248]	@ (800b408 <__mdiff+0x124>)
 800b30e:	f000 fb11 	bl	800b934 <__assert_func>
 800b312:	2301      	movs	r3, #1
 800b314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b318:	4610      	mov	r0, r2
 800b31a:	b003      	add	sp, #12
 800b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b320:	bfbc      	itt	lt
 800b322:	464b      	movlt	r3, r9
 800b324:	46a1      	movlt	r9, r4
 800b326:	4630      	mov	r0, r6
 800b328:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b32c:	bfba      	itte	lt
 800b32e:	461c      	movlt	r4, r3
 800b330:	2501      	movlt	r5, #1
 800b332:	2500      	movge	r5, #0
 800b334:	f7ff fd48 	bl	800adc8 <_Balloc>
 800b338:	4602      	mov	r2, r0
 800b33a:	b918      	cbnz	r0, 800b344 <__mdiff+0x60>
 800b33c:	4b31      	ldr	r3, [pc, #196]	@ (800b404 <__mdiff+0x120>)
 800b33e:	f240 2145 	movw	r1, #581	@ 0x245
 800b342:	e7e3      	b.n	800b30c <__mdiff+0x28>
 800b344:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b348:	6926      	ldr	r6, [r4, #16]
 800b34a:	60c5      	str	r5, [r0, #12]
 800b34c:	f109 0310 	add.w	r3, r9, #16
 800b350:	f109 0514 	add.w	r5, r9, #20
 800b354:	f104 0e14 	add.w	lr, r4, #20
 800b358:	f100 0b14 	add.w	fp, r0, #20
 800b35c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b360:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	46d9      	mov	r9, fp
 800b368:	f04f 0c00 	mov.w	ip, #0
 800b36c:	9b01      	ldr	r3, [sp, #4]
 800b36e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b372:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	fa1f f38a 	uxth.w	r3, sl
 800b37c:	4619      	mov	r1, r3
 800b37e:	b283      	uxth	r3, r0
 800b380:	1acb      	subs	r3, r1, r3
 800b382:	0c00      	lsrs	r0, r0, #16
 800b384:	4463      	add	r3, ip
 800b386:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b38a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b38e:	b29b      	uxth	r3, r3
 800b390:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b394:	4576      	cmp	r6, lr
 800b396:	f849 3b04 	str.w	r3, [r9], #4
 800b39a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b39e:	d8e5      	bhi.n	800b36c <__mdiff+0x88>
 800b3a0:	1b33      	subs	r3, r6, r4
 800b3a2:	3b15      	subs	r3, #21
 800b3a4:	f023 0303 	bic.w	r3, r3, #3
 800b3a8:	3415      	adds	r4, #21
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	42a6      	cmp	r6, r4
 800b3ae:	bf38      	it	cc
 800b3b0:	2304      	movcc	r3, #4
 800b3b2:	441d      	add	r5, r3
 800b3b4:	445b      	add	r3, fp
 800b3b6:	461e      	mov	r6, r3
 800b3b8:	462c      	mov	r4, r5
 800b3ba:	4544      	cmp	r4, r8
 800b3bc:	d30e      	bcc.n	800b3dc <__mdiff+0xf8>
 800b3be:	f108 0103 	add.w	r1, r8, #3
 800b3c2:	1b49      	subs	r1, r1, r5
 800b3c4:	f021 0103 	bic.w	r1, r1, #3
 800b3c8:	3d03      	subs	r5, #3
 800b3ca:	45a8      	cmp	r8, r5
 800b3cc:	bf38      	it	cc
 800b3ce:	2100      	movcc	r1, #0
 800b3d0:	440b      	add	r3, r1
 800b3d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3d6:	b191      	cbz	r1, 800b3fe <__mdiff+0x11a>
 800b3d8:	6117      	str	r7, [r2, #16]
 800b3da:	e79d      	b.n	800b318 <__mdiff+0x34>
 800b3dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800b3e0:	46e6      	mov	lr, ip
 800b3e2:	0c08      	lsrs	r0, r1, #16
 800b3e4:	fa1c fc81 	uxtah	ip, ip, r1
 800b3e8:	4471      	add	r1, lr
 800b3ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b3ee:	b289      	uxth	r1, r1
 800b3f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b3f4:	f846 1b04 	str.w	r1, [r6], #4
 800b3f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3fc:	e7dd      	b.n	800b3ba <__mdiff+0xd6>
 800b3fe:	3f01      	subs	r7, #1
 800b400:	e7e7      	b.n	800b3d2 <__mdiff+0xee>
 800b402:	bf00      	nop
 800b404:	0800df60 	.word	0x0800df60
 800b408:	0800df71 	.word	0x0800df71

0800b40c <__d2b>:
 800b40c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b410:	460f      	mov	r7, r1
 800b412:	2101      	movs	r1, #1
 800b414:	ec59 8b10 	vmov	r8, r9, d0
 800b418:	4616      	mov	r6, r2
 800b41a:	f7ff fcd5 	bl	800adc8 <_Balloc>
 800b41e:	4604      	mov	r4, r0
 800b420:	b930      	cbnz	r0, 800b430 <__d2b+0x24>
 800b422:	4602      	mov	r2, r0
 800b424:	4b23      	ldr	r3, [pc, #140]	@ (800b4b4 <__d2b+0xa8>)
 800b426:	4824      	ldr	r0, [pc, #144]	@ (800b4b8 <__d2b+0xac>)
 800b428:	f240 310f 	movw	r1, #783	@ 0x30f
 800b42c:	f000 fa82 	bl	800b934 <__assert_func>
 800b430:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b438:	b10d      	cbz	r5, 800b43e <__d2b+0x32>
 800b43a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	f1b8 0300 	subs.w	r3, r8, #0
 800b444:	d023      	beq.n	800b48e <__d2b+0x82>
 800b446:	4668      	mov	r0, sp
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	f7ff fd84 	bl	800af56 <__lo0bits>
 800b44e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b452:	b1d0      	cbz	r0, 800b48a <__d2b+0x7e>
 800b454:	f1c0 0320 	rsb	r3, r0, #32
 800b458:	fa02 f303 	lsl.w	r3, r2, r3
 800b45c:	430b      	orrs	r3, r1
 800b45e:	40c2      	lsrs	r2, r0
 800b460:	6163      	str	r3, [r4, #20]
 800b462:	9201      	str	r2, [sp, #4]
 800b464:	9b01      	ldr	r3, [sp, #4]
 800b466:	61a3      	str	r3, [r4, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	bf0c      	ite	eq
 800b46c:	2201      	moveq	r2, #1
 800b46e:	2202      	movne	r2, #2
 800b470:	6122      	str	r2, [r4, #16]
 800b472:	b1a5      	cbz	r5, 800b49e <__d2b+0x92>
 800b474:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b478:	4405      	add	r5, r0
 800b47a:	603d      	str	r5, [r7, #0]
 800b47c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b480:	6030      	str	r0, [r6, #0]
 800b482:	4620      	mov	r0, r4
 800b484:	b003      	add	sp, #12
 800b486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b48a:	6161      	str	r1, [r4, #20]
 800b48c:	e7ea      	b.n	800b464 <__d2b+0x58>
 800b48e:	a801      	add	r0, sp, #4
 800b490:	f7ff fd61 	bl	800af56 <__lo0bits>
 800b494:	9b01      	ldr	r3, [sp, #4]
 800b496:	6163      	str	r3, [r4, #20]
 800b498:	3020      	adds	r0, #32
 800b49a:	2201      	movs	r2, #1
 800b49c:	e7e8      	b.n	800b470 <__d2b+0x64>
 800b49e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4a6:	6038      	str	r0, [r7, #0]
 800b4a8:	6918      	ldr	r0, [r3, #16]
 800b4aa:	f7ff fd35 	bl	800af18 <__hi0bits>
 800b4ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4b2:	e7e5      	b.n	800b480 <__d2b+0x74>
 800b4b4:	0800df60 	.word	0x0800df60
 800b4b8:	0800df71 	.word	0x0800df71

0800b4bc <__ssputs_r>:
 800b4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c0:	688e      	ldr	r6, [r1, #8]
 800b4c2:	461f      	mov	r7, r3
 800b4c4:	42be      	cmp	r6, r7
 800b4c6:	680b      	ldr	r3, [r1, #0]
 800b4c8:	4682      	mov	sl, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	4690      	mov	r8, r2
 800b4ce:	d82d      	bhi.n	800b52c <__ssputs_r+0x70>
 800b4d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4d8:	d026      	beq.n	800b528 <__ssputs_r+0x6c>
 800b4da:	6965      	ldr	r5, [r4, #20]
 800b4dc:	6909      	ldr	r1, [r1, #16]
 800b4de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4e2:	eba3 0901 	sub.w	r9, r3, r1
 800b4e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4ea:	1c7b      	adds	r3, r7, #1
 800b4ec:	444b      	add	r3, r9
 800b4ee:	106d      	asrs	r5, r5, #1
 800b4f0:	429d      	cmp	r5, r3
 800b4f2:	bf38      	it	cc
 800b4f4:	461d      	movcc	r5, r3
 800b4f6:	0553      	lsls	r3, r2, #21
 800b4f8:	d527      	bpl.n	800b54a <__ssputs_r+0x8e>
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	f7ff fbd8 	bl	800acb0 <_malloc_r>
 800b500:	4606      	mov	r6, r0
 800b502:	b360      	cbz	r0, 800b55e <__ssputs_r+0xa2>
 800b504:	6921      	ldr	r1, [r4, #16]
 800b506:	464a      	mov	r2, r9
 800b508:	f000 fa06 	bl	800b918 <memcpy>
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b516:	81a3      	strh	r3, [r4, #12]
 800b518:	6126      	str	r6, [r4, #16]
 800b51a:	6165      	str	r5, [r4, #20]
 800b51c:	444e      	add	r6, r9
 800b51e:	eba5 0509 	sub.w	r5, r5, r9
 800b522:	6026      	str	r6, [r4, #0]
 800b524:	60a5      	str	r5, [r4, #8]
 800b526:	463e      	mov	r6, r7
 800b528:	42be      	cmp	r6, r7
 800b52a:	d900      	bls.n	800b52e <__ssputs_r+0x72>
 800b52c:	463e      	mov	r6, r7
 800b52e:	6820      	ldr	r0, [r4, #0]
 800b530:	4632      	mov	r2, r6
 800b532:	4641      	mov	r1, r8
 800b534:	f000 f9c6 	bl	800b8c4 <memmove>
 800b538:	68a3      	ldr	r3, [r4, #8]
 800b53a:	1b9b      	subs	r3, r3, r6
 800b53c:	60a3      	str	r3, [r4, #8]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	4433      	add	r3, r6
 800b542:	6023      	str	r3, [r4, #0]
 800b544:	2000      	movs	r0, #0
 800b546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54a:	462a      	mov	r2, r5
 800b54c:	f000 fa36 	bl	800b9bc <_realloc_r>
 800b550:	4606      	mov	r6, r0
 800b552:	2800      	cmp	r0, #0
 800b554:	d1e0      	bne.n	800b518 <__ssputs_r+0x5c>
 800b556:	6921      	ldr	r1, [r4, #16]
 800b558:	4650      	mov	r0, sl
 800b55a:	f7ff fb35 	bl	800abc8 <_free_r>
 800b55e:	230c      	movs	r3, #12
 800b560:	f8ca 3000 	str.w	r3, [sl]
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b56a:	81a3      	strh	r3, [r4, #12]
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	e7e9      	b.n	800b546 <__ssputs_r+0x8a>
	...

0800b574 <_svfiprintf_r>:
 800b574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b578:	4698      	mov	r8, r3
 800b57a:	898b      	ldrh	r3, [r1, #12]
 800b57c:	061b      	lsls	r3, r3, #24
 800b57e:	b09d      	sub	sp, #116	@ 0x74
 800b580:	4607      	mov	r7, r0
 800b582:	460d      	mov	r5, r1
 800b584:	4614      	mov	r4, r2
 800b586:	d510      	bpl.n	800b5aa <_svfiprintf_r+0x36>
 800b588:	690b      	ldr	r3, [r1, #16]
 800b58a:	b973      	cbnz	r3, 800b5aa <_svfiprintf_r+0x36>
 800b58c:	2140      	movs	r1, #64	@ 0x40
 800b58e:	f7ff fb8f 	bl	800acb0 <_malloc_r>
 800b592:	6028      	str	r0, [r5, #0]
 800b594:	6128      	str	r0, [r5, #16]
 800b596:	b930      	cbnz	r0, 800b5a6 <_svfiprintf_r+0x32>
 800b598:	230c      	movs	r3, #12
 800b59a:	603b      	str	r3, [r7, #0]
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a0:	b01d      	add	sp, #116	@ 0x74
 800b5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a6:	2340      	movs	r3, #64	@ 0x40
 800b5a8:	616b      	str	r3, [r5, #20]
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ae:	2320      	movs	r3, #32
 800b5b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5b8:	2330      	movs	r3, #48	@ 0x30
 800b5ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b758 <_svfiprintf_r+0x1e4>
 800b5be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5c2:	f04f 0901 	mov.w	r9, #1
 800b5c6:	4623      	mov	r3, r4
 800b5c8:	469a      	mov	sl, r3
 800b5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ce:	b10a      	cbz	r2, 800b5d4 <_svfiprintf_r+0x60>
 800b5d0:	2a25      	cmp	r2, #37	@ 0x25
 800b5d2:	d1f9      	bne.n	800b5c8 <_svfiprintf_r+0x54>
 800b5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d8:	d00b      	beq.n	800b5f2 <_svfiprintf_r+0x7e>
 800b5da:	465b      	mov	r3, fp
 800b5dc:	4622      	mov	r2, r4
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff ff6b 	bl	800b4bc <__ssputs_r>
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	f000 80a7 	beq.w	800b73a <_svfiprintf_r+0x1c6>
 800b5ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5ee:	445a      	add	r2, fp
 800b5f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 809f 	beq.w	800b73a <_svfiprintf_r+0x1c6>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b606:	f10a 0a01 	add.w	sl, sl, #1
 800b60a:	9304      	str	r3, [sp, #16]
 800b60c:	9307      	str	r3, [sp, #28]
 800b60e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b612:	931a      	str	r3, [sp, #104]	@ 0x68
 800b614:	4654      	mov	r4, sl
 800b616:	2205      	movs	r2, #5
 800b618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b61c:	484e      	ldr	r0, [pc, #312]	@ (800b758 <_svfiprintf_r+0x1e4>)
 800b61e:	f7f4 fddf 	bl	80001e0 <memchr>
 800b622:	9a04      	ldr	r2, [sp, #16]
 800b624:	b9d8      	cbnz	r0, 800b65e <_svfiprintf_r+0xea>
 800b626:	06d0      	lsls	r0, r2, #27
 800b628:	bf44      	itt	mi
 800b62a:	2320      	movmi	r3, #32
 800b62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b630:	0711      	lsls	r1, r2, #28
 800b632:	bf44      	itt	mi
 800b634:	232b      	movmi	r3, #43	@ 0x2b
 800b636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b63a:	f89a 3000 	ldrb.w	r3, [sl]
 800b63e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b640:	d015      	beq.n	800b66e <_svfiprintf_r+0xfa>
 800b642:	9a07      	ldr	r2, [sp, #28]
 800b644:	4654      	mov	r4, sl
 800b646:	2000      	movs	r0, #0
 800b648:	f04f 0c0a 	mov.w	ip, #10
 800b64c:	4621      	mov	r1, r4
 800b64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b652:	3b30      	subs	r3, #48	@ 0x30
 800b654:	2b09      	cmp	r3, #9
 800b656:	d94b      	bls.n	800b6f0 <_svfiprintf_r+0x17c>
 800b658:	b1b0      	cbz	r0, 800b688 <_svfiprintf_r+0x114>
 800b65a:	9207      	str	r2, [sp, #28]
 800b65c:	e014      	b.n	800b688 <_svfiprintf_r+0x114>
 800b65e:	eba0 0308 	sub.w	r3, r0, r8
 800b662:	fa09 f303 	lsl.w	r3, r9, r3
 800b666:	4313      	orrs	r3, r2
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	46a2      	mov	sl, r4
 800b66c:	e7d2      	b.n	800b614 <_svfiprintf_r+0xa0>
 800b66e:	9b03      	ldr	r3, [sp, #12]
 800b670:	1d19      	adds	r1, r3, #4
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	9103      	str	r1, [sp, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	bfbb      	ittet	lt
 800b67a:	425b      	neglt	r3, r3
 800b67c:	f042 0202 	orrlt.w	r2, r2, #2
 800b680:	9307      	strge	r3, [sp, #28]
 800b682:	9307      	strlt	r3, [sp, #28]
 800b684:	bfb8      	it	lt
 800b686:	9204      	strlt	r2, [sp, #16]
 800b688:	7823      	ldrb	r3, [r4, #0]
 800b68a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b68c:	d10a      	bne.n	800b6a4 <_svfiprintf_r+0x130>
 800b68e:	7863      	ldrb	r3, [r4, #1]
 800b690:	2b2a      	cmp	r3, #42	@ 0x2a
 800b692:	d132      	bne.n	800b6fa <_svfiprintf_r+0x186>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	9203      	str	r2, [sp, #12]
 800b69c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6a0:	3402      	adds	r4, #2
 800b6a2:	9305      	str	r3, [sp, #20]
 800b6a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b768 <_svfiprintf_r+0x1f4>
 800b6a8:	7821      	ldrb	r1, [r4, #0]
 800b6aa:	2203      	movs	r2, #3
 800b6ac:	4650      	mov	r0, sl
 800b6ae:	f7f4 fd97 	bl	80001e0 <memchr>
 800b6b2:	b138      	cbz	r0, 800b6c4 <_svfiprintf_r+0x150>
 800b6b4:	9b04      	ldr	r3, [sp, #16]
 800b6b6:	eba0 000a 	sub.w	r0, r0, sl
 800b6ba:	2240      	movs	r2, #64	@ 0x40
 800b6bc:	4082      	lsls	r2, r0
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	3401      	adds	r4, #1
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c8:	4824      	ldr	r0, [pc, #144]	@ (800b75c <_svfiprintf_r+0x1e8>)
 800b6ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6ce:	2206      	movs	r2, #6
 800b6d0:	f7f4 fd86 	bl	80001e0 <memchr>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d036      	beq.n	800b746 <_svfiprintf_r+0x1d2>
 800b6d8:	4b21      	ldr	r3, [pc, #132]	@ (800b760 <_svfiprintf_r+0x1ec>)
 800b6da:	bb1b      	cbnz	r3, 800b724 <_svfiprintf_r+0x1b0>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	3307      	adds	r3, #7
 800b6e0:	f023 0307 	bic.w	r3, r3, #7
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	9303      	str	r3, [sp, #12]
 800b6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ea:	4433      	add	r3, r6
 800b6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ee:	e76a      	b.n	800b5c6 <_svfiprintf_r+0x52>
 800b6f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	e7a8      	b.n	800b64c <_svfiprintf_r+0xd8>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	3401      	adds	r4, #1
 800b6fe:	9305      	str	r3, [sp, #20]
 800b700:	4619      	mov	r1, r3
 800b702:	f04f 0c0a 	mov.w	ip, #10
 800b706:	4620      	mov	r0, r4
 800b708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b70c:	3a30      	subs	r2, #48	@ 0x30
 800b70e:	2a09      	cmp	r2, #9
 800b710:	d903      	bls.n	800b71a <_svfiprintf_r+0x1a6>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0c6      	beq.n	800b6a4 <_svfiprintf_r+0x130>
 800b716:	9105      	str	r1, [sp, #20]
 800b718:	e7c4      	b.n	800b6a4 <_svfiprintf_r+0x130>
 800b71a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b71e:	4604      	mov	r4, r0
 800b720:	2301      	movs	r3, #1
 800b722:	e7f0      	b.n	800b706 <_svfiprintf_r+0x192>
 800b724:	ab03      	add	r3, sp, #12
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	462a      	mov	r2, r5
 800b72a:	4b0e      	ldr	r3, [pc, #56]	@ (800b764 <_svfiprintf_r+0x1f0>)
 800b72c:	a904      	add	r1, sp, #16
 800b72e:	4638      	mov	r0, r7
 800b730:	f7fd fe7a 	bl	8009428 <_printf_float>
 800b734:	1c42      	adds	r2, r0, #1
 800b736:	4606      	mov	r6, r0
 800b738:	d1d6      	bne.n	800b6e8 <_svfiprintf_r+0x174>
 800b73a:	89ab      	ldrh	r3, [r5, #12]
 800b73c:	065b      	lsls	r3, r3, #25
 800b73e:	f53f af2d 	bmi.w	800b59c <_svfiprintf_r+0x28>
 800b742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b744:	e72c      	b.n	800b5a0 <_svfiprintf_r+0x2c>
 800b746:	ab03      	add	r3, sp, #12
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	462a      	mov	r2, r5
 800b74c:	4b05      	ldr	r3, [pc, #20]	@ (800b764 <_svfiprintf_r+0x1f0>)
 800b74e:	a904      	add	r1, sp, #16
 800b750:	4638      	mov	r0, r7
 800b752:	f7fe f901 	bl	8009958 <_printf_i>
 800b756:	e7ed      	b.n	800b734 <_svfiprintf_r+0x1c0>
 800b758:	0800dfca 	.word	0x0800dfca
 800b75c:	0800dfd4 	.word	0x0800dfd4
 800b760:	08009429 	.word	0x08009429
 800b764:	0800b4bd 	.word	0x0800b4bd
 800b768:	0800dfd0 	.word	0x0800dfd0

0800b76c <__sflush_r>:
 800b76c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b774:	0716      	lsls	r6, r2, #28
 800b776:	4605      	mov	r5, r0
 800b778:	460c      	mov	r4, r1
 800b77a:	d454      	bmi.n	800b826 <__sflush_r+0xba>
 800b77c:	684b      	ldr	r3, [r1, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	dc02      	bgt.n	800b788 <__sflush_r+0x1c>
 800b782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b784:	2b00      	cmp	r3, #0
 800b786:	dd48      	ble.n	800b81a <__sflush_r+0xae>
 800b788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b78a:	2e00      	cmp	r6, #0
 800b78c:	d045      	beq.n	800b81a <__sflush_r+0xae>
 800b78e:	2300      	movs	r3, #0
 800b790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b794:	682f      	ldr	r7, [r5, #0]
 800b796:	6a21      	ldr	r1, [r4, #32]
 800b798:	602b      	str	r3, [r5, #0]
 800b79a:	d030      	beq.n	800b7fe <__sflush_r+0x92>
 800b79c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b79e:	89a3      	ldrh	r3, [r4, #12]
 800b7a0:	0759      	lsls	r1, r3, #29
 800b7a2:	d505      	bpl.n	800b7b0 <__sflush_r+0x44>
 800b7a4:	6863      	ldr	r3, [r4, #4]
 800b7a6:	1ad2      	subs	r2, r2, r3
 800b7a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7aa:	b10b      	cbz	r3, 800b7b0 <__sflush_r+0x44>
 800b7ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7b4:	6a21      	ldr	r1, [r4, #32]
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	47b0      	blx	r6
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	d106      	bne.n	800b7ce <__sflush_r+0x62>
 800b7c0:	6829      	ldr	r1, [r5, #0]
 800b7c2:	291d      	cmp	r1, #29
 800b7c4:	d82b      	bhi.n	800b81e <__sflush_r+0xb2>
 800b7c6:	4a2a      	ldr	r2, [pc, #168]	@ (800b870 <__sflush_r+0x104>)
 800b7c8:	40ca      	lsrs	r2, r1
 800b7ca:	07d6      	lsls	r6, r2, #31
 800b7cc:	d527      	bpl.n	800b81e <__sflush_r+0xb2>
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	6062      	str	r2, [r4, #4]
 800b7d2:	04d9      	lsls	r1, r3, #19
 800b7d4:	6922      	ldr	r2, [r4, #16]
 800b7d6:	6022      	str	r2, [r4, #0]
 800b7d8:	d504      	bpl.n	800b7e4 <__sflush_r+0x78>
 800b7da:	1c42      	adds	r2, r0, #1
 800b7dc:	d101      	bne.n	800b7e2 <__sflush_r+0x76>
 800b7de:	682b      	ldr	r3, [r5, #0]
 800b7e0:	b903      	cbnz	r3, 800b7e4 <__sflush_r+0x78>
 800b7e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7e6:	602f      	str	r7, [r5, #0]
 800b7e8:	b1b9      	cbz	r1, 800b81a <__sflush_r+0xae>
 800b7ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7ee:	4299      	cmp	r1, r3
 800b7f0:	d002      	beq.n	800b7f8 <__sflush_r+0x8c>
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	f7ff f9e8 	bl	800abc8 <_free_r>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7fc:	e00d      	b.n	800b81a <__sflush_r+0xae>
 800b7fe:	2301      	movs	r3, #1
 800b800:	4628      	mov	r0, r5
 800b802:	47b0      	blx	r6
 800b804:	4602      	mov	r2, r0
 800b806:	1c50      	adds	r0, r2, #1
 800b808:	d1c9      	bne.n	800b79e <__sflush_r+0x32>
 800b80a:	682b      	ldr	r3, [r5, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d0c6      	beq.n	800b79e <__sflush_r+0x32>
 800b810:	2b1d      	cmp	r3, #29
 800b812:	d001      	beq.n	800b818 <__sflush_r+0xac>
 800b814:	2b16      	cmp	r3, #22
 800b816:	d11e      	bne.n	800b856 <__sflush_r+0xea>
 800b818:	602f      	str	r7, [r5, #0]
 800b81a:	2000      	movs	r0, #0
 800b81c:	e022      	b.n	800b864 <__sflush_r+0xf8>
 800b81e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b822:	b21b      	sxth	r3, r3
 800b824:	e01b      	b.n	800b85e <__sflush_r+0xf2>
 800b826:	690f      	ldr	r7, [r1, #16]
 800b828:	2f00      	cmp	r7, #0
 800b82a:	d0f6      	beq.n	800b81a <__sflush_r+0xae>
 800b82c:	0793      	lsls	r3, r2, #30
 800b82e:	680e      	ldr	r6, [r1, #0]
 800b830:	bf08      	it	eq
 800b832:	694b      	ldreq	r3, [r1, #20]
 800b834:	600f      	str	r7, [r1, #0]
 800b836:	bf18      	it	ne
 800b838:	2300      	movne	r3, #0
 800b83a:	eba6 0807 	sub.w	r8, r6, r7
 800b83e:	608b      	str	r3, [r1, #8]
 800b840:	f1b8 0f00 	cmp.w	r8, #0
 800b844:	dde9      	ble.n	800b81a <__sflush_r+0xae>
 800b846:	6a21      	ldr	r1, [r4, #32]
 800b848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b84a:	4643      	mov	r3, r8
 800b84c:	463a      	mov	r2, r7
 800b84e:	4628      	mov	r0, r5
 800b850:	47b0      	blx	r6
 800b852:	2800      	cmp	r0, #0
 800b854:	dc08      	bgt.n	800b868 <__sflush_r+0xfc>
 800b856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b85a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b85e:	81a3      	strh	r3, [r4, #12]
 800b860:	f04f 30ff 	mov.w	r0, #4294967295
 800b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b868:	4407      	add	r7, r0
 800b86a:	eba8 0800 	sub.w	r8, r8, r0
 800b86e:	e7e7      	b.n	800b840 <__sflush_r+0xd4>
 800b870:	20400001 	.word	0x20400001

0800b874 <_fflush_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	690b      	ldr	r3, [r1, #16]
 800b878:	4605      	mov	r5, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	b913      	cbnz	r3, 800b884 <_fflush_r+0x10>
 800b87e:	2500      	movs	r5, #0
 800b880:	4628      	mov	r0, r5
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	b118      	cbz	r0, 800b88e <_fflush_r+0x1a>
 800b886:	6a03      	ldr	r3, [r0, #32]
 800b888:	b90b      	cbnz	r3, 800b88e <_fflush_r+0x1a>
 800b88a:	f7fe fa0f 	bl	8009cac <__sinit>
 800b88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d0f3      	beq.n	800b87e <_fflush_r+0xa>
 800b896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b898:	07d0      	lsls	r0, r2, #31
 800b89a:	d404      	bmi.n	800b8a6 <_fflush_r+0x32>
 800b89c:	0599      	lsls	r1, r3, #22
 800b89e:	d402      	bmi.n	800b8a6 <_fflush_r+0x32>
 800b8a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8a2:	f7fe fb36 	bl	8009f12 <__retarget_lock_acquire_recursive>
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	f7ff ff5f 	bl	800b76c <__sflush_r>
 800b8ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8b0:	07da      	lsls	r2, r3, #31
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	d4e4      	bmi.n	800b880 <_fflush_r+0xc>
 800b8b6:	89a3      	ldrh	r3, [r4, #12]
 800b8b8:	059b      	lsls	r3, r3, #22
 800b8ba:	d4e1      	bmi.n	800b880 <_fflush_r+0xc>
 800b8bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8be:	f7fe fb29 	bl	8009f14 <__retarget_lock_release_recursive>
 800b8c2:	e7dd      	b.n	800b880 <_fflush_r+0xc>

0800b8c4 <memmove>:
 800b8c4:	4288      	cmp	r0, r1
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	eb01 0402 	add.w	r4, r1, r2
 800b8cc:	d902      	bls.n	800b8d4 <memmove+0x10>
 800b8ce:	4284      	cmp	r4, r0
 800b8d0:	4623      	mov	r3, r4
 800b8d2:	d807      	bhi.n	800b8e4 <memmove+0x20>
 800b8d4:	1e43      	subs	r3, r0, #1
 800b8d6:	42a1      	cmp	r1, r4
 800b8d8:	d008      	beq.n	800b8ec <memmove+0x28>
 800b8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8e2:	e7f8      	b.n	800b8d6 <memmove+0x12>
 800b8e4:	4402      	add	r2, r0
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	428a      	cmp	r2, r1
 800b8ea:	d100      	bne.n	800b8ee <memmove+0x2a>
 800b8ec:	bd10      	pop	{r4, pc}
 800b8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8f6:	e7f7      	b.n	800b8e8 <memmove+0x24>

0800b8f8 <_sbrk_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4d06      	ldr	r5, [pc, #24]	@ (800b914 <_sbrk_r+0x1c>)
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	4604      	mov	r4, r0
 800b900:	4608      	mov	r0, r1
 800b902:	602b      	str	r3, [r5, #0]
 800b904:	f7f9 f8da 	bl	8004abc <_sbrk>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_sbrk_r+0x1a>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_sbrk_r+0x1a>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	200015c8 	.word	0x200015c8

0800b918 <memcpy>:
 800b918:	440a      	add	r2, r1
 800b91a:	4291      	cmp	r1, r2
 800b91c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b920:	d100      	bne.n	800b924 <memcpy+0xc>
 800b922:	4770      	bx	lr
 800b924:	b510      	push	{r4, lr}
 800b926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b92e:	4291      	cmp	r1, r2
 800b930:	d1f9      	bne.n	800b926 <memcpy+0xe>
 800b932:	bd10      	pop	{r4, pc}

0800b934 <__assert_func>:
 800b934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b936:	4614      	mov	r4, r2
 800b938:	461a      	mov	r2, r3
 800b93a:	4b09      	ldr	r3, [pc, #36]	@ (800b960 <__assert_func+0x2c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4605      	mov	r5, r0
 800b940:	68d8      	ldr	r0, [r3, #12]
 800b942:	b14c      	cbz	r4, 800b958 <__assert_func+0x24>
 800b944:	4b07      	ldr	r3, [pc, #28]	@ (800b964 <__assert_func+0x30>)
 800b946:	9100      	str	r1, [sp, #0]
 800b948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b94c:	4906      	ldr	r1, [pc, #24]	@ (800b968 <__assert_func+0x34>)
 800b94e:	462b      	mov	r3, r5
 800b950:	f000 f870 	bl	800ba34 <fiprintf>
 800b954:	f000 f880 	bl	800ba58 <abort>
 800b958:	4b04      	ldr	r3, [pc, #16]	@ (800b96c <__assert_func+0x38>)
 800b95a:	461c      	mov	r4, r3
 800b95c:	e7f3      	b.n	800b946 <__assert_func+0x12>
 800b95e:	bf00      	nop
 800b960:	20000020 	.word	0x20000020
 800b964:	0800dfe5 	.word	0x0800dfe5
 800b968:	0800dff2 	.word	0x0800dff2
 800b96c:	0800e020 	.word	0x0800e020

0800b970 <_calloc_r>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	fba1 5402 	umull	r5, r4, r1, r2
 800b976:	b934      	cbnz	r4, 800b986 <_calloc_r+0x16>
 800b978:	4629      	mov	r1, r5
 800b97a:	f7ff f999 	bl	800acb0 <_malloc_r>
 800b97e:	4606      	mov	r6, r0
 800b980:	b928      	cbnz	r0, 800b98e <_calloc_r+0x1e>
 800b982:	4630      	mov	r0, r6
 800b984:	bd70      	pop	{r4, r5, r6, pc}
 800b986:	220c      	movs	r2, #12
 800b988:	6002      	str	r2, [r0, #0]
 800b98a:	2600      	movs	r6, #0
 800b98c:	e7f9      	b.n	800b982 <_calloc_r+0x12>
 800b98e:	462a      	mov	r2, r5
 800b990:	4621      	mov	r1, r4
 800b992:	f7fe fa41 	bl	8009e18 <memset>
 800b996:	e7f4      	b.n	800b982 <_calloc_r+0x12>

0800b998 <__ascii_mbtowc>:
 800b998:	b082      	sub	sp, #8
 800b99a:	b901      	cbnz	r1, 800b99e <__ascii_mbtowc+0x6>
 800b99c:	a901      	add	r1, sp, #4
 800b99e:	b142      	cbz	r2, 800b9b2 <__ascii_mbtowc+0x1a>
 800b9a0:	b14b      	cbz	r3, 800b9b6 <__ascii_mbtowc+0x1e>
 800b9a2:	7813      	ldrb	r3, [r2, #0]
 800b9a4:	600b      	str	r3, [r1, #0]
 800b9a6:	7812      	ldrb	r2, [r2, #0]
 800b9a8:	1e10      	subs	r0, r2, #0
 800b9aa:	bf18      	it	ne
 800b9ac:	2001      	movne	r0, #1
 800b9ae:	b002      	add	sp, #8
 800b9b0:	4770      	bx	lr
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	e7fb      	b.n	800b9ae <__ascii_mbtowc+0x16>
 800b9b6:	f06f 0001 	mvn.w	r0, #1
 800b9ba:	e7f8      	b.n	800b9ae <__ascii_mbtowc+0x16>

0800b9bc <_realloc_r>:
 800b9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	4614      	mov	r4, r2
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	b921      	cbnz	r1, 800b9d2 <_realloc_r+0x16>
 800b9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	f7ff b96f 	b.w	800acb0 <_malloc_r>
 800b9d2:	b92a      	cbnz	r2, 800b9e0 <_realloc_r+0x24>
 800b9d4:	f7ff f8f8 	bl	800abc8 <_free_r>
 800b9d8:	4625      	mov	r5, r4
 800b9da:	4628      	mov	r0, r5
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	f000 f841 	bl	800ba66 <_malloc_usable_size_r>
 800b9e4:	4284      	cmp	r4, r0
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	d802      	bhi.n	800b9f0 <_realloc_r+0x34>
 800b9ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9ee:	d8f4      	bhi.n	800b9da <_realloc_r+0x1e>
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	f7ff f95c 	bl	800acb0 <_malloc_r>
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	b908      	cbnz	r0, 800ba00 <_realloc_r+0x44>
 800b9fc:	4645      	mov	r5, r8
 800b9fe:	e7ec      	b.n	800b9da <_realloc_r+0x1e>
 800ba00:	42b4      	cmp	r4, r6
 800ba02:	4622      	mov	r2, r4
 800ba04:	4629      	mov	r1, r5
 800ba06:	bf28      	it	cs
 800ba08:	4632      	movcs	r2, r6
 800ba0a:	f7ff ff85 	bl	800b918 <memcpy>
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff f8d9 	bl	800abc8 <_free_r>
 800ba16:	e7f1      	b.n	800b9fc <_realloc_r+0x40>

0800ba18 <__ascii_wctomb>:
 800ba18:	4603      	mov	r3, r0
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	b141      	cbz	r1, 800ba30 <__ascii_wctomb+0x18>
 800ba1e:	2aff      	cmp	r2, #255	@ 0xff
 800ba20:	d904      	bls.n	800ba2c <__ascii_wctomb+0x14>
 800ba22:	228a      	movs	r2, #138	@ 0x8a
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2a:	4770      	bx	lr
 800ba2c:	700a      	strb	r2, [r1, #0]
 800ba2e:	2001      	movs	r0, #1
 800ba30:	4770      	bx	lr
	...

0800ba34 <fiprintf>:
 800ba34:	b40e      	push	{r1, r2, r3}
 800ba36:	b503      	push	{r0, r1, lr}
 800ba38:	4601      	mov	r1, r0
 800ba3a:	ab03      	add	r3, sp, #12
 800ba3c:	4805      	ldr	r0, [pc, #20]	@ (800ba54 <fiprintf+0x20>)
 800ba3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba42:	6800      	ldr	r0, [r0, #0]
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	f000 f83f 	bl	800bac8 <_vfiprintf_r>
 800ba4a:	b002      	add	sp, #8
 800ba4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba50:	b003      	add	sp, #12
 800ba52:	4770      	bx	lr
 800ba54:	20000020 	.word	0x20000020

0800ba58 <abort>:
 800ba58:	b508      	push	{r3, lr}
 800ba5a:	2006      	movs	r0, #6
 800ba5c:	f000 fa08 	bl	800be70 <raise>
 800ba60:	2001      	movs	r0, #1
 800ba62:	f7f8 ffb3 	bl	80049cc <_exit>

0800ba66 <_malloc_usable_size_r>:
 800ba66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba6a:	1f18      	subs	r0, r3, #4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	bfbc      	itt	lt
 800ba70:	580b      	ldrlt	r3, [r1, r0]
 800ba72:	18c0      	addlt	r0, r0, r3
 800ba74:	4770      	bx	lr

0800ba76 <__sfputc_r>:
 800ba76:	6893      	ldr	r3, [r2, #8]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	b410      	push	{r4}
 800ba7e:	6093      	str	r3, [r2, #8]
 800ba80:	da08      	bge.n	800ba94 <__sfputc_r+0x1e>
 800ba82:	6994      	ldr	r4, [r2, #24]
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	db01      	blt.n	800ba8c <__sfputc_r+0x16>
 800ba88:	290a      	cmp	r1, #10
 800ba8a:	d103      	bne.n	800ba94 <__sfputc_r+0x1e>
 800ba8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba90:	f000 b932 	b.w	800bcf8 <__swbuf_r>
 800ba94:	6813      	ldr	r3, [r2, #0]
 800ba96:	1c58      	adds	r0, r3, #1
 800ba98:	6010      	str	r0, [r2, #0]
 800ba9a:	7019      	strb	r1, [r3, #0]
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <__sfputs_r>:
 800baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa6:	4606      	mov	r6, r0
 800baa8:	460f      	mov	r7, r1
 800baaa:	4614      	mov	r4, r2
 800baac:	18d5      	adds	r5, r2, r3
 800baae:	42ac      	cmp	r4, r5
 800bab0:	d101      	bne.n	800bab6 <__sfputs_r+0x12>
 800bab2:	2000      	movs	r0, #0
 800bab4:	e007      	b.n	800bac6 <__sfputs_r+0x22>
 800bab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baba:	463a      	mov	r2, r7
 800babc:	4630      	mov	r0, r6
 800babe:	f7ff ffda 	bl	800ba76 <__sfputc_r>
 800bac2:	1c43      	adds	r3, r0, #1
 800bac4:	d1f3      	bne.n	800baae <__sfputs_r+0xa>
 800bac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bac8 <_vfiprintf_r>:
 800bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	460d      	mov	r5, r1
 800bace:	b09d      	sub	sp, #116	@ 0x74
 800bad0:	4614      	mov	r4, r2
 800bad2:	4698      	mov	r8, r3
 800bad4:	4606      	mov	r6, r0
 800bad6:	b118      	cbz	r0, 800bae0 <_vfiprintf_r+0x18>
 800bad8:	6a03      	ldr	r3, [r0, #32]
 800bada:	b90b      	cbnz	r3, 800bae0 <_vfiprintf_r+0x18>
 800badc:	f7fe f8e6 	bl	8009cac <__sinit>
 800bae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bae2:	07d9      	lsls	r1, r3, #31
 800bae4:	d405      	bmi.n	800baf2 <_vfiprintf_r+0x2a>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	059a      	lsls	r2, r3, #22
 800baea:	d402      	bmi.n	800baf2 <_vfiprintf_r+0x2a>
 800baec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baee:	f7fe fa10 	bl	8009f12 <__retarget_lock_acquire_recursive>
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	071b      	lsls	r3, r3, #28
 800baf6:	d501      	bpl.n	800bafc <_vfiprintf_r+0x34>
 800baf8:	692b      	ldr	r3, [r5, #16]
 800bafa:	b99b      	cbnz	r3, 800bb24 <_vfiprintf_r+0x5c>
 800bafc:	4629      	mov	r1, r5
 800bafe:	4630      	mov	r0, r6
 800bb00:	f000 f938 	bl	800bd74 <__swsetup_r>
 800bb04:	b170      	cbz	r0, 800bb24 <_vfiprintf_r+0x5c>
 800bb06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb08:	07dc      	lsls	r4, r3, #31
 800bb0a:	d504      	bpl.n	800bb16 <_vfiprintf_r+0x4e>
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	b01d      	add	sp, #116	@ 0x74
 800bb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb16:	89ab      	ldrh	r3, [r5, #12]
 800bb18:	0598      	lsls	r0, r3, #22
 800bb1a:	d4f7      	bmi.n	800bb0c <_vfiprintf_r+0x44>
 800bb1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb1e:	f7fe f9f9 	bl	8009f14 <__retarget_lock_release_recursive>
 800bb22:	e7f3      	b.n	800bb0c <_vfiprintf_r+0x44>
 800bb24:	2300      	movs	r3, #0
 800bb26:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb28:	2320      	movs	r3, #32
 800bb2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb32:	2330      	movs	r3, #48	@ 0x30
 800bb34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bce4 <_vfiprintf_r+0x21c>
 800bb38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb3c:	f04f 0901 	mov.w	r9, #1
 800bb40:	4623      	mov	r3, r4
 800bb42:	469a      	mov	sl, r3
 800bb44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb48:	b10a      	cbz	r2, 800bb4e <_vfiprintf_r+0x86>
 800bb4a:	2a25      	cmp	r2, #37	@ 0x25
 800bb4c:	d1f9      	bne.n	800bb42 <_vfiprintf_r+0x7a>
 800bb4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb52:	d00b      	beq.n	800bb6c <_vfiprintf_r+0xa4>
 800bb54:	465b      	mov	r3, fp
 800bb56:	4622      	mov	r2, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7ff ffa2 	bl	800baa4 <__sfputs_r>
 800bb60:	3001      	adds	r0, #1
 800bb62:	f000 80a7 	beq.w	800bcb4 <_vfiprintf_r+0x1ec>
 800bb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb68:	445a      	add	r2, fp
 800bb6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 809f 	beq.w	800bcb4 <_vfiprintf_r+0x1ec>
 800bb76:	2300      	movs	r3, #0
 800bb78:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb80:	f10a 0a01 	add.w	sl, sl, #1
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	9307      	str	r3, [sp, #28]
 800bb88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb8e:	4654      	mov	r4, sl
 800bb90:	2205      	movs	r2, #5
 800bb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb96:	4853      	ldr	r0, [pc, #332]	@ (800bce4 <_vfiprintf_r+0x21c>)
 800bb98:	f7f4 fb22 	bl	80001e0 <memchr>
 800bb9c:	9a04      	ldr	r2, [sp, #16]
 800bb9e:	b9d8      	cbnz	r0, 800bbd8 <_vfiprintf_r+0x110>
 800bba0:	06d1      	lsls	r1, r2, #27
 800bba2:	bf44      	itt	mi
 800bba4:	2320      	movmi	r3, #32
 800bba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbaa:	0713      	lsls	r3, r2, #28
 800bbac:	bf44      	itt	mi
 800bbae:	232b      	movmi	r3, #43	@ 0x2b
 800bbb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbba:	d015      	beq.n	800bbe8 <_vfiprintf_r+0x120>
 800bbbc:	9a07      	ldr	r2, [sp, #28]
 800bbbe:	4654      	mov	r4, sl
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	f04f 0c0a 	mov.w	ip, #10
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbcc:	3b30      	subs	r3, #48	@ 0x30
 800bbce:	2b09      	cmp	r3, #9
 800bbd0:	d94b      	bls.n	800bc6a <_vfiprintf_r+0x1a2>
 800bbd2:	b1b0      	cbz	r0, 800bc02 <_vfiprintf_r+0x13a>
 800bbd4:	9207      	str	r2, [sp, #28]
 800bbd6:	e014      	b.n	800bc02 <_vfiprintf_r+0x13a>
 800bbd8:	eba0 0308 	sub.w	r3, r0, r8
 800bbdc:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	46a2      	mov	sl, r4
 800bbe6:	e7d2      	b.n	800bb8e <_vfiprintf_r+0xc6>
 800bbe8:	9b03      	ldr	r3, [sp, #12]
 800bbea:	1d19      	adds	r1, r3, #4
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	9103      	str	r1, [sp, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bfbb      	ittet	lt
 800bbf4:	425b      	neglt	r3, r3
 800bbf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbfa:	9307      	strge	r3, [sp, #28]
 800bbfc:	9307      	strlt	r3, [sp, #28]
 800bbfe:	bfb8      	it	lt
 800bc00:	9204      	strlt	r2, [sp, #16]
 800bc02:	7823      	ldrb	r3, [r4, #0]
 800bc04:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc06:	d10a      	bne.n	800bc1e <_vfiprintf_r+0x156>
 800bc08:	7863      	ldrb	r3, [r4, #1]
 800bc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc0c:	d132      	bne.n	800bc74 <_vfiprintf_r+0x1ac>
 800bc0e:	9b03      	ldr	r3, [sp, #12]
 800bc10:	1d1a      	adds	r2, r3, #4
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	9203      	str	r2, [sp, #12]
 800bc16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc1a:	3402      	adds	r4, #2
 800bc1c:	9305      	str	r3, [sp, #20]
 800bc1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcf4 <_vfiprintf_r+0x22c>
 800bc22:	7821      	ldrb	r1, [r4, #0]
 800bc24:	2203      	movs	r2, #3
 800bc26:	4650      	mov	r0, sl
 800bc28:	f7f4 fada 	bl	80001e0 <memchr>
 800bc2c:	b138      	cbz	r0, 800bc3e <_vfiprintf_r+0x176>
 800bc2e:	9b04      	ldr	r3, [sp, #16]
 800bc30:	eba0 000a 	sub.w	r0, r0, sl
 800bc34:	2240      	movs	r2, #64	@ 0x40
 800bc36:	4082      	lsls	r2, r0
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	3401      	adds	r4, #1
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc42:	4829      	ldr	r0, [pc, #164]	@ (800bce8 <_vfiprintf_r+0x220>)
 800bc44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc48:	2206      	movs	r2, #6
 800bc4a:	f7f4 fac9 	bl	80001e0 <memchr>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d03f      	beq.n	800bcd2 <_vfiprintf_r+0x20a>
 800bc52:	4b26      	ldr	r3, [pc, #152]	@ (800bcec <_vfiprintf_r+0x224>)
 800bc54:	bb1b      	cbnz	r3, 800bc9e <_vfiprintf_r+0x1d6>
 800bc56:	9b03      	ldr	r3, [sp, #12]
 800bc58:	3307      	adds	r3, #7
 800bc5a:	f023 0307 	bic.w	r3, r3, #7
 800bc5e:	3308      	adds	r3, #8
 800bc60:	9303      	str	r3, [sp, #12]
 800bc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc64:	443b      	add	r3, r7
 800bc66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc68:	e76a      	b.n	800bb40 <_vfiprintf_r+0x78>
 800bc6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc6e:	460c      	mov	r4, r1
 800bc70:	2001      	movs	r0, #1
 800bc72:	e7a8      	b.n	800bbc6 <_vfiprintf_r+0xfe>
 800bc74:	2300      	movs	r3, #0
 800bc76:	3401      	adds	r4, #1
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	f04f 0c0a 	mov.w	ip, #10
 800bc80:	4620      	mov	r0, r4
 800bc82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc86:	3a30      	subs	r2, #48	@ 0x30
 800bc88:	2a09      	cmp	r2, #9
 800bc8a:	d903      	bls.n	800bc94 <_vfiprintf_r+0x1cc>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d0c6      	beq.n	800bc1e <_vfiprintf_r+0x156>
 800bc90:	9105      	str	r1, [sp, #20]
 800bc92:	e7c4      	b.n	800bc1e <_vfiprintf_r+0x156>
 800bc94:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc98:	4604      	mov	r4, r0
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e7f0      	b.n	800bc80 <_vfiprintf_r+0x1b8>
 800bc9e:	ab03      	add	r3, sp, #12
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	462a      	mov	r2, r5
 800bca4:	4b12      	ldr	r3, [pc, #72]	@ (800bcf0 <_vfiprintf_r+0x228>)
 800bca6:	a904      	add	r1, sp, #16
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f7fd fbbd 	bl	8009428 <_printf_float>
 800bcae:	4607      	mov	r7, r0
 800bcb0:	1c78      	adds	r0, r7, #1
 800bcb2:	d1d6      	bne.n	800bc62 <_vfiprintf_r+0x19a>
 800bcb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcb6:	07d9      	lsls	r1, r3, #31
 800bcb8:	d405      	bmi.n	800bcc6 <_vfiprintf_r+0x1fe>
 800bcba:	89ab      	ldrh	r3, [r5, #12]
 800bcbc:	059a      	lsls	r2, r3, #22
 800bcbe:	d402      	bmi.n	800bcc6 <_vfiprintf_r+0x1fe>
 800bcc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcc2:	f7fe f927 	bl	8009f14 <__retarget_lock_release_recursive>
 800bcc6:	89ab      	ldrh	r3, [r5, #12]
 800bcc8:	065b      	lsls	r3, r3, #25
 800bcca:	f53f af1f 	bmi.w	800bb0c <_vfiprintf_r+0x44>
 800bcce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcd0:	e71e      	b.n	800bb10 <_vfiprintf_r+0x48>
 800bcd2:	ab03      	add	r3, sp, #12
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	462a      	mov	r2, r5
 800bcd8:	4b05      	ldr	r3, [pc, #20]	@ (800bcf0 <_vfiprintf_r+0x228>)
 800bcda:	a904      	add	r1, sp, #16
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7fd fe3b 	bl	8009958 <_printf_i>
 800bce2:	e7e4      	b.n	800bcae <_vfiprintf_r+0x1e6>
 800bce4:	0800dfca 	.word	0x0800dfca
 800bce8:	0800dfd4 	.word	0x0800dfd4
 800bcec:	08009429 	.word	0x08009429
 800bcf0:	0800baa5 	.word	0x0800baa5
 800bcf4:	0800dfd0 	.word	0x0800dfd0

0800bcf8 <__swbuf_r>:
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	460e      	mov	r6, r1
 800bcfc:	4614      	mov	r4, r2
 800bcfe:	4605      	mov	r5, r0
 800bd00:	b118      	cbz	r0, 800bd0a <__swbuf_r+0x12>
 800bd02:	6a03      	ldr	r3, [r0, #32]
 800bd04:	b90b      	cbnz	r3, 800bd0a <__swbuf_r+0x12>
 800bd06:	f7fd ffd1 	bl	8009cac <__sinit>
 800bd0a:	69a3      	ldr	r3, [r4, #24]
 800bd0c:	60a3      	str	r3, [r4, #8]
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	071a      	lsls	r2, r3, #28
 800bd12:	d501      	bpl.n	800bd18 <__swbuf_r+0x20>
 800bd14:	6923      	ldr	r3, [r4, #16]
 800bd16:	b943      	cbnz	r3, 800bd2a <__swbuf_r+0x32>
 800bd18:	4621      	mov	r1, r4
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f000 f82a 	bl	800bd74 <__swsetup_r>
 800bd20:	b118      	cbz	r0, 800bd2a <__swbuf_r+0x32>
 800bd22:	f04f 37ff 	mov.w	r7, #4294967295
 800bd26:	4638      	mov	r0, r7
 800bd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	6922      	ldr	r2, [r4, #16]
 800bd2e:	1a98      	subs	r0, r3, r2
 800bd30:	6963      	ldr	r3, [r4, #20]
 800bd32:	b2f6      	uxtb	r6, r6
 800bd34:	4283      	cmp	r3, r0
 800bd36:	4637      	mov	r7, r6
 800bd38:	dc05      	bgt.n	800bd46 <__swbuf_r+0x4e>
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	f7ff fd99 	bl	800b874 <_fflush_r>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d1ed      	bne.n	800bd22 <__swbuf_r+0x2a>
 800bd46:	68a3      	ldr	r3, [r4, #8]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	60a3      	str	r3, [r4, #8]
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	6022      	str	r2, [r4, #0]
 800bd52:	701e      	strb	r6, [r3, #0]
 800bd54:	6962      	ldr	r2, [r4, #20]
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d004      	beq.n	800bd66 <__swbuf_r+0x6e>
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	07db      	lsls	r3, r3, #31
 800bd60:	d5e1      	bpl.n	800bd26 <__swbuf_r+0x2e>
 800bd62:	2e0a      	cmp	r6, #10
 800bd64:	d1df      	bne.n	800bd26 <__swbuf_r+0x2e>
 800bd66:	4621      	mov	r1, r4
 800bd68:	4628      	mov	r0, r5
 800bd6a:	f7ff fd83 	bl	800b874 <_fflush_r>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d0d9      	beq.n	800bd26 <__swbuf_r+0x2e>
 800bd72:	e7d6      	b.n	800bd22 <__swbuf_r+0x2a>

0800bd74 <__swsetup_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4b29      	ldr	r3, [pc, #164]	@ (800be1c <__swsetup_r+0xa8>)
 800bd78:	4605      	mov	r5, r0
 800bd7a:	6818      	ldr	r0, [r3, #0]
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	b118      	cbz	r0, 800bd88 <__swsetup_r+0x14>
 800bd80:	6a03      	ldr	r3, [r0, #32]
 800bd82:	b90b      	cbnz	r3, 800bd88 <__swsetup_r+0x14>
 800bd84:	f7fd ff92 	bl	8009cac <__sinit>
 800bd88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8c:	0719      	lsls	r1, r3, #28
 800bd8e:	d422      	bmi.n	800bdd6 <__swsetup_r+0x62>
 800bd90:	06da      	lsls	r2, r3, #27
 800bd92:	d407      	bmi.n	800bda4 <__swsetup_r+0x30>
 800bd94:	2209      	movs	r2, #9
 800bd96:	602a      	str	r2, [r5, #0]
 800bd98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd9c:	81a3      	strh	r3, [r4, #12]
 800bd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bda2:	e033      	b.n	800be0c <__swsetup_r+0x98>
 800bda4:	0758      	lsls	r0, r3, #29
 800bda6:	d512      	bpl.n	800bdce <__swsetup_r+0x5a>
 800bda8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdaa:	b141      	cbz	r1, 800bdbe <__swsetup_r+0x4a>
 800bdac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdb0:	4299      	cmp	r1, r3
 800bdb2:	d002      	beq.n	800bdba <__swsetup_r+0x46>
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f7fe ff07 	bl	800abc8 <_free_r>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	6063      	str	r3, [r4, #4]
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	89a3      	ldrh	r3, [r4, #12]
 800bdd0:	f043 0308 	orr.w	r3, r3, #8
 800bdd4:	81a3      	strh	r3, [r4, #12]
 800bdd6:	6923      	ldr	r3, [r4, #16]
 800bdd8:	b94b      	cbnz	r3, 800bdee <__swsetup_r+0x7a>
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bde0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bde4:	d003      	beq.n	800bdee <__swsetup_r+0x7a>
 800bde6:	4621      	mov	r1, r4
 800bde8:	4628      	mov	r0, r5
 800bdea:	f000 f883 	bl	800bef4 <__smakebuf_r>
 800bdee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf2:	f013 0201 	ands.w	r2, r3, #1
 800bdf6:	d00a      	beq.n	800be0e <__swsetup_r+0x9a>
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	60a2      	str	r2, [r4, #8]
 800bdfc:	6962      	ldr	r2, [r4, #20]
 800bdfe:	4252      	negs	r2, r2
 800be00:	61a2      	str	r2, [r4, #24]
 800be02:	6922      	ldr	r2, [r4, #16]
 800be04:	b942      	cbnz	r2, 800be18 <__swsetup_r+0xa4>
 800be06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be0a:	d1c5      	bne.n	800bd98 <__swsetup_r+0x24>
 800be0c:	bd38      	pop	{r3, r4, r5, pc}
 800be0e:	0799      	lsls	r1, r3, #30
 800be10:	bf58      	it	pl
 800be12:	6962      	ldrpl	r2, [r4, #20]
 800be14:	60a2      	str	r2, [r4, #8]
 800be16:	e7f4      	b.n	800be02 <__swsetup_r+0x8e>
 800be18:	2000      	movs	r0, #0
 800be1a:	e7f7      	b.n	800be0c <__swsetup_r+0x98>
 800be1c:	20000020 	.word	0x20000020

0800be20 <_raise_r>:
 800be20:	291f      	cmp	r1, #31
 800be22:	b538      	push	{r3, r4, r5, lr}
 800be24:	4605      	mov	r5, r0
 800be26:	460c      	mov	r4, r1
 800be28:	d904      	bls.n	800be34 <_raise_r+0x14>
 800be2a:	2316      	movs	r3, #22
 800be2c:	6003      	str	r3, [r0, #0]
 800be2e:	f04f 30ff 	mov.w	r0, #4294967295
 800be32:	bd38      	pop	{r3, r4, r5, pc}
 800be34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be36:	b112      	cbz	r2, 800be3e <_raise_r+0x1e>
 800be38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be3c:	b94b      	cbnz	r3, 800be52 <_raise_r+0x32>
 800be3e:	4628      	mov	r0, r5
 800be40:	f000 f830 	bl	800bea4 <_getpid_r>
 800be44:	4622      	mov	r2, r4
 800be46:	4601      	mov	r1, r0
 800be48:	4628      	mov	r0, r5
 800be4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4e:	f000 b817 	b.w	800be80 <_kill_r>
 800be52:	2b01      	cmp	r3, #1
 800be54:	d00a      	beq.n	800be6c <_raise_r+0x4c>
 800be56:	1c59      	adds	r1, r3, #1
 800be58:	d103      	bne.n	800be62 <_raise_r+0x42>
 800be5a:	2316      	movs	r3, #22
 800be5c:	6003      	str	r3, [r0, #0]
 800be5e:	2001      	movs	r0, #1
 800be60:	e7e7      	b.n	800be32 <_raise_r+0x12>
 800be62:	2100      	movs	r1, #0
 800be64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be68:	4620      	mov	r0, r4
 800be6a:	4798      	blx	r3
 800be6c:	2000      	movs	r0, #0
 800be6e:	e7e0      	b.n	800be32 <_raise_r+0x12>

0800be70 <raise>:
 800be70:	4b02      	ldr	r3, [pc, #8]	@ (800be7c <raise+0xc>)
 800be72:	4601      	mov	r1, r0
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	f7ff bfd3 	b.w	800be20 <_raise_r>
 800be7a:	bf00      	nop
 800be7c:	20000020 	.word	0x20000020

0800be80 <_kill_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4d07      	ldr	r5, [pc, #28]	@ (800bea0 <_kill_r+0x20>)
 800be84:	2300      	movs	r3, #0
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	4611      	mov	r1, r2
 800be8c:	602b      	str	r3, [r5, #0]
 800be8e:	f7f8 fd8d 	bl	80049ac <_kill>
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	d102      	bne.n	800be9c <_kill_r+0x1c>
 800be96:	682b      	ldr	r3, [r5, #0]
 800be98:	b103      	cbz	r3, 800be9c <_kill_r+0x1c>
 800be9a:	6023      	str	r3, [r4, #0]
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
 800be9e:	bf00      	nop
 800bea0:	200015c8 	.word	0x200015c8

0800bea4 <_getpid_r>:
 800bea4:	f7f8 bd7a 	b.w	800499c <_getpid>

0800bea8 <__swhatbuf_r>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	460c      	mov	r4, r1
 800beac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb0:	2900      	cmp	r1, #0
 800beb2:	b096      	sub	sp, #88	@ 0x58
 800beb4:	4615      	mov	r5, r2
 800beb6:	461e      	mov	r6, r3
 800beb8:	da0d      	bge.n	800bed6 <__swhatbuf_r+0x2e>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bec0:	f04f 0100 	mov.w	r1, #0
 800bec4:	bf14      	ite	ne
 800bec6:	2340      	movne	r3, #64	@ 0x40
 800bec8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800becc:	2000      	movs	r0, #0
 800bece:	6031      	str	r1, [r6, #0]
 800bed0:	602b      	str	r3, [r5, #0]
 800bed2:	b016      	add	sp, #88	@ 0x58
 800bed4:	bd70      	pop	{r4, r5, r6, pc}
 800bed6:	466a      	mov	r2, sp
 800bed8:	f000 f848 	bl	800bf6c <_fstat_r>
 800bedc:	2800      	cmp	r0, #0
 800bede:	dbec      	blt.n	800beba <__swhatbuf_r+0x12>
 800bee0:	9901      	ldr	r1, [sp, #4]
 800bee2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bee6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800beea:	4259      	negs	r1, r3
 800beec:	4159      	adcs	r1, r3
 800beee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bef2:	e7eb      	b.n	800becc <__swhatbuf_r+0x24>

0800bef4 <__smakebuf_r>:
 800bef4:	898b      	ldrh	r3, [r1, #12]
 800bef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bef8:	079d      	lsls	r5, r3, #30
 800befa:	4606      	mov	r6, r0
 800befc:	460c      	mov	r4, r1
 800befe:	d507      	bpl.n	800bf10 <__smakebuf_r+0x1c>
 800bf00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	6123      	str	r3, [r4, #16]
 800bf08:	2301      	movs	r3, #1
 800bf0a:	6163      	str	r3, [r4, #20]
 800bf0c:	b003      	add	sp, #12
 800bf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf10:	ab01      	add	r3, sp, #4
 800bf12:	466a      	mov	r2, sp
 800bf14:	f7ff ffc8 	bl	800bea8 <__swhatbuf_r>
 800bf18:	9f00      	ldr	r7, [sp, #0]
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7fe fec6 	bl	800acb0 <_malloc_r>
 800bf24:	b948      	cbnz	r0, 800bf3a <__smakebuf_r+0x46>
 800bf26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2a:	059a      	lsls	r2, r3, #22
 800bf2c:	d4ee      	bmi.n	800bf0c <__smakebuf_r+0x18>
 800bf2e:	f023 0303 	bic.w	r3, r3, #3
 800bf32:	f043 0302 	orr.w	r3, r3, #2
 800bf36:	81a3      	strh	r3, [r4, #12]
 800bf38:	e7e2      	b.n	800bf00 <__smakebuf_r+0xc>
 800bf3a:	89a3      	ldrh	r3, [r4, #12]
 800bf3c:	6020      	str	r0, [r4, #0]
 800bf3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf42:	81a3      	strh	r3, [r4, #12]
 800bf44:	9b01      	ldr	r3, [sp, #4]
 800bf46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf4a:	b15b      	cbz	r3, 800bf64 <__smakebuf_r+0x70>
 800bf4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf50:	4630      	mov	r0, r6
 800bf52:	f000 f81d 	bl	800bf90 <_isatty_r>
 800bf56:	b128      	cbz	r0, 800bf64 <__smakebuf_r+0x70>
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	f023 0303 	bic.w	r3, r3, #3
 800bf5e:	f043 0301 	orr.w	r3, r3, #1
 800bf62:	81a3      	strh	r3, [r4, #12]
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	431d      	orrs	r5, r3
 800bf68:	81a5      	strh	r5, [r4, #12]
 800bf6a:	e7cf      	b.n	800bf0c <__smakebuf_r+0x18>

0800bf6c <_fstat_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4d07      	ldr	r5, [pc, #28]	@ (800bf8c <_fstat_r+0x20>)
 800bf70:	2300      	movs	r3, #0
 800bf72:	4604      	mov	r4, r0
 800bf74:	4608      	mov	r0, r1
 800bf76:	4611      	mov	r1, r2
 800bf78:	602b      	str	r3, [r5, #0]
 800bf7a:	f7f8 fd77 	bl	8004a6c <_fstat>
 800bf7e:	1c43      	adds	r3, r0, #1
 800bf80:	d102      	bne.n	800bf88 <_fstat_r+0x1c>
 800bf82:	682b      	ldr	r3, [r5, #0]
 800bf84:	b103      	cbz	r3, 800bf88 <_fstat_r+0x1c>
 800bf86:	6023      	str	r3, [r4, #0]
 800bf88:	bd38      	pop	{r3, r4, r5, pc}
 800bf8a:	bf00      	nop
 800bf8c:	200015c8 	.word	0x200015c8

0800bf90 <_isatty_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4d06      	ldr	r5, [pc, #24]	@ (800bfac <_isatty_r+0x1c>)
 800bf94:	2300      	movs	r3, #0
 800bf96:	4604      	mov	r4, r0
 800bf98:	4608      	mov	r0, r1
 800bf9a:	602b      	str	r3, [r5, #0]
 800bf9c:	f7f8 fd76 	bl	8004a8c <_isatty>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d102      	bne.n	800bfaa <_isatty_r+0x1a>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b103      	cbz	r3, 800bfaa <_isatty_r+0x1a>
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	200015c8 	.word	0x200015c8

0800bfb0 <_init>:
 800bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb2:	bf00      	nop
 800bfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb6:	bc08      	pop	{r3}
 800bfb8:	469e      	mov	lr, r3
 800bfba:	4770      	bx	lr

0800bfbc <_fini>:
 800bfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfbe:	bf00      	nop
 800bfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc2:	bc08      	pop	{r3}
 800bfc4:	469e      	mov	lr, r3
 800bfc6:	4770      	bx	lr
